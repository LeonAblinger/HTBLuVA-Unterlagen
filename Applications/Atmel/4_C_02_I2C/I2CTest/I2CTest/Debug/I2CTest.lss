
I2CTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000586  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a37  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000829  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054a  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b4  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b3  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000276b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e8       	ldi	r30, 0x86	; 134
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <main>
  a2:	0c 94 c1 02 	jmp	0x582	; 0x582 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <i2cInit>:
*********************************************************************************************************/
TBool
i2cInit(
	unsigned long aBitrate,
	unsigned long aClkFrequency )
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	2d 97       	sbiw	r28, 0x0d	; 13
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	6e 83       	std	Y+6, r22	; 0x06
  c0:	7f 83       	std	Y+7, r23	; 0x07
  c2:	88 87       	std	Y+8, r24	; 0x08
  c4:	99 87       	std	Y+9, r25	; 0x09
  c6:	2a 87       	std	Y+10, r18	; 0x0a
  c8:	3b 87       	std	Y+11, r19	; 0x0b
  ca:	4c 87       	std	Y+12, r20	; 0x0c
  cc:	5d 87       	std	Y+13, r21	; 0x0d
	// TWBR <= 255
	unsigned long twb;
	unsigned char tws;
	
	for( tws = 0; tws < sizeof(i2cPrescalerValues); tws++ )
  ce:	1d 82       	std	Y+5, r1	; 0x05
  d0:	37 c0       	rjmp	.+110    	; 0x140 <i2cInit+0x96>
	{
		twb = (( aClkFrequency / aBitrate ) - 16 ) / ( 2 * i2cPrescalerValues[tws] );
  d2:	8a 85       	ldd	r24, Y+10	; 0x0a
  d4:	9b 85       	ldd	r25, Y+11	; 0x0b
  d6:	ac 85       	ldd	r26, Y+12	; 0x0c
  d8:	bd 85       	ldd	r27, Y+13	; 0x0d
  da:	2e 81       	ldd	r18, Y+6	; 0x06
  dc:	3f 81       	ldd	r19, Y+7	; 0x07
  de:	48 85       	ldd	r20, Y+8	; 0x08
  e0:	59 85       	ldd	r21, Y+9	; 0x09
  e2:	bc 01       	movw	r22, r24
  e4:	cd 01       	movw	r24, r26
  e6:	0e 94 9f 02 	call	0x53e	; 0x53e <__udivmodsi4>
  ea:	da 01       	movw	r26, r20
  ec:	c9 01       	movw	r24, r18
  ee:	40 97       	sbiw	r24, 0x10	; 16
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	22 2f       	mov	r18, r18
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	20 50       	subi	r18, 0x00	; 0
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	22 2f       	mov	r18, r18
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	03 2e       	mov	r0, r19
 10c:	00 0c       	add	r0, r0
 10e:	44 0b       	sbc	r20, r20
 110:	55 0b       	sbc	r21, r21
 112:	bc 01       	movw	r22, r24
 114:	cd 01       	movw	r24, r26
 116:	0e 94 9f 02 	call	0x53e	; 0x53e <__udivmodsi4>
 11a:	da 01       	movw	r26, r20
 11c:	c9 01       	movw	r24, r18
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	ab 83       	std	Y+3, r26	; 0x03
 124:	bc 83       	std	Y+4, r27	; 0x04
		
		if( twb <= 255 )
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	ab 81       	ldd	r26, Y+3	; 0x03
 12c:	bc 81       	ldd	r27, Y+4	; 0x04
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	91 05       	cpc	r25, r1
 132:	a1 05       	cpc	r26, r1
 134:	b1 05       	cpc	r27, r1
 136:	41 f0       	breq	.+16     	; 0x148 <i2cInit+0x9e>
 138:	38 f0       	brcs	.+14     	; 0x148 <i2cInit+0x9e>
{
	// TWBR <= 255
	unsigned long twb;
	unsigned char tws;
	
	for( tws = 0; tws < sizeof(i2cPrescalerValues); tws++ )
 13a:	8d 81       	ldd	r24, Y+5	; 0x05
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	8d 83       	std	Y+5, r24	; 0x05
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	30 f2       	brcs	.-116    	; 0xd2 <i2cInit+0x28>
 146:	01 c0       	rjmp	.+2      	; 0x14a <i2cInit+0xa0>
	{
		twb = (( aClkFrequency / aBitrate ) - 16 ) / ( 2 * i2cPrescalerValues[tws] );
		
		if( twb <= 255 )
			break;
 148:	00 00       	nop
	}
	
	DDRC &= (( 1 << DDC0 ) | ( 1 << DDC1 ));
 14a:	87 e2       	ldi	r24, 0x27	; 39
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	27 e2       	ldi	r18, 0x27	; 39
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	23 70       	andi	r18, 0x03	; 3
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	/* Switch on pullup resistors */
	PORTC |= ( 1 << PC0 ) | ( 1 << PC1 );
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	28 e2       	ldi	r18, 0x28	; 40
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	23 60       	ori	r18, 0x03	; 3
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	
	TWBR |= ( twb << 0 );
 16e:	88 eb       	ldi	r24, 0xB8	; 184
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	28 eb       	ldi	r18, 0xB8	; 184
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	30 81       	ld	r19, Z
 17a:	29 81       	ldd	r18, Y+1	; 0x01
 17c:	23 2b       	or	r18, r19
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
	TWSR |= ( tws << TWPS0 );
 182:	89 eb       	ldi	r24, 0xB9	; 185
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	29 eb       	ldi	r18, 0xB9	; 185
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	30 81       	ld	r19, Z
 18e:	2d 81       	ldd	r18, Y+5	; 0x05
 190:	23 2b       	or	r18, r19
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
	
	return ETRUE;
 196:	81 e0       	ldi	r24, 0x01	; 1
}
 198:	2d 96       	adiw	r28, 0x0d	; 13
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <i2cWrite>:
TBool
i2cWrite(
	unsigned char	aSlaveAdress,
	unsigned char * aBuffer,
	unsigned int	aSize )
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	27 97       	sbiw	r28, 0x07	; 7
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	8b 83       	std	Y+3, r24	; 0x03
 1c0:	7d 83       	std	Y+5, r23	; 0x05
 1c2:	6c 83       	std	Y+4, r22	; 0x04
 1c4:	5f 83       	std	Y+7, r21	; 0x07
 1c6:	4e 83       	std	Y+6, r20	; 0x06
	unsigned int i;
	
	if( !i2cStart() )
 1c8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <i2cStart>
 1cc:	88 23       	and	r24, r24
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <i2cWrite+0x2a>
		return EFALSE;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	2c c0       	rjmp	.+88     	; 0x22c <i2cWrite+0x82>
		
	if( !i2cSendAddress( aSlaveAdress & TW_WRITE ))
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	0e 94 a5 01 	call	0x34a	; 0x34a <i2cSendAddress>
 1dc:	88 23       	and	r24, r24
 1de:	21 f4       	brne	.+8      	; 0x1e8 <i2cWrite+0x3e>
	{
		i2cStop();
 1e0:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
		return EFALSE;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	22 c0       	rjmp	.+68     	; 0x22c <i2cWrite+0x82>
	}
	
	for( i = 0; i < aSize; i++)
 1e8:	1a 82       	std	Y+2, r1	; 0x02
 1ea:	19 82       	std	Y+1, r1	; 0x01
 1ec:	15 c0       	rjmp	.+42     	; 0x218 <i2cWrite+0x6e>
	{
		if( !i2cSendByte( aBuffer[i] ))
 1ee:	2c 81       	ldd	r18, Y+4	; 0x04
 1f0:	3d 81       	ldd	r19, Y+5	; 0x05
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	fc 01       	movw	r30, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <i2cSendByte>
 202:	88 23       	and	r24, r24
 204:	21 f4       	brne	.+8      	; 0x20e <i2cWrite+0x64>
		{
			i2cStop();
 206:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
			return EFALSE;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0f c0       	rjmp	.+30     	; 0x22c <i2cWrite+0x82>
	{
		i2cStop();
		return EFALSE;
	}
	
	for( i = 0; i < aSize; i++)
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	9a 81       	ldd	r25, Y+2	; 0x02
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	3a 81       	ldd	r19, Y+2	; 0x02
 21c:	8e 81       	ldd	r24, Y+6	; 0x06
 21e:	9f 81       	ldd	r25, Y+7	; 0x07
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	20 f3       	brcs	.-56     	; 0x1ee <i2cWrite+0x44>
			i2cStop();
			return EFALSE;
		}
	}
	
	i2cStop();
 226:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
	return EFALSE;
 22a:	80 e0       	ldi	r24, 0x00	; 0
}
 22c:	27 96       	adiw	r28, 0x07	; 7
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <i2cRead>:
TBool
i2cRead(
	unsigned char	aAddress,
	unsigned char * aBuffer,
	unsigned int	aSize )
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	27 97       	sbiw	r28, 0x07	; 7
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
 252:	8b 83       	std	Y+3, r24	; 0x03
 254:	7d 83       	std	Y+5, r23	; 0x05
 256:	6c 83       	std	Y+4, r22	; 0x04
 258:	5f 83       	std	Y+7, r21	; 0x07
 25a:	4e 83       	std	Y+6, r20	; 0x06
	unsigned int i;
	
	if( !i2cStart() )
 25c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <i2cStart>
 260:	88 23       	and	r24, r24
 262:	11 f4       	brne	.+4      	; 0x268 <i2cRead+0x2a>
	return EFALSE;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	3b c0       	rjmp	.+118    	; 0x2de <i2cRead+0xa0>
	
	if( !i2cSendAddress( aAddress | TW_READ ))
 268:	8b 81       	ldd	r24, Y+3	; 0x03
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	0e 94 a5 01 	call	0x34a	; 0x34a <i2cSendAddress>
 270:	88 23       	and	r24, r24
 272:	21 f4       	brne	.+8      	; 0x27c <i2cRead+0x3e>
	{
		i2cStop();
 274:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
		return EFALSE;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	31 c0       	rjmp	.+98     	; 0x2de <i2cRead+0xa0>
	}
	
	for( i = 0; i < aSize - 1; i++)
 27c:	1a 82       	std	Y+2, r1	; 0x02
 27e:	19 82       	std	Y+1, r1	; 0x01
 280:	13 c0       	rjmp	.+38     	; 0x2a8 <i2cRead+0x6a>
	{
		if( !i2cReadByte( aBuffer + i ))
 282:	2c 81       	ldd	r18, Y+4	; 0x04
 284:	3d 81       	ldd	r19, Y+5	; 0x05
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	82 0f       	add	r24, r18
 28c:	93 1f       	adc	r25, r19
 28e:	0e 94 1f 02 	call	0x43e	; 0x43e <i2cReadByte>
 292:	88 23       	and	r24, r24
 294:	21 f4       	brne	.+8      	; 0x29e <i2cRead+0x60>
		{
			i2cStop();
 296:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
			return EFALSE;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	20 c0       	rjmp	.+64     	; 0x2de <i2cRead+0xa0>
	{
		i2cStop();
		return EFALSE;
	}
	
	for( i = 0; i < aSize - 1; i++)
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	9a 83       	std	Y+2, r25	; 0x02
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	8e 81       	ldd	r24, Y+6	; 0x06
 2aa:	9f 81       	ldd	r25, Y+7	; 0x07
 2ac:	9c 01       	movw	r18, r24
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	31 09       	sbc	r19, r1
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	82 17       	cp	r24, r18
 2b8:	93 07       	cpc	r25, r19
 2ba:	18 f3       	brcs	.-58     	; 0x282 <i2cRead+0x44>
			i2cStop();
			return EFALSE;
		}
	}

	if( !i2cReadLastByte( aBuffer + i ))
 2bc:	2c 81       	ldd	r18, Y+4	; 0x04
 2be:	3d 81       	ldd	r19, Y+5	; 0x05
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	82 0f       	add	r24, r18
 2c6:	93 1f       	adc	r25, r19
 2c8:	0e 94 4d 02 	call	0x49a	; 0x49a <i2cReadLastByte>
 2cc:	88 23       	and	r24, r24
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <i2cRead+0x9a>
	{
		i2cStop();
 2d0:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
		return EFALSE;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <i2cRead+0xa0>
	}

	i2cStop();
 2d8:	0e 94 98 01 	call	0x330	; 0x330 <i2cStop>
	return EFALSE;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
}
 2de:	27 96       	adiw	r28, 0x07	; 7
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <i2cStart>:
Description:
  Starts the TWI (I2C) interface & transmission.
*********************************************************************************************************/
static TBool
i2cStart( void )
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA ) | ( 1 << TWEN );
 2f8:	8c eb       	ldi	r24, 0xBC	; 188
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	24 ea       	ldi	r18, 0xA4	; 164
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
	
	while( !( TWCR & ( 1 << TWINT )));
 302:	00 00       	nop
 304:	8c eb       	ldi	r24, 0xBC	; 188
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	88 23       	and	r24, r24
 30e:	d4 f7       	brge	.-12     	; 0x304 <i2cStart+0x14>
	
	if(( TWSR & TW_STATUS_MASK ) != TW_START )
 310:	89 eb       	ldi	r24, 0xB9	; 185
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	88 2f       	mov	r24, r24
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	88 7f       	andi	r24, 0xF8	; 248
 31e:	99 27       	eor	r25, r25
 320:	08 97       	sbiw	r24, 0x08	; 8
 322:	11 f0       	breq	.+4      	; 0x328 <i2cStart+0x38>
		return EFALSE;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	01 c0       	rjmp	.+2      	; 0x32a <i2cStart+0x3a>
		
	return ETRUE;
 328:	81 e0       	ldi	r24, 0x01	; 1
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <i2cStop>:
Description:
  Stops the TWI (I2C) interface & transmission.
*********************************************************************************************************/
static void
i2cStop( void )
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
	TWCR = ( 1 << TWINT ) | ( 1 << TWSTO ) | ( 1 << TWEN );
 338:	8c eb       	ldi	r24, 0xBC	; 188
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	24 e9       	ldi	r18, 0x94	; 148
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
}
 342:	00 00       	nop
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <i2cSendAddress>:
  - aAddress - The address which should be loaded
*********************************************************************************************************/
static TBool
i2cSendAddress(
	unsigned char aAddress )
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	1f 92       	push	r1
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	89 83       	std	Y+1, r24	; 0x01
	if(( TWSR != TW_START ) | ( TWSR != TW_REP_START ))
 356:	89 eb       	ldi	r24, 0xB9	; 185
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	88 30       	cpi	r24, 0x08	; 8
 362:	09 f4       	brne	.+2      	; 0x366 <i2cSendAddress+0x1c>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	89 eb       	ldi	r24, 0xB9	; 185
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	fc 01       	movw	r30, r24
 36c:	90 81       	ld	r25, Z
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 31       	cpi	r25, 0x10	; 16
 372:	09 f4       	brne	.+2      	; 0x376 <i2cSendAddress+0x2c>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	82 2b       	or	r24, r18
 378:	88 23       	and	r24, r24
 37a:	11 f0       	breq	.+4      	; 0x380 <i2cSendAddress+0x36>
		return EFALSE;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	1e c0       	rjmp	.+60     	; 0x3bc <i2cSendAddress+0x72>
		
	TWDR = aAddress;
 380:	8b eb       	ldi	r24, 0xBB	; 187
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	29 81       	ldd	r18, Y+1	; 0x01
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
 38a:	8c eb       	ldi	r24, 0xBC	; 188
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	24 e8       	ldi	r18, 0x84	; 132
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
	
	while( !( TWCR & ( 1 << TWINT )));
 394:	00 00       	nop
 396:	8c eb       	ldi	r24, 0xBC	; 188
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	88 23       	and	r24, r24
 3a0:	d4 f7       	brge	.-12     	; 0x396 <i2cSendAddress+0x4c>
	
	if(( TWSR & 0xF8 ) != TW_MT_SLA_ACK )
 3a2:	89 eb       	ldi	r24, 0xB9	; 185
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	fc 01       	movw	r30, r24
 3a8:	80 81       	ld	r24, Z
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	88 7f       	andi	r24, 0xF8	; 248
 3b0:	99 27       	eor	r25, r25
 3b2:	48 97       	sbiw	r24, 0x18	; 24
 3b4:	11 f0       	breq	.+4      	; 0x3ba <i2cSendAddress+0x70>
		return EFALSE;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <i2cSendAddress+0x72>
		
	return ETRUE;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
}
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <i2cSendByte>:
  - aByte - The byte which should be sent to the device
*********************************************************************************************************/
static TBool
i2cSendByte(
	unsigned char aByte )
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	1f 92       	push	r1
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	89 83       	std	Y+1, r24	; 0x01
	if(( TWSR != TW_START ) | ( TWSR != TW_REP_START ))
 3d0:	89 eb       	ldi	r24, 0xB9	; 185
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	88 30       	cpi	r24, 0x08	; 8
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <i2cSendByte+0x1c>
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	89 eb       	ldi	r24, 0xB9	; 185
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	fc 01       	movw	r30, r24
 3e6:	90 81       	ld	r25, Z
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 31       	cpi	r25, 0x10	; 16
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <i2cSendByte+0x2c>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	82 2b       	or	r24, r18
 3f2:	88 23       	and	r24, r24
 3f4:	11 f0       	breq	.+4      	; 0x3fa <i2cSendByte+0x36>
		return EFALSE;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	1e c0       	rjmp	.+60     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
	TWDR = aByte;
 3fa:	8b eb       	ldi	r24, 0xBB	; 187
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	29 81       	ldd	r18, Y+1	; 0x01
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN );
 404:	8c eb       	ldi	r24, 0xBC	; 188
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	24 e8       	ldi	r18, 0x84	; 132
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	
	while( !( TWCR & ( 1 << TWINT )));
 40e:	00 00       	nop
 410:	8c eb       	ldi	r24, 0xBC	; 188
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	fc 01       	movw	r30, r24
 416:	80 81       	ld	r24, Z
 418:	88 23       	and	r24, r24
 41a:	d4 f7       	brge	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	
	if(( TWSR & 0xF8 ) != TW_MT_DATA_ACK )
 41c:	89 eb       	ldi	r24, 0xB9	; 185
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	88 7f       	andi	r24, 0xF8	; 248
 42a:	99 27       	eor	r25, r25
 42c:	88 97       	sbiw	r24, 0x28	; 40
 42e:	11 f0       	breq	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		return EFALSE;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	01 c0       	rjmp	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		
	return ETRUE;
 434:	81 e0       	ldi	r24, 0x01	; 1
}
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <i2cReadByte>:
  - aBuffer - The data pointer in which the data should be stored
*********************************************************************************************************/
static TBool
i2cReadByte(
	unsigned char * aBuffer )
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <i2cReadByte+0x6>
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	9a 83       	std	Y+2, r25	; 0x02
 44a:	89 83       	std	Y+1, r24	; 0x01
	TWCR = ( 1 << TWINT ) | ( 1 << TWEN ) | ( 1 << TWEA );
 44c:	8c eb       	ldi	r24, 0xBC	; 188
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	24 ec       	ldi	r18, 0xC4	; 196
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
	
	while( !( TWCR & ( 1 << TWINT )));
 456:	00 00       	nop
 458:	8c eb       	ldi	r24, 0xBC	; 188
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	80 81       	ld	r24, Z
 460:	88 23       	and	r24, r24
 462:	d4 f7       	brge	.-12     	; 0x458 <i2cReadByte+0x1a>
	
	if(( TWSR & 0xF8 ) != TW_MR_DATA_ACK )
 464:	89 eb       	ldi	r24, 0xB9	; 185
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	88 7f       	andi	r24, 0xF8	; 248
 472:	99 27       	eor	r25, r25
 474:	80 35       	cpi	r24, 0x50	; 80
 476:	91 05       	cpc	r25, r1
 478:	11 f0       	breq	.+4      	; 0x47e <i2cReadByte+0x40>
		return EFALSE;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	09 c0       	rjmp	.+18     	; 0x490 <i2cReadByte+0x52>
	
	*aBuffer = TWDR;
 47e:	8b eb       	ldi	r24, 0xBB	; 187
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	fc 01       	movw	r30, r24
 484:	20 81       	ld	r18, Z
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
	
	return ETRUE;
 48e:	81 e0       	ldi	r24, 0x01	; 1
}
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <i2cReadLastByte>:
  - aBuffer - The data pointer in which the data should be stored
*********************************************************************************************************/
static TBool
i2cReadLastByte(
	unsigned char * aBuffer )
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <i2cReadLastByte+0x6>
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	9a 83       	std	Y+2, r25	; 0x02
 4a6:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (( 1 << TWINT ) | ( 1 << TWEN )) & ~( 1 << TWEA );
 4a8:	8c eb       	ldi	r24, 0xBC	; 188
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	24 e8       	ldi	r18, 0x84	; 132
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
	
	while( !( TWCR & ( 1 << TWINT )));
 4b2:	00 00       	nop
 4b4:	8c eb       	ldi	r24, 0xBC	; 188
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	80 81       	ld	r24, Z
 4bc:	88 23       	and	r24, r24
 4be:	d4 f7       	brge	.-12     	; 0x4b4 <i2cReadLastByte+0x1a>
	
	if(( TWSR & 0xF8 ) != TW_MR_DATA_NACK )
 4c0:	89 eb       	ldi	r24, 0xB9	; 185
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	88 7f       	andi	r24, 0xF8	; 248
 4ce:	99 27       	eor	r25, r25
 4d0:	88 35       	cpi	r24, 0x58	; 88
 4d2:	91 05       	cpc	r25, r1
 4d4:	11 f0       	breq	.+4      	; 0x4da <i2cReadLastByte+0x40>
		return EFALSE;
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	09 c0       	rjmp	.+18     	; 0x4ec <i2cReadLastByte+0x52>
	
	*aBuffer = TWDR;
 4da:	8b eb       	ldi	r24, 0xBB	; 187
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	20 81       	ld	r18, Z
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
 4e4:	9a 81       	ldd	r25, Y+2	; 0x02
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
	
	return ETRUE;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <main>:

#define SEND_SIZE	 1
#define RECEIVE_SIZE 5

int main(void)
{
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <main+0x6>
 4fc:	00 d0       	rcall	.+0      	; 0x4fe <main+0x8>
 4fe:	00 d0       	rcall	.+0      	; 0x500 <main+0xa>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
	unsigned char sendBuff[SEND_SIZE] = {1};
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	89 83       	std	Y+1, r24	; 0x01
	unsigned char receiveBuff[RECEIVE_SIZE];
	i2cInit(1000UL, 16000000UL); // Bitrate, ClkFrequency
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	34 e2       	ldi	r19, 0x24	; 36
 50c:	44 ef       	ldi	r20, 0xF4	; 244
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	68 ee       	ldi	r22, 0xE8	; 232
 512:	73 e0       	ldi	r23, 0x03	; 3
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 55 00 	call	0xaa	; 0xaa <i2cInit>
	
	while(1) {
		i2cWrite(0xA0,  sendBuff, SEND_SIZE);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	ce 01       	movw	r24, r28
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	bc 01       	movw	r22, r24
 526:	80 ea       	ldi	r24, 0xA0	; 160
 528:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2cWrite>
		i2cRead(0xA0,  receiveBuff, RECEIVE_SIZE);
 52c:	ce 01       	movw	r24, r28
 52e:	02 96       	adiw	r24, 0x02	; 2
 530:	45 e0       	ldi	r20, 0x05	; 5
 532:	50 e0       	ldi	r21, 0x00	; 0
 534:	bc 01       	movw	r22, r24
 536:	80 ea       	ldi	r24, 0xA0	; 160
 538:	0e 94 1f 01 	call	0x23e	; 0x23e <i2cRead>
	}
 53c:	ef cf       	rjmp	.-34     	; 0x51c <main+0x26>

0000053e <__udivmodsi4>:
 53e:	a1 e2       	ldi	r26, 0x21	; 33
 540:	1a 2e       	mov	r1, r26
 542:	aa 1b       	sub	r26, r26
 544:	bb 1b       	sub	r27, r27
 546:	fd 01       	movw	r30, r26
 548:	0d c0       	rjmp	.+26     	; 0x564 <__udivmodsi4_ep>

0000054a <__udivmodsi4_loop>:
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	ee 1f       	adc	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	a2 17       	cp	r26, r18
 554:	b3 07       	cpc	r27, r19
 556:	e4 07       	cpc	r30, r20
 558:	f5 07       	cpc	r31, r21
 55a:	20 f0       	brcs	.+8      	; 0x564 <__udivmodsi4_ep>
 55c:	a2 1b       	sub	r26, r18
 55e:	b3 0b       	sbc	r27, r19
 560:	e4 0b       	sbc	r30, r20
 562:	f5 0b       	sbc	r31, r21

00000564 <__udivmodsi4_ep>:
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	1a 94       	dec	r1
 56e:	69 f7       	brne	.-38     	; 0x54a <__udivmodsi4_loop>
 570:	60 95       	com	r22
 572:	70 95       	com	r23
 574:	80 95       	com	r24
 576:	90 95       	com	r25
 578:	9b 01       	movw	r18, r22
 57a:	ac 01       	movw	r20, r24
 57c:	bd 01       	movw	r22, r26
 57e:	cf 01       	movw	r24, r30
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
