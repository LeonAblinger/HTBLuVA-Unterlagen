
TimerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001136  000011ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010c  0080010c  000011d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7f  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b8  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000045c  00000000  00000000  00003290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e3  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d5  00000000  00000000  00003ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000048a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_12>
      34:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_15>
      40:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e3       	ldi	r30, 0x36	; 54
      90:	f1 e1       	ldi	r31, 0x11	; 17
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 30       	cpi	r26, 0x0C	; 12
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	ac e0       	ldi	r26, 0x0C	; 12
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 32       	cpi	r26, 0x21	; 33
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
      b2:	0c 94 99 08 	jmp	0x1132	; 0x1132 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
  userData->TimeStamp = aTimeStamp;
  userData->Counter++;
}

int main(void)
{
      ba:	af 92       	push	r10
      bc:	cf 92       	push	r12
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
  /* Replace with your application code */
  
  TimerInit(CPU_CLK, TIMER_INTERVALL, 0, 0, TIMER_MODE_CTC, TIMER_NO_0);
      ce:	a1 2c       	mov	r10, r1
      d0:	cc 24       	eor	r12, r12
      d2:	c3 94       	inc	r12
      d4:	e1 2c       	mov	r14, r1
      d6:	f1 2c       	mov	r15, r1
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	10 e0       	ldi	r17, 0x00	; 0
      dc:	24 ef       	ldi	r18, 0xF4	; 244
      de:	31 e0       	ldi	r19, 0x01	; 1
      e0:	40 e0       	ldi	r20, 0x00	; 0
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	74 e2       	ldi	r23, 0x24	; 36
      e8:	84 ef       	ldi	r24, 0xF4	; 244
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 7e 00 	call	0xfc	; 0xfc <TimerInit>
  DDRA = 0xFF;
      f0:	81 e2       	ldi	r24, 0x21	; 33
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2f ef       	ldi	r18, 0xFF	; 255
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
  
  while(1)
  {}
      fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x40>

000000fc <TimerInit>:
		return EFALSE;
		break;
	}
	
	return ETRUE;
}
      fc:	af 92       	push	r10
      fe:	cf 92       	push	r12
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	2e 97       	sbiw	r28, 0x0e	; 14
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	69 83       	std	Y+1, r22	; 0x01
     11e:	7a 83       	std	Y+2, r23	; 0x02
     120:	8b 83       	std	Y+3, r24	; 0x03
     122:	9c 83       	std	Y+4, r25	; 0x04
     124:	2d 83       	std	Y+5, r18	; 0x05
     126:	3e 83       	std	Y+6, r19	; 0x06
     128:	4f 83       	std	Y+7, r20	; 0x07
     12a:	58 87       	std	Y+8, r21	; 0x08
     12c:	1a 87       	std	Y+10, r17	; 0x0a
     12e:	09 87       	std	Y+9, r16	; 0x09
     130:	fc 86       	std	Y+12, r15	; 0x0c
     132:	eb 86       	std	Y+11, r14	; 0x0b
     134:	cd 86       	std	Y+13, r12	; 0x0d
     136:	ae 86       	std	Y+14, r10	; 0x0e
     138:	89 85       	ldd	r24, Y+9	; 0x09
     13a:	9a 85       	ldd	r25, Y+10	; 0x0a
     13c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <PWMLevelIn+0x1>
     140:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <PWMLevelIn>
     144:	8b 85       	ldd	r24, Y+11	; 0x0b
     146:	9c 85       	ldd	r25, Y+12	; 0x0c
     148:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <PWMLevelOut+0x1>
     14c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <PWMLevelOut>
     150:	8e 85       	ldd	r24, Y+14	; 0x0e
     152:	88 2f       	mov	r24, r24
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	00 97       	sbiw	r24, 0x00	; 0
     158:	19 f0       	breq	.+6      	; 0x160 <TimerInit+0x64>
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	89 f0       	breq	.+34     	; 0x180 <TimerInit+0x84>
     15e:	20 c0       	rjmp	.+64     	; 0x1a0 <TimerInit+0xa4>
     160:	2d 81       	ldd	r18, Y+5	; 0x05
     162:	3e 81       	ldd	r19, Y+6	; 0x06
     164:	4f 81       	ldd	r20, Y+7	; 0x07
     166:	58 85       	ldd	r21, Y+8	; 0x08
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	ab 81       	ldd	r26, Y+3	; 0x03
     16e:	bc 81       	ldd	r27, Y+4	; 0x04
     170:	0d 85       	ldd	r16, Y+13	; 0x0d
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TimerInit0>
     17a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <success>
     17e:	12 c0       	rjmp	.+36     	; 0x1a4 <TimerInit+0xa8>
     180:	2d 81       	ldd	r18, Y+5	; 0x05
     182:	3e 81       	ldd	r19, Y+6	; 0x06
     184:	4f 81       	ldd	r20, Y+7	; 0x07
     186:	58 85       	ldd	r21, Y+8	; 0x08
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	ab 81       	ldd	r26, Y+3	; 0x03
     18e:	bc 81       	ldd	r27, Y+4	; 0x04
     190:	0d 85       	ldd	r16, Y+13	; 0x0d
     192:	bc 01       	movw	r22, r24
     194:	cd 01       	movw	r24, r26
     196:	0e 94 32 02 	call	0x464	; 0x464 <TimerInit1>
     19a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <success>
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <TimerInit+0xa8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <TimerInit+0xac>
     1a4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <success>
     1a8:	2e 96       	adiw	r28, 0x0e	; 14
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	cd bf       	out	0x3d, r28	; 61
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	cf 90       	pop	r12
     1c2:	af 90       	pop	r10
     1c4:	08 95       	ret

000001c6 <TimerInit0>:

************************************************************************************************************************************************/

static TBool
TimerInit0(unsigned long aCpuClk, unsigned long aTimerIntervall, TTimerMode aMode)
{
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	61 97       	sbiw	r28, 0x11	; 17
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	cd bf       	out	0x3d, r28	; 61
     1e2:	69 87       	std	Y+9, r22	; 0x09
     1e4:	7a 87       	std	Y+10, r23	; 0x0a
     1e6:	8b 87       	std	Y+11, r24	; 0x0b
     1e8:	9c 87       	std	Y+12, r25	; 0x0c
     1ea:	2d 87       	std	Y+13, r18	; 0x0d
     1ec:	3e 87       	std	Y+14, r19	; 0x0e
     1ee:	4f 87       	std	Y+15, r20	; 0x0f
     1f0:	58 8b       	std	Y+16, r21	; 0x10
     1f2:	09 8b       	std	Y+17, r16	; 0x11
  unsigned long compareRegister, prescaler;
  
  TimerFunctionTimer0CTC = 0;
     1f4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <TimerFunctionTimer0CTC+0x1>
     1f8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TimerFunctionTimer0CTC>
    
  switch( aMode )
     1fc:	89 89       	ldd	r24, Y+17	; 0x11
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	09 f4       	brne	.+2      	; 0x20a <TimerInit0+0x44>
     208:	3f c0       	rjmp	.+126    	; 0x288 <TimerInit0+0xc2>
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	91 05       	cpc	r25, r1
     20e:	1c f4       	brge	.+6      	; 0x216 <TimerInit0+0x50>
     210:	89 2b       	or	r24, r25
     212:	49 f0       	breq	.+18     	; 0x226 <TimerInit0+0x60>
     214:	17 c1       	rjmp	.+558    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     216:	82 30       	cpi	r24, 0x02	; 2
     218:	91 05       	cpc	r25, r1
     21a:	09 f4       	brne	.+2      	; 0x21e <TimerInit0+0x58>
     21c:	7b c0       	rjmp	.+246    	; 0x314 <TimerInit0+0x14e>
     21e:	03 97       	sbiw	r24, 0x03	; 3
     220:	09 f4       	brne	.+2      	; 0x224 <TimerInit0+0x5e>
     222:	c4 c0       	rjmp	.+392    	; 0x3ac <TimerInit0+0x1e6>
     224:	0f c1       	rjmp	.+542    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
  {
    case TIMER_MODE_NORMAL:
      TimerCalculatePrescalerNormalMode( aCpuClk, aTimerIntervall, &prescaler );
     226:	be 01       	movw	r22, r28
     228:	6b 5f       	subi	r22, 0xFB	; 251
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
     22c:	2d 85       	ldd	r18, Y+13	; 0x0d
     22e:	3e 85       	ldd	r19, Y+14	; 0x0e
     230:	4f 85       	ldd	r20, Y+15	; 0x0f
     232:	58 89       	ldd	r21, Y+16	; 0x10
     234:	89 85       	ldd	r24, Y+9	; 0x09
     236:	9a 85       	ldd	r25, Y+10	; 0x0a
     238:	ab 85       	ldd	r26, Y+11	; 0x0b
     23a:	bc 85       	ldd	r27, Y+12	; 0x0c
     23c:	8b 01       	movw	r16, r22
     23e:	bc 01       	movw	r22, r24
     240:	cd 01       	movw	r24, r26
     242:	0e 94 70 04 	call	0x8e0	; 0x8e0 <TimerCalculatePrescalerNormalMode>
      TCCR0A &= ~(( 1 << WGM00 ) | ( 1 << WGM01 ));
     246:	84 e4       	ldi	r24, 0x44	; 68
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	24 e4       	ldi	r18, 0x44	; 68
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	20 81       	ld	r18, Z
     252:	2c 7f       	andi	r18, 0xFC	; 252
     254:	fc 01       	movw	r30, r24
     256:	20 83       	st	Z, r18
      TCCR0B |= ( prescaler << CS00);
     258:	25 e4       	ldi	r18, 0x45	; 69
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	85 e4       	ldi	r24, 0x45	; 69
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	fc 01       	movw	r30, r24
     262:	40 81       	ld	r20, Z
     264:	8d 81       	ldd	r24, Y+5	; 0x05
     266:	9e 81       	ldd	r25, Y+6	; 0x06
     268:	af 81       	ldd	r26, Y+7	; 0x07
     26a:	b8 85       	ldd	r27, Y+8	; 0x08
     26c:	84 2b       	or	r24, r20
     26e:	f9 01       	movw	r30, r18
     270:	80 83       	st	Z, r24
      TIMSK0 |= ( 1 << TOIE0 );
     272:	8e e6       	ldi	r24, 0x6E	; 110
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	2e e6       	ldi	r18, 0x6E	; 110
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	21 60       	ori	r18, 0x01	; 1
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
      sei();
     284:	78 94       	sei
      break;
     286:	e0 c0       	rjmp	.+448    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
      
    case TIMER_MODE_CTC:
      TimerCalculateCompareRegister( aCpuClk, aTimerIntervall, &compareRegister, &prescaler );
     288:	be 01       	movw	r22, r28
     28a:	6b 5f       	subi	r22, 0xFB	; 251
     28c:	7f 4f       	sbci	r23, 0xFF	; 255
     28e:	2d 85       	ldd	r18, Y+13	; 0x0d
     290:	3e 85       	ldd	r19, Y+14	; 0x0e
     292:	4f 85       	ldd	r20, Y+15	; 0x0f
     294:	58 89       	ldd	r21, Y+16	; 0x10
     296:	89 85       	ldd	r24, Y+9	; 0x09
     298:	9a 85       	ldd	r25, Y+10	; 0x0a
     29a:	ab 85       	ldd	r26, Y+11	; 0x0b
     29c:	bc 85       	ldd	r27, Y+12	; 0x0c
     29e:	7b 01       	movw	r14, r22
     2a0:	be 01       	movw	r22, r28
     2a2:	6f 5f       	subi	r22, 0xFF	; 255
     2a4:	7f 4f       	sbci	r23, 0xFF	; 255
     2a6:	8b 01       	movw	r16, r22
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 0a 03 	call	0x614	; 0x614 <TimerCalculateCompareRegister>
      OCR0A = compareRegister;
     2b0:	27 e4       	ldi	r18, 0x47	; 71
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	9a 81       	ldd	r25, Y+2	; 0x02
     2b8:	ab 81       	ldd	r26, Y+3	; 0x03
     2ba:	bc 81       	ldd	r27, Y+4	; 0x04
     2bc:	f9 01       	movw	r30, r18
     2be:	80 83       	st	Z, r24
      //prescaler = 0x04; // HARDCODE
      TCCR0B |= ( prescaler << CS00 );
     2c0:	25 e4       	ldi	r18, 0x45	; 69
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	85 e4       	ldi	r24, 0x45	; 69
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	40 81       	ld	r20, Z
     2cc:	8d 81       	ldd	r24, Y+5	; 0x05
     2ce:	9e 81       	ldd	r25, Y+6	; 0x06
     2d0:	af 81       	ldd	r26, Y+7	; 0x07
     2d2:	b8 85       	ldd	r27, Y+8	; 0x08
     2d4:	84 2b       	or	r24, r20
     2d6:	f9 01       	movw	r30, r18
     2d8:	80 83       	st	Z, r24
      TCCR0A &= ~(( 1 << WGM00 ) | ( 1 << WGM01 ));
     2da:	84 e4       	ldi	r24, 0x44	; 68
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	24 e4       	ldi	r18, 0x44	; 68
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	f9 01       	movw	r30, r18
     2e4:	20 81       	ld	r18, Z
     2e6:	2c 7f       	andi	r18, 0xFC	; 252
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
      TCCR0A |= ( 1 << WGM01 );
     2ec:	84 e4       	ldi	r24, 0x44	; 68
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	24 e4       	ldi	r18, 0x44	; 68
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	f9 01       	movw	r30, r18
     2f6:	20 81       	ld	r18, Z
     2f8:	22 60       	ori	r18, 0x02	; 2
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
      TIMSK0 |= ( 1 << OCIE0A );
     2fe:	8e e6       	ldi	r24, 0x6E	; 110
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2e e6       	ldi	r18, 0x6E	; 110
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	22 60       	ori	r18, 0x02	; 2
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18
      sei();
     310:	78 94       	sei
      break;
     312:	9a c0       	rjmp	.+308    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
      
    case TIMER_MODE_PWM_FAST:
	  DDRB = 0xFF; // Set PortB as output -> PINB3 for OC0A
     314:	84 e2       	ldi	r24, 0x24	; 36
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
	  TimerCalculatePrescalerNormalMode( aCpuClk, aTimerIntervall, &prescaler );
     31e:	be 01       	movw	r22, r28
     320:	6b 5f       	subi	r22, 0xFB	; 251
     322:	7f 4f       	sbci	r23, 0xFF	; 255
     324:	2d 85       	ldd	r18, Y+13	; 0x0d
     326:	3e 85       	ldd	r19, Y+14	; 0x0e
     328:	4f 85       	ldd	r20, Y+15	; 0x0f
     32a:	58 89       	ldd	r21, Y+16	; 0x10
     32c:	89 85       	ldd	r24, Y+9	; 0x09
     32e:	9a 85       	ldd	r25, Y+10	; 0x0a
     330:	ab 85       	ldd	r26, Y+11	; 0x0b
     332:	bc 85       	ldd	r27, Y+12	; 0x0c
     334:	8b 01       	movw	r16, r22
     336:	bc 01       	movw	r22, r24
     338:	cd 01       	movw	r24, r26
     33a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <TimerCalculatePrescalerNormalMode>
	  TimerSetPwmLevel( TIMER_NO_0, PWMLevelIn );
     33e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <PWMLevelIn>
     342:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <PWMLevelIn+0x1>
     346:	bc 01       	movw	r22, r24
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TimerSetPwmLevel>
	  TCCR0A |= ( 1 << WGM00 ) | ( 1 << WGM01 );
     34e:	84 e4       	ldi	r24, 0x44	; 68
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	24 e4       	ldi	r18, 0x44	; 68
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	23 60       	ori	r18, 0x03	; 3
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
	  TCCR0A = ( 1 << COM0A0 ); // without | to clear error
     360:	84 e4       	ldi	r24, 0x44	; 68
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	20 e4       	ldi	r18, 0x40	; 64
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
      TCCR0B |= ( prescaler << CS00);
     36a:	25 e4       	ldi	r18, 0x45	; 69
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	85 e4       	ldi	r24, 0x45	; 69
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	40 81       	ld	r20, Z
     376:	8d 81       	ldd	r24, Y+5	; 0x05
     378:	9e 81       	ldd	r25, Y+6	; 0x06
     37a:	af 81       	ldd	r26, Y+7	; 0x07
     37c:	b8 85       	ldd	r27, Y+8	; 0x08
     37e:	84 2b       	or	r24, r20
     380:	f9 01       	movw	r30, r18
     382:	80 83       	st	Z, r24
	  TCCR0B |= ( 1 << WGM02 );
     384:	85 e4       	ldi	r24, 0x45	; 69
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	25 e4       	ldi	r18, 0x45	; 69
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	28 60       	ori	r18, 0x08	; 8
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
      TIMSK0 |= ( 1 << TOIE0 );
     396:	8e e6       	ldi	r24, 0x6E	; 110
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2e e6       	ldi	r18, 0x6E	; 110
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	21 60       	ori	r18, 0x01	; 1
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
      sei();
     3a8:	78 94       	sei
	  
      break;
     3aa:	4e c0       	rjmp	.+156    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	  
	  case TIMER_MODE_PWM_CORR:
	  DDRD = 0xFF;
     3ac:	8a e2       	ldi	r24, 0x2A	; 42
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	2f ef       	ldi	r18, 0xFF	; 255
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
	  TimerCalculatePrescalerNormalMode( aCpuClk, aTimerIntervall, &prescaler );
     3b6:	be 01       	movw	r22, r28
     3b8:	6b 5f       	subi	r22, 0xFB	; 251
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255
     3bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     3be:	3e 85       	ldd	r19, Y+14	; 0x0e
     3c0:	4f 85       	ldd	r20, Y+15	; 0x0f
     3c2:	58 89       	ldd	r21, Y+16	; 0x10
     3c4:	89 85       	ldd	r24, Y+9	; 0x09
     3c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c8:	ab 85       	ldd	r26, Y+11	; 0x0b
     3ca:	bc 85       	ldd	r27, Y+12	; 0x0c
     3cc:	8b 01       	movw	r16, r22
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <TimerCalculatePrescalerNormalMode>
	  TimerSetPwmLevel( TIMER_NO_0, PWMLevelIn );
     3d6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <PWMLevelIn>
     3da:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <PWMLevelIn+0x1>
     3de:	bc 01       	movw	r22, r24
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TimerSetPwmLevel>
	  TCCR0A |= ( 1 << WGM00 );
     3e6:	84 e4       	ldi	r24, 0x44	; 68
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	24 e4       	ldi	r18, 0x44	; 68
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	f9 01       	movw	r30, r18
     3f0:	20 81       	ld	r18, Z
     3f2:	21 60       	ori	r18, 0x01	; 1
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
	  TCCR0A =  ( 1 << COM0A1 ) | ( 1 << COM0A0 );
     3f8:	84 e4       	ldi	r24, 0x44	; 68
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	20 ec       	ldi	r18, 0xC0	; 192
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
	  TCCR0B |= ( prescaler << CS00);
     402:	25 e4       	ldi	r18, 0x45	; 69
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	85 e4       	ldi	r24, 0x45	; 69
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	fc 01       	movw	r30, r24
     40c:	40 81       	ld	r20, Z
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	9e 81       	ldd	r25, Y+6	; 0x06
     412:	af 81       	ldd	r26, Y+7	; 0x07
     414:	b8 85       	ldd	r27, Y+8	; 0x08
     416:	84 2b       	or	r24, r20
     418:	f9 01       	movw	r30, r18
     41a:	80 83       	st	Z, r24
	  TCCR0B |= ( 1 << WGM02 );
     41c:	85 e4       	ldi	r24, 0x45	; 69
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	25 e4       	ldi	r18, 0x45	; 69
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	28 60       	ori	r18, 0x08	; 8
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	  TIMSK0 |= ( 1 << TOIE0 );
     42e:	8e e6       	ldi	r24, 0x6E	; 110
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	2e e6       	ldi	r18, 0x6E	; 110
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	21 60       	ori	r18, 0x01	; 1
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	  sei();
     440:	78 94       	sei
	  
	  break;
     442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
      
    default:
      return EFALSE;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
  }
  return EFALSE;
     448:	80 e0       	ldi	r24, 0x00	; 0
}
     44a:	61 96       	adiw	r28, 0x11	; 17
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	08 95       	ret

00000464 <TimerInit1>:

************************************************************************************************************************************************/

static TBool
TimerInit1(unsigned long aCpuClk, unsigned long aTimerIntervall, TTimerMode aMode)
{
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	61 97       	sbiw	r28, 0x11	; 17
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	69 87       	std	Y+9, r22	; 0x09
     482:	7a 87       	std	Y+10, r23	; 0x0a
     484:	8b 87       	std	Y+11, r24	; 0x0b
     486:	9c 87       	std	Y+12, r25	; 0x0c
     488:	2d 87       	std	Y+13, r18	; 0x0d
     48a:	3e 87       	std	Y+14, r19	; 0x0e
     48c:	4f 87       	std	Y+15, r20	; 0x0f
     48e:	58 8b       	std	Y+16, r21	; 0x10
     490:	09 8b       	std	Y+17, r16	; 0x11
	unsigned long compareRegister, prescaler;
	
	  TimerFunctionTimer1CTC = 0;
     492:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <TimerFunctionTimer1CTC+0x1>
     496:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <TimerFunctionTimer1CTC>
	
	switch( aMode )
     49a:	89 89       	ldd	r24, Y+17	; 0x11
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	91 05       	cpc	r25, r1
     4a4:	79 f1       	breq	.+94     	; 0x504 <TimerInit1+0xa0>
     4a6:	84 30       	cpi	r24, 0x04	; 4
     4a8:	91 05       	cpc	r25, r1
     4aa:	09 f4       	brne	.+2      	; 0x4ae <TimerInit1+0x4a>
     4ac:	69 c0       	rjmp	.+210    	; 0x580 <TimerInit1+0x11c>
     4ae:	89 2b       	or	r24, r25
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <TimerInit1+0x50>
     4b2:	a0 c0       	rjmp	.+320    	; 0x5f4 <TimerInit1+0x190>
	{
	  case TIMER_MODE_NORMAL:
	    TimerCalculatePrescalerNormalMode( aCpuClk, aTimerIntervall, &prescaler );
     4b4:	be 01       	movw	r22, r28
     4b6:	6b 5f       	subi	r22, 0xFB	; 251
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	2d 85       	ldd	r18, Y+13	; 0x0d
     4bc:	3e 85       	ldd	r19, Y+14	; 0x0e
     4be:	4f 85       	ldd	r20, Y+15	; 0x0f
     4c0:	58 89       	ldd	r21, Y+16	; 0x10
     4c2:	89 85       	ldd	r24, Y+9	; 0x09
     4c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c6:	ab 85       	ldd	r26, Y+11	; 0x0b
     4c8:	bc 85       	ldd	r27, Y+12	; 0x0c
     4ca:	8b 01       	movw	r16, r22
     4cc:	bc 01       	movw	r22, r24
     4ce:	cd 01       	movw	r24, r26
     4d0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <TimerCalculatePrescalerNormalMode>
		TCCR1B |= ( prescaler << CS10 );
     4d4:	21 e8       	ldi	r18, 0x81	; 129
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	81 e8       	ldi	r24, 0x81	; 129
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	40 81       	ld	r20, Z
     4e0:	8d 81       	ldd	r24, Y+5	; 0x05
     4e2:	9e 81       	ldd	r25, Y+6	; 0x06
     4e4:	af 81       	ldd	r26, Y+7	; 0x07
     4e6:	b8 85       	ldd	r27, Y+8	; 0x08
     4e8:	84 2b       	or	r24, r20
     4ea:	f9 01       	movw	r30, r18
     4ec:	80 83       	st	Z, r24
		TIMSK1 |= ( 1 << TOIE1 );
     4ee:	8f e6       	ldi	r24, 0x6F	; 111
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2f e6       	ldi	r18, 0x6F	; 111
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	21 60       	ori	r18, 0x01	; 1
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
		sei();
     500:	78 94       	sei
		break;
     502:	7a c0       	rjmp	.+244    	; 0x5f8 <TimerInit1+0x194>
		
	  case TIMER_MODE_CTC:
		TimerCalculateCompareRegisterHigh( aCpuClk, aTimerIntervall, &compareRegister, &prescaler );
     504:	be 01       	movw	r22, r28
     506:	6b 5f       	subi	r22, 0xFB	; 251
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	2d 85       	ldd	r18, Y+13	; 0x0d
     50c:	3e 85       	ldd	r19, Y+14	; 0x0e
     50e:	4f 85       	ldd	r20, Y+15	; 0x0f
     510:	58 89       	ldd	r21, Y+16	; 0x10
     512:	89 85       	ldd	r24, Y+9	; 0x09
     514:	9a 85       	ldd	r25, Y+10	; 0x0a
     516:	ab 85       	ldd	r26, Y+11	; 0x0b
     518:	bc 85       	ldd	r27, Y+12	; 0x0c
     51a:	7b 01       	movw	r14, r22
     51c:	be 01       	movw	r22, r28
     51e:	6f 5f       	subi	r22, 0xFF	; 255
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	8b 01       	movw	r16, r22
     524:	bc 01       	movw	r22, r24
     526:	cd 01       	movw	r24, r26
     528:	0e 94 be 03 	call	0x77c	; 0x77c <TimerCalculateCompareRegisterHigh>
		OCR1A = compareRegister;
     52c:	28 e8       	ldi	r18, 0x88	; 136
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	ab 81       	ldd	r26, Y+3	; 0x03
     536:	bc 81       	ldd	r27, Y+4	; 0x04
     538:	f9 01       	movw	r30, r18
     53a:	91 83       	std	Z+1, r25	; 0x01
     53c:	80 83       	st	Z, r24
		TCCR1B |= ( prescaler << CS10 );
     53e:	21 e8       	ldi	r18, 0x81	; 129
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	81 e8       	ldi	r24, 0x81	; 129
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	fc 01       	movw	r30, r24
     548:	40 81       	ld	r20, Z
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	9e 81       	ldd	r25, Y+6	; 0x06
     54e:	af 81       	ldd	r26, Y+7	; 0x07
     550:	b8 85       	ldd	r27, Y+8	; 0x08
     552:	84 2b       	or	r24, r20
     554:	f9 01       	movw	r30, r18
     556:	80 83       	st	Z, r24
		TCCR1B |= ( 1 << WGM12 );
     558:	81 e8       	ldi	r24, 0x81	; 129
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	21 e8       	ldi	r18, 0x81	; 129
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	f9 01       	movw	r30, r18
     562:	20 81       	ld	r18, Z
     564:	28 60       	ori	r18, 0x08	; 8
     566:	fc 01       	movw	r30, r24
     568:	20 83       	st	Z, r18
		TIMSK1 |= ( 1 << OCIE1A );
     56a:	8f e6       	ldi	r24, 0x6F	; 111
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	2f e6       	ldi	r18, 0x6F	; 111
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	f9 01       	movw	r30, r18
     574:	20 81       	ld	r18, Z
     576:	22 60       	ori	r18, 0x02	; 2
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
		sei();
     57c:	78 94       	sei
		break;
     57e:	3c c0       	rjmp	.+120    	; 0x5f8 <TimerInit1+0x194>
		
	  case TIMER_MODE_INPUT_CAPTURE_ICP1:
		DDRD &= ~( 1 << DDD6 );
     580:	8a e2       	ldi	r24, 0x2A	; 42
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2a e2       	ldi	r18, 0x2A	; 42
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	2f 7b       	andi	r18, 0xBF	; 191
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
		TimerCalculatePrescalerNormalMode(aCpuClk, aTimerIntervall, &prescaler);
     592:	be 01       	movw	r22, r28
     594:	6b 5f       	subi	r22, 0xFB	; 251
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	2d 85       	ldd	r18, Y+13	; 0x0d
     59a:	3e 85       	ldd	r19, Y+14	; 0x0e
     59c:	4f 85       	ldd	r20, Y+15	; 0x0f
     59e:	58 89       	ldd	r21, Y+16	; 0x10
     5a0:	89 85       	ldd	r24, Y+9	; 0x09
     5a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a4:	ab 85       	ldd	r26, Y+11	; 0x0b
     5a6:	bc 85       	ldd	r27, Y+12	; 0x0c
     5a8:	8b 01       	movw	r16, r22
     5aa:	bc 01       	movw	r22, r24
     5ac:	cd 01       	movw	r24, r26
     5ae:	0e 94 70 04 	call	0x8e0	; 0x8e0 <TimerCalculatePrescalerNormalMode>
		TCCR1B |= ( prescaler << CS10 );
     5b2:	21 e8       	ldi	r18, 0x81	; 129
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	81 e8       	ldi	r24, 0x81	; 129
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	fc 01       	movw	r30, r24
     5bc:	40 81       	ld	r20, Z
     5be:	8d 81       	ldd	r24, Y+5	; 0x05
     5c0:	9e 81       	ldd	r25, Y+6	; 0x06
     5c2:	af 81       	ldd	r26, Y+7	; 0x07
     5c4:	b8 85       	ldd	r27, Y+8	; 0x08
     5c6:	84 2b       	or	r24, r20
     5c8:	f9 01       	movw	r30, r18
     5ca:	80 83       	st	Z, r24
		TCCR1B |= ( 1 << ICES1 );  //rising edge
     5cc:	81 e8       	ldi	r24, 0x81	; 129
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	21 e8       	ldi	r18, 0x81	; 129
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	20 64       	ori	r18, 0x40	; 64
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
		TIMSK1 |= ( 1 << ICIE1 );
     5de:	8f e6       	ldi	r24, 0x6F	; 111
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	2f e6       	ldi	r18, 0x6F	; 111
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	20 62       	ori	r18, 0x20	; 32
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
		sei();
     5f0:	78 94       	sei
		break;
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <TimerInit1+0x194>
		
		default:
		return EFALSE;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <TimerInit1+0x196>
	}
	return EFALSE;
     5f8:	80 e0       	ldi	r24, 0x00	; 0
}
     5fa:	61 96       	adiw	r28, 0x11	; 17
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <TimerCalculateCompareRegister>:
		- aPrescaler		-   The calculated value of the prescaler

************************************************************************************************************************************************/

void TimerCalculateCompareRegister( unsigned long aCpuClk, unsigned long aTimerIntervall, unsigned long * aCompareRegister, unsigned long * aPrescaler )
{
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	62 97       	sbiw	r28, 0x12	; 18
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	6f 83       	std	Y+7, r22	; 0x07
     63e:	78 87       	std	Y+8, r23	; 0x08
     640:	89 87       	std	Y+9, r24	; 0x09
     642:	9a 87       	std	Y+10, r25	; 0x0a
     644:	2b 87       	std	Y+11, r18	; 0x0b
     646:	3c 87       	std	Y+12, r19	; 0x0c
     648:	4d 87       	std	Y+13, r20	; 0x0d
     64a:	5e 87       	std	Y+14, r21	; 0x0e
     64c:	18 8b       	std	Y+16, r17	; 0x10
     64e:	0f 87       	std	Y+15, r16	; 0x0f
     650:	fa 8a       	std	Y+18, r15	; 0x12
     652:	e9 8a       	std	Y+17, r14	; 0x11
  unsigned long ocra;
  unsigned int prescalerIndex;
  
  for ( prescalerIndex = 0; prescalerIndex < TIMER_MAX_PRESCALER_INDEX; prescalerIndex++ )
     654:	1e 82       	std	Y+6, r1	; 0x06
     656:	1d 82       	std	Y+5, r1	; 0x05
     658:	5f c0       	rjmp	.+190    	; 0x718 <TimerCalculateCompareRegister+0x104>
  {
    ocra = ( aTimerIntervall * ( (double) aCpuClk / TimerPrescalerValues[prescalerIndex] / 1000000.0 )) - 1;
     65a:	6b 85       	ldd	r22, Y+11	; 0x0b
     65c:	7c 85       	ldd	r23, Y+12	; 0x0c
     65e:	8d 85       	ldd	r24, Y+13	; 0x0d
     660:	9e 85       	ldd	r25, Y+14	; 0x0e
     662:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     666:	6b 01       	movw	r12, r22
     668:	7c 01       	movw	r14, r24
     66a:	6f 81       	ldd	r22, Y+7	; 0x07
     66c:	78 85       	ldd	r23, Y+8	; 0x08
     66e:	89 85       	ldd	r24, Y+9	; 0x09
     670:	9a 85       	ldd	r25, Y+10	; 0x0a
     672:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     676:	4b 01       	movw	r8, r22
     678:	5c 01       	movw	r10, r24
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	80 50       	subi	r24, 0x00	; 0
     684:	9f 4f       	sbci	r25, 0xFF	; 255
     686:	fc 01       	movw	r30, r24
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	cc 01       	movw	r24, r24
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	bc 01       	movw	r22, r24
     694:	cd 01       	movw	r24, r26
     696:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	9c 01       	movw	r18, r24
     6a0:	ad 01       	movw	r20, r26
     6a2:	c5 01       	movw	r24, r10
     6a4:	b4 01       	movw	r22, r8
     6a6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	34 e2       	ldi	r19, 0x24	; 36
     6b2:	44 e7       	ldi	r20, 0x74	; 116
     6b4:	59 e4       	ldi	r21, 0x49	; 73
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9c 01       	movw	r18, r24
     6c4:	ad 01       	movw	r20, r26
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	bc 01       	movw	r22, r24
     6dc:	cd 01       	movw	r24, r26
     6de:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__subsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixunssfsi>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	89 83       	std	Y+1, r24	; 0x01
     6f4:	9a 83       	std	Y+2, r25	; 0x02
     6f6:	ab 83       	std	Y+3, r26	; 0x03
     6f8:	bc 83       	std	Y+4, r27	; 0x04
    if ( ocra < 256) break;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	ab 81       	ldd	r26, Y+3	; 0x03
     700:	bc 81       	ldd	r27, Y+4	; 0x04
     702:	8f 3f       	cpi	r24, 0xFF	; 255
     704:	91 05       	cpc	r25, r1
     706:	a1 05       	cpc	r26, r1
     708:	b1 05       	cpc	r27, r1
     70a:	61 f0       	breq	.+24     	; 0x724 <TimerCalculateCompareRegister+0x110>
     70c:	58 f0       	brcs	.+22     	; 0x724 <TimerCalculateCompareRegister+0x110>
void TimerCalculateCompareRegister( unsigned long aCpuClk, unsigned long aTimerIntervall, unsigned long * aCompareRegister, unsigned long * aPrescaler )
{
  unsigned long ocra;
  unsigned int prescalerIndex;
  
  for ( prescalerIndex = 0; prescalerIndex < TIMER_MAX_PRESCALER_INDEX; prescalerIndex++ )
     70e:	8d 81       	ldd	r24, Y+5	; 0x05
     710:	9e 81       	ldd	r25, Y+6	; 0x06
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	9e 83       	std	Y+6, r25	; 0x06
     716:	8d 83       	std	Y+5, r24	; 0x05
     718:	8d 81       	ldd	r24, Y+5	; 0x05
     71a:	9e 81       	ldd	r25, Y+6	; 0x06
     71c:	06 97       	sbiw	r24, 0x06	; 6
     71e:	08 f4       	brcc	.+2      	; 0x722 <TimerCalculateCompareRegister+0x10e>
     720:	9c cf       	rjmp	.-200    	; 0x65a <TimerCalculateCompareRegister+0x46>
     722:	01 c0       	rjmp	.+2      	; 0x726 <TimerCalculateCompareRegister+0x112>
  {
    ocra = ( aTimerIntervall * ( (double) aCpuClk / TimerPrescalerValues[prescalerIndex] / 1000000.0 )) - 1;
    if ( ocra < 256) break;
     724:	00 00       	nop
  }
  
  *aCompareRegister = ocra;
     726:	2f 85       	ldd	r18, Y+15	; 0x0f
     728:	38 89       	ldd	r19, Y+16	; 0x10
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	9a 81       	ldd	r25, Y+2	; 0x02
     72e:	ab 81       	ldd	r26, Y+3	; 0x03
     730:	bc 81       	ldd	r27, Y+4	; 0x04
     732:	f9 01       	movw	r30, r18
     734:	80 83       	st	Z, r24
     736:	91 83       	std	Z+1, r25	; 0x01
     738:	a2 83       	std	Z+2, r26	; 0x02
     73a:	b3 83       	std	Z+3, r27	; 0x03
  *aPrescaler = prescalerIndex;
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	cc 01       	movw	r24, r24
     742:	a0 e0       	ldi	r26, 0x00	; 0
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	29 89       	ldd	r18, Y+17	; 0x11
     748:	3a 89       	ldd	r19, Y+18	; 0x12
     74a:	f9 01       	movw	r30, r18
     74c:	80 83       	st	Z, r24
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	a2 83       	std	Z+2, r26	; 0x02
     752:	b3 83       	std	Z+3, r27	; 0x03
}
     754:	00 00       	nop
     756:	62 96       	adiw	r28, 0x12	; 18
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	08 95       	ret

0000077c <TimerCalculateCompareRegisterHigh>:
		- aPrescaler		-   The calculated value of the prescaler

************************************************************************************************************************************************/

void TimerCalculateCompareRegisterHigh( unsigned long aCpuClk, unsigned long aTimerIntervall, unsigned long * aCompareRegister, unsigned long * aPrescaler )
{
     77c:	8f 92       	push	r8
     77e:	9f 92       	push	r9
     780:	af 92       	push	r10
     782:	bf 92       	push	r11
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	62 97       	sbiw	r28, 0x12	; 18
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	6f 83       	std	Y+7, r22	; 0x07
     7a6:	78 87       	std	Y+8, r23	; 0x08
     7a8:	89 87       	std	Y+9, r24	; 0x09
     7aa:	9a 87       	std	Y+10, r25	; 0x0a
     7ac:	2b 87       	std	Y+11, r18	; 0x0b
     7ae:	3c 87       	std	Y+12, r19	; 0x0c
     7b0:	4d 87       	std	Y+13, r20	; 0x0d
     7b2:	5e 87       	std	Y+14, r21	; 0x0e
     7b4:	18 8b       	std	Y+16, r17	; 0x10
     7b6:	0f 87       	std	Y+15, r16	; 0x0f
     7b8:	fa 8a       	std	Y+18, r15	; 0x12
     7ba:	e9 8a       	std	Y+17, r14	; 0x11
	unsigned long ocra;
	unsigned int prescalerIndex;
	
	for ( prescalerIndex = 0; prescalerIndex < TIMER_MAX_PRESCALER_INDEX; prescalerIndex++ )
     7bc:	1e 82       	std	Y+6, r1	; 0x06
     7be:	1d 82       	std	Y+5, r1	; 0x05
     7c0:	5d c0       	rjmp	.+186    	; 0x87c <TimerCalculateCompareRegisterHigh+0x100>
	{
		ocra = ( aTimerIntervall * ( (double) aCpuClk / TimerPrescalerValues[prescalerIndex] / 1000000.0 )) - 1;
     7c2:	6b 85       	ldd	r22, Y+11	; 0x0b
     7c4:	7c 85       	ldd	r23, Y+12	; 0x0c
     7c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ca:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     7ce:	6b 01       	movw	r12, r22
     7d0:	7c 01       	movw	r14, r24
     7d2:	6f 81       	ldd	r22, Y+7	; 0x07
     7d4:	78 85       	ldd	r23, Y+8	; 0x08
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7da:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	80 50       	subi	r24, 0x00	; 0
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	fc 01       	movw	r30, r24
     7f0:	80 81       	ld	r24, Z
     7f2:	91 81       	ldd	r25, Z+1	; 0x01
     7f4:	cc 01       	movw	r24, r24
     7f6:	a0 e0       	ldi	r26, 0x00	; 0
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	cd 01       	movw	r24, r26
     7fe:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	9c 01       	movw	r18, r24
     808:	ad 01       	movw	r20, r26
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     812:	dc 01       	movw	r26, r24
     814:	cb 01       	movw	r24, r22
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	34 e2       	ldi	r19, 0x24	; 36
     81a:	44 e7       	ldi	r20, 0x74	; 116
     81c:	59 e4       	ldi	r21, 0x49	; 73
     81e:	bc 01       	movw	r22, r24
     820:	cd 01       	movw	r24, r26
     822:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	9c 01       	movw	r18, r24
     82c:	ad 01       	movw	r20, r26
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e8       	ldi	r20, 0x80	; 128
     840:	5f e3       	ldi	r21, 0x3F	; 63
     842:	bc 01       	movw	r22, r24
     844:	cd 01       	movw	r24, r26
     846:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__subsf3>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixunssfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	ab 83       	std	Y+3, r26	; 0x03
     860:	bc 83       	std	Y+4, r27	; 0x04
		if ( ocra < 65536) break;
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	ab 81       	ldd	r26, Y+3	; 0x03
     868:	bc 81       	ldd	r27, Y+4	; 0x04
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	a1 40       	sbci	r26, 0x01	; 1
     86e:	b1 05       	cpc	r27, r1
     870:	58 f0       	brcs	.+22     	; 0x888 <TimerCalculateCompareRegisterHigh+0x10c>
void TimerCalculateCompareRegisterHigh( unsigned long aCpuClk, unsigned long aTimerIntervall, unsigned long * aCompareRegister, unsigned long * aPrescaler )
{
	unsigned long ocra;
	unsigned int prescalerIndex;
	
	for ( prescalerIndex = 0; prescalerIndex < TIMER_MAX_PRESCALER_INDEX; prescalerIndex++ )
     872:	8d 81       	ldd	r24, Y+5	; 0x05
     874:	9e 81       	ldd	r25, Y+6	; 0x06
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	9e 83       	std	Y+6, r25	; 0x06
     87a:	8d 83       	std	Y+5, r24	; 0x05
     87c:	8d 81       	ldd	r24, Y+5	; 0x05
     87e:	9e 81       	ldd	r25, Y+6	; 0x06
     880:	06 97       	sbiw	r24, 0x06	; 6
     882:	08 f4       	brcc	.+2      	; 0x886 <TimerCalculateCompareRegisterHigh+0x10a>
     884:	9e cf       	rjmp	.-196    	; 0x7c2 <TimerCalculateCompareRegisterHigh+0x46>
     886:	01 c0       	rjmp	.+2      	; 0x88a <TimerCalculateCompareRegisterHigh+0x10e>
	{
		ocra = ( aTimerIntervall * ( (double) aCpuClk / TimerPrescalerValues[prescalerIndex] / 1000000.0 )) - 1;
		if ( ocra < 65536) break;
     888:	00 00       	nop
	}
	
	*aCompareRegister = ocra;
     88a:	2f 85       	ldd	r18, Y+15	; 0x0f
     88c:	38 89       	ldd	r19, Y+16	; 0x10
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	ab 81       	ldd	r26, Y+3	; 0x03
     894:	bc 81       	ldd	r27, Y+4	; 0x04
     896:	f9 01       	movw	r30, r18
     898:	80 83       	st	Z, r24
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	a2 83       	std	Z+2, r26	; 0x02
     89e:	b3 83       	std	Z+3, r27	; 0x03
	*aPrescaler = prescalerIndex;
     8a0:	8d 81       	ldd	r24, Y+5	; 0x05
     8a2:	9e 81       	ldd	r25, Y+6	; 0x06
     8a4:	cc 01       	movw	r24, r24
     8a6:	a0 e0       	ldi	r26, 0x00	; 0
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	29 89       	ldd	r18, Y+17	; 0x11
     8ac:	3a 89       	ldd	r19, Y+18	; 0x12
     8ae:	f9 01       	movw	r30, r18
     8b0:	80 83       	st	Z, r24
     8b2:	91 83       	std	Z+1, r25	; 0x01
     8b4:	a2 83       	std	Z+2, r26	; 0x02
     8b6:	b3 83       	std	Z+3, r27	; 0x03
}
     8b8:	00 00       	nop
     8ba:	62 96       	adiw	r28, 0x12	; 18
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	bf 90       	pop	r11
     8d8:	af 90       	pop	r10
     8da:	9f 90       	pop	r9
     8dc:	8f 90       	pop	r8
     8de:	08 95       	ret

000008e0 <TimerCalculatePrescalerNormalMode>:
		- aPrescaler		-   The calculated value of the prescaler

************************************************************************************************************************************************/

static void TimerCalculatePrescalerNormalMode( unsigned long aCpuClk, unsigned long aTimerIntervall, unsigned long * aPrescaler )
{
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	2f 97       	sbiw	r28, 0x0f	; 15
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	6e 83       	std	Y+6, r22	; 0x06
     902:	7f 83       	std	Y+7, r23	; 0x07
     904:	88 87       	std	Y+8, r24	; 0x08
     906:	99 87       	std	Y+9, r25	; 0x09
     908:	2a 87       	std	Y+10, r18	; 0x0a
     90a:	3b 87       	std	Y+11, r19	; 0x0b
     90c:	4c 87       	std	Y+12, r20	; 0x0c
     90e:	5d 87       	std	Y+13, r21	; 0x0d
     910:	1f 87       	std	Y+15, r17	; 0x0f
     912:	0e 87       	std	Y+14, r16	; 0x0e
    float timerIntervall;
    unsigned char prescalerIndex;
    
    for ( prescalerIndex = TIMER_MAX_PRESCALER_INDEX - 1; prescalerIndex > 0; prescalerIndex-- )
     914:	85 e0       	ldi	r24, 0x05	; 5
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	48 c0       	rjmp	.+144    	; 0x9aa <TimerCalculatePrescalerNormalMode+0xca>
    {
        timerIntervall = (256.0 * 1000000.0) / (double)aCpuClk * TimerPrescalerValues[prescalerIndex];
     91a:	6e 81       	ldd	r22, Y+6	; 0x06
     91c:	7f 81       	ldd	r23, Y+7	; 0x07
     91e:	88 85       	ldd	r24, Y+8	; 0x08
     920:	99 85       	ldd	r25, Y+9	; 0x09
     922:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	9c 01       	movw	r18, r24
     92c:	ad 01       	movw	r20, r26
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	74 e2       	ldi	r23, 0x24	; 36
     932:	84 e7       	ldi	r24, 0x74	; 116
     934:	9d e4       	ldi	r25, 0x4D	; 77
     936:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	6c 01       	movw	r12, r24
     940:	7d 01       	movw	r14, r26
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	80 50       	subi	r24, 0x00	; 0
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	cc 01       	movw	r24, r24
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	9c 01       	movw	r18, r24
     96a:	ad 01       	movw	r20, r26
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	0e 94 f9 07 	call	0xff2	; 0xff2 <__mulsf3>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	8a 83       	std	Y+2, r24	; 0x02
     97a:	9b 83       	std	Y+3, r25	; 0x03
     97c:	ac 83       	std	Y+4, r26	; 0x04
     97e:	bd 83       	std	Y+5, r27	; 0x05
        
        if ( timerIntervall < aTimerIntervall ) break;
     980:	6a 85       	ldd	r22, Y+10	; 0x0a
     982:	7b 85       	ldd	r23, Y+11	; 0x0b
     984:	8c 85       	ldd	r24, Y+12	; 0x0c
     986:	9d 85       	ldd	r25, Y+13	; 0x0d
     988:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	2a 81       	ldd	r18, Y+2	; 0x02
     992:	3b 81       	ldd	r19, Y+3	; 0x03
     994:	4c 81       	ldd	r20, Y+4	; 0x04
     996:	5d 81       	ldd	r21, Y+5	; 0x05
     998:	bc 01       	movw	r22, r24
     99a:	cd 01       	movw	r24, r26
     99c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__gesf2>
     9a0:	18 16       	cp	r1, r24
     9a2:	44 f0       	brlt	.+16     	; 0x9b4 <TimerCalculatePrescalerNormalMode+0xd4>
static void TimerCalculatePrescalerNormalMode( unsigned long aCpuClk, unsigned long aTimerIntervall, unsigned long * aPrescaler )
{
    float timerIntervall;
    unsigned char prescalerIndex;
    
    for ( prescalerIndex = TIMER_MAX_PRESCALER_INDEX - 1; prescalerIndex > 0; prescalerIndex-- )
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	81 50       	subi	r24, 0x01	; 1
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	88 23       	and	r24, r24
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <TimerCalculatePrescalerNormalMode+0xd2>
     9b0:	b4 cf       	rjmp	.-152    	; 0x91a <TimerCalculatePrescalerNormalMode+0x3a>
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <TimerCalculatePrescalerNormalMode+0xd6>
    {
        timerIntervall = (256.0 * 1000000.0) / (double)aCpuClk * TimerPrescalerValues[prescalerIndex];
        
        if ( timerIntervall < aTimerIntervall ) break;
     9b4:	00 00       	nop
    }
    
    *aPrescaler = prescalerIndex;
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	2e 85       	ldd	r18, Y+14	; 0x0e
     9c2:	3f 85       	ldd	r19, Y+15	; 0x0f
     9c4:	f9 01       	movw	r30, r18
     9c6:	80 83       	st	Z, r24
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	a2 83       	std	Z+2, r26	; 0x02
     9cc:	b3 83       	std	Z+3, r27	; 0x03
}
     9ce:	00 00       	nop
     9d0:	2f 96       	adiw	r28, 0x0f	; 15
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	08 95       	ret

000009ee <TimerSetPwmLevel>:
		- aPwmLevel	- The value in percent which the signal should be activated

************************************************************************************************************************************************/

TBool TimerSetPwmLevel( TTimerNumber aTimerNo, unsigned int aPwmLevel )
{	
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <TimerSetPwmLevel+0x6>
     9f4:	1f 92       	push	r1
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	7b 83       	std	Y+3, r23	; 0x03
     9fe:	6a 83       	std	Y+2, r22	; 0x02
    switch( aTimerNo )
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	89 2b       	or	r24, r25
     a08:	d9 f4       	brne	.+54     	; 0xa40 <TimerSetPwmLevel+0x52>
    {
    case TIMER_NO_0:
	OCR0A = (255 * aPwmLevel) / 100;
     a0a:	47 e4       	ldi	r20, 0x47	; 71
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	2a 81       	ldd	r18, Y+2	; 0x02
     a10:	3b 81       	ldd	r19, Y+3	; 0x03
     a12:	6f ef       	ldi	r22, 0xFF	; 255
     a14:	62 9f       	mul	r22, r18
     a16:	c0 01       	movw	r24, r0
     a18:	63 9f       	mul	r22, r19
     a1a:	90 0d       	add	r25, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	96 95       	lsr	r25
     a24:	87 95       	ror	r24
     a26:	9c 01       	movw	r18, r24
     a28:	ab e7       	ldi	r26, 0x7B	; 123
     a2a:	b4 e1       	ldi	r27, 0x14	; 20
     a2c:	0e 94 8a 08 	call	0x1114	; 0x1114 <__umulhisi3>
     a30:	96 95       	lsr	r25
     a32:	87 95       	ror	r24
     a34:	fa 01       	movw	r30, r20
     a36:	80 83       	st	Z, r24
      break;
     a38:	00 00       	nop
    default:
      return EFALSE;
      break;    
    }

    return success;
     a3a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <success>
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <TimerSetPwmLevel+0x54>
    case TIMER_NO_0:
	OCR0A = (255 * aPwmLevel) / 100;
      break;
    
    default:
      return EFALSE;
     a40:	80 e0       	ldi	r24, 0x00	; 0
      break;    
    }

    return success;
}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <__vector_18>:

// TIMER 0 Overflow
ISR( TIMER0_OVF_vect )
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	2f 93       	push	r18
     a5c:	3f 93       	push	r19
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
  TimerOverflowCounter++;
     a6e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     a72:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     a7c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
  PORTA += 0x01;
     a80:	82 e2       	ldi	r24, 0x22	; 34
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	22 e2       	ldi	r18, 0x22	; 34
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	2f 5f       	subi	r18, 0xFF	; 255
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
}
     a92:	00 00       	nop
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <__vector_16>:

// TIMER 1 Compare Register A
ISR( TIMER0_COMPA_vect )
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	4f 93       	push	r20
     ac2:	5f 93       	push	r21
     ac4:	6f 93       	push	r22
     ac6:	7f 93       	push	r23
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
  TimerCompareMatchCounter++;
     adc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerCompareMatchCounter>
     ae0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <TimerCompareMatchCounter+0x1>
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <TimerCompareMatchCounter+0x1>
     aea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerCompareMatchCounter>
  PORTA += 0x01;
     aee:	82 e2       	ldi	r24, 0x22	; 34
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	22 e2       	ldi	r18, 0x22	; 34
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	f9 01       	movw	r30, r18
     af8:	20 81       	ld	r18, Z
     afa:	2f 5f       	subi	r18, 0xFF	; 255
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
  if(PORTA >= 127) PORTA = 0x00;
     b00:	82 e2       	ldi	r24, 0x22	; 34
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	8f 37       	cpi	r24, 0x7F	; 127
     b0a:	20 f0       	brcs	.+8      	; 0xb14 <__vector_16+0x64>
     b0c:	82 e2       	ldi	r24, 0x22	; 34
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	10 82       	st	Z, r1
  
  if ( TimerFunctionTimer0CTC != 0 )
     b14:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TimerFunctionTimer0CTC>
     b18:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <TimerFunctionTimer0CTC+0x1>
     b1c:	89 2b       	or	r24, r25
     b1e:	61 f0       	breq	.+24     	; 0xb38 <__vector_16+0x88>
    TimerFunctionTimer0CTC( TimerFunctionTimer0CTCUserData, 0 );
     b20:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <TimerFunctionTimer0CTC>
     b24:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <TimerFunctionTimer0CTC+0x1>
     b28:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <TimerFunctionTimer0CTCUserData>
     b2c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <TimerFunctionTimer0CTCUserData+0x1>
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	09 95       	icall
}
     b38:	00 00       	nop
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	7f 91       	pop	r23
     b4c:	6f 91       	pop	r22
     b4e:	5f 91       	pop	r21
     b50:	4f 91       	pop	r20
     b52:	3f 91       	pop	r19
     b54:	2f 91       	pop	r18
     b56:	0f 90       	pop	r0
     b58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <__vector_15>:

// TIMER 1 Overflow
ISR( TIMER1_OVF_vect )
{
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
  TimerOverflowCounter++;
     b7a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     b7e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     b88:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
     b8c:	00 00       	nop
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	0f 90       	pop	r0
     b98:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_13>:

// TIMER 1 Compare Register A
ISR( TIMER1_COMPA_vect )
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
  TimerCompareMatchCounter++;
     bce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerCompareMatchCounter>
     bd2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <TimerCompareMatchCounter+0x1>
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <TimerCompareMatchCounter+0x1>
     bdc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerCompareMatchCounter>
	
  if ( TimerFunctionTimer1CTC )
     be0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TimerFunctionTimer1CTC>
     be4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <TimerFunctionTimer1CTC+0x1>
     be8:	89 2b       	or	r24, r25
     bea:	61 f0       	breq	.+24     	; 0xc04 <__vector_13+0x62>
    TimerFunctionTimer1CTC( TimerFunctionTimer1CTCUserData, 0 );
     bec:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <TimerFunctionTimer1CTC>
     bf0:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <TimerFunctionTimer1CTC+0x1>
     bf4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <TimerFunctionTimer1CTCUserData>
     bf8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <TimerFunctionTimer1CTCUserData+0x1>
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	f9 01       	movw	r30, r18
     c02:	09 95       	icall
}
     c04:	00 00       	nop
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	ff 91       	pop	r31
     c0c:	ef 91       	pop	r30
     c0e:	bf 91       	pop	r27
     c10:	af 91       	pop	r26
     c12:	9f 91       	pop	r25
     c14:	8f 91       	pop	r24
     c16:	7f 91       	pop	r23
     c18:	6f 91       	pop	r22
     c1a:	5f 91       	pop	r21
     c1c:	4f 91       	pop	r20
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	0f 90       	pop	r0
     c24:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <__vector_12>:

// TIMER 1 Input Capture 1
ISR( TIMER1_CAPT_vect )
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c36:	0f 92       	push	r0
     c38:	11 24       	eor	r1, r1
     c3a:	2f 93       	push	r18
     c3c:	3f 93       	push	r19
     c3e:	4f 93       	push	r20
     c40:	5f 93       	push	r21
     c42:	6f 93       	push	r22
     c44:	7f 93       	push	r23
     c46:	8f 93       	push	r24
     c48:	9f 93       	push	r25
     c4a:	af 93       	push	r26
     c4c:	bf 93       	push	r27
     c4e:	ef 93       	push	r30
     c50:	ff 93       	push	r31
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
  if( TimerFunctionTimer1Capture )
     c5a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <TimerFunctionTimer1Capture>
     c5e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <TimerFunctionTimer1Capture+0x1>
     c62:	89 2b       	or	r24, r25
     c64:	81 f0       	breq	.+32     	; 0xc86 <__vector_12+0x58>
    TimerFunctionTimer1Capture( TimerFunctionTimer1CaptureUserData, ICR1);
     c66:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <TimerFunctionTimer1Capture>
     c6a:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <TimerFunctionTimer1Capture+0x1>
     c6e:	86 e8       	ldi	r24, 0x86	; 134
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	fc 01       	movw	r30, r24
     c74:	40 81       	ld	r20, Z
     c76:	51 81       	ldd	r21, Z+1	; 0x01
     c78:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <TimerFunctionTimer1CaptureUserData>
     c7c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <TimerFunctionTimer1CaptureUserData+0x1>
     c80:	ba 01       	movw	r22, r20
     c82:	f9 01       	movw	r30, r18
     c84:	09 95       	icall
     c86:	00 00       	nop
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	ff 91       	pop	r31
     c8e:	ef 91       	pop	r30
     c90:	bf 91       	pop	r27
     c92:	af 91       	pop	r26
     c94:	9f 91       	pop	r25
     c96:	8f 91       	pop	r24
     c98:	7f 91       	pop	r23
     c9a:	6f 91       	pop	r22
     c9c:	5f 91       	pop	r21
     c9e:	4f 91       	pop	r20
     ca0:	3f 91       	pop	r19
     ca2:	2f 91       	pop	r18
     ca4:	0f 90       	pop	r0
     ca6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__subsf3>:
     cb0:	50 58       	subi	r21, 0x80	; 128

00000cb2 <__addsf3>:
     cb2:	bb 27       	eor	r27, r27
     cb4:	aa 27       	eor	r26, r26
     cb6:	0e 94 70 06 	call	0xce0	; 0xce0 <__addsf3x>
     cba:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_round>
     cbe:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscA>
     cc2:	38 f0       	brcs	.+14     	; 0xcd2 <__addsf3+0x20>
     cc4:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscB>
     cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__addsf3+0x20>
     cca:	39 f4       	brne	.+14     	; 0xcda <__addsf3+0x28>
     ccc:	9f 3f       	cpi	r25, 0xFF	; 255
     cce:	19 f4       	brne	.+6      	; 0xcd6 <__addsf3+0x24>
     cd0:	26 f4       	brtc	.+8      	; 0xcda <__addsf3+0x28>
     cd2:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>
     cd6:	0e f4       	brtc	.+2      	; 0xcda <__addsf3+0x28>
     cd8:	e0 95       	com	r30
     cda:	e7 fb       	bst	r30, 7
     cdc:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>

00000ce0 <__addsf3x>:
     ce0:	e9 2f       	mov	r30, r25
     ce2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_split3>
     ce6:	58 f3       	brcs	.-42     	; 0xcbe <__addsf3+0xc>
     ce8:	ba 17       	cp	r27, r26
     cea:	62 07       	cpc	r22, r18
     cec:	73 07       	cpc	r23, r19
     cee:	84 07       	cpc	r24, r20
     cf0:	95 07       	cpc	r25, r21
     cf2:	20 f0       	brcs	.+8      	; 0xcfc <__addsf3x+0x1c>
     cf4:	79 f4       	brne	.+30     	; 0xd14 <__addsf3x+0x34>
     cf6:	a6 f5       	brtc	.+104    	; 0xd60 <__addsf3x+0x80>
     cf8:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_zero>
     cfc:	0e f4       	brtc	.+2      	; 0xd00 <__addsf3x+0x20>
     cfe:	e0 95       	com	r30
     d00:	0b 2e       	mov	r0, r27
     d02:	ba 2f       	mov	r27, r26
     d04:	a0 2d       	mov	r26, r0
     d06:	0b 01       	movw	r0, r22
     d08:	b9 01       	movw	r22, r18
     d0a:	90 01       	movw	r18, r0
     d0c:	0c 01       	movw	r0, r24
     d0e:	ca 01       	movw	r24, r20
     d10:	a0 01       	movw	r20, r0
     d12:	11 24       	eor	r1, r1
     d14:	ff 27       	eor	r31, r31
     d16:	59 1b       	sub	r21, r25
     d18:	99 f0       	breq	.+38     	; 0xd40 <__addsf3x+0x60>
     d1a:	59 3f       	cpi	r21, 0xF9	; 249
     d1c:	50 f4       	brcc	.+20     	; 0xd32 <__addsf3x+0x52>
     d1e:	50 3e       	cpi	r21, 0xE0	; 224
     d20:	68 f1       	brcs	.+90     	; 0xd7c <__addsf3x+0x9c>
     d22:	1a 16       	cp	r1, r26
     d24:	f0 40       	sbci	r31, 0x00	; 0
     d26:	a2 2f       	mov	r26, r18
     d28:	23 2f       	mov	r18, r19
     d2a:	34 2f       	mov	r19, r20
     d2c:	44 27       	eor	r20, r20
     d2e:	58 5f       	subi	r21, 0xF8	; 248
     d30:	f3 cf       	rjmp	.-26     	; 0xd18 <__addsf3x+0x38>
     d32:	46 95       	lsr	r20
     d34:	37 95       	ror	r19
     d36:	27 95       	ror	r18
     d38:	a7 95       	ror	r26
     d3a:	f0 40       	sbci	r31, 0x00	; 0
     d3c:	53 95       	inc	r21
     d3e:	c9 f7       	brne	.-14     	; 0xd32 <__addsf3x+0x52>
     d40:	7e f4       	brtc	.+30     	; 0xd60 <__addsf3x+0x80>
     d42:	1f 16       	cp	r1, r31
     d44:	ba 0b       	sbc	r27, r26
     d46:	62 0b       	sbc	r22, r18
     d48:	73 0b       	sbc	r23, r19
     d4a:	84 0b       	sbc	r24, r20
     d4c:	ba f0       	brmi	.+46     	; 0xd7c <__addsf3x+0x9c>
     d4e:	91 50       	subi	r25, 0x01	; 1
     d50:	a1 f0       	breq	.+40     	; 0xd7a <__addsf3x+0x9a>
     d52:	ff 0f       	add	r31, r31
     d54:	bb 1f       	adc	r27, r27
     d56:	66 1f       	adc	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	c2 f7       	brpl	.-16     	; 0xd4e <__addsf3x+0x6e>
     d5e:	0e c0       	rjmp	.+28     	; 0xd7c <__addsf3x+0x9c>
     d60:	ba 0f       	add	r27, r26
     d62:	62 1f       	adc	r22, r18
     d64:	73 1f       	adc	r23, r19
     d66:	84 1f       	adc	r24, r20
     d68:	48 f4       	brcc	.+18     	; 0xd7c <__addsf3x+0x9c>
     d6a:	87 95       	ror	r24
     d6c:	77 95       	ror	r23
     d6e:	67 95       	ror	r22
     d70:	b7 95       	ror	r27
     d72:	f7 95       	ror	r31
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	08 f0       	brcs	.+2      	; 0xd7a <__addsf3x+0x9a>
     d78:	b0 cf       	rjmp	.-160    	; 0xcda <__addsf3+0x28>
     d7a:	93 95       	inc	r25
     d7c:	88 0f       	add	r24, r24
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <__addsf3x+0xa2>
     d80:	99 27       	eor	r25, r25
     d82:	ee 0f       	add	r30, r30
     d84:	97 95       	ror	r25
     d86:	87 95       	ror	r24
     d88:	08 95       	ret

00000d8a <__divsf3>:
     d8a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__divsf3x>
     d8e:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_round>
     d92:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscB>
     d96:	58 f0       	brcs	.+22     	; 0xdae <__divsf3+0x24>
     d98:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscA>
     d9c:	40 f0       	brcs	.+16     	; 0xdae <__divsf3+0x24>
     d9e:	29 f4       	brne	.+10     	; 0xdaa <__divsf3+0x20>
     da0:	5f 3f       	cpi	r21, 0xFF	; 255
     da2:	29 f0       	breq	.+10     	; 0xdae <__divsf3+0x24>
     da4:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
     da8:	51 11       	cpse	r21, r1
     daa:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_szero>
     dae:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>

00000db2 <__divsf3x>:
     db2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_split3>
     db6:	68 f3       	brcs	.-38     	; 0xd92 <__divsf3+0x8>

00000db8 <__divsf3_pse>:
     db8:	99 23       	and	r25, r25
     dba:	b1 f3       	breq	.-20     	; 0xda8 <__divsf3+0x1e>
     dbc:	55 23       	and	r21, r21
     dbe:	91 f3       	breq	.-28     	; 0xda4 <__divsf3+0x1a>
     dc0:	95 1b       	sub	r25, r21
     dc2:	55 0b       	sbc	r21, r21
     dc4:	bb 27       	eor	r27, r27
     dc6:	aa 27       	eor	r26, r26
     dc8:	62 17       	cp	r22, r18
     dca:	73 07       	cpc	r23, r19
     dcc:	84 07       	cpc	r24, r20
     dce:	38 f0       	brcs	.+14     	; 0xdde <__divsf3_pse+0x26>
     dd0:	9f 5f       	subi	r25, 0xFF	; 255
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	44 1f       	adc	r20, r20
     dda:	aa 1f       	adc	r26, r26
     ddc:	a9 f3       	breq	.-22     	; 0xdc8 <__divsf3_pse+0x10>
     dde:	35 d0       	rcall	.+106    	; 0xe4a <__divsf3_pse+0x92>
     de0:	0e 2e       	mov	r0, r30
     de2:	3a f0       	brmi	.+14     	; 0xdf2 <__divsf3_pse+0x3a>
     de4:	e0 e8       	ldi	r30, 0x80	; 128
     de6:	32 d0       	rcall	.+100    	; 0xe4c <__divsf3_pse+0x94>
     de8:	91 50       	subi	r25, 0x01	; 1
     dea:	50 40       	sbci	r21, 0x00	; 0
     dec:	e6 95       	lsr	r30
     dee:	00 1c       	adc	r0, r0
     df0:	ca f7       	brpl	.-14     	; 0xde4 <__divsf3_pse+0x2c>
     df2:	2b d0       	rcall	.+86     	; 0xe4a <__divsf3_pse+0x92>
     df4:	fe 2f       	mov	r31, r30
     df6:	29 d0       	rcall	.+82     	; 0xe4a <__divsf3_pse+0x92>
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	88 1f       	adc	r24, r24
     dfe:	bb 1f       	adc	r27, r27
     e00:	26 17       	cp	r18, r22
     e02:	37 07       	cpc	r19, r23
     e04:	48 07       	cpc	r20, r24
     e06:	ab 07       	cpc	r26, r27
     e08:	b0 e8       	ldi	r27, 0x80	; 128
     e0a:	09 f0       	breq	.+2      	; 0xe0e <__divsf3_pse+0x56>
     e0c:	bb 0b       	sbc	r27, r27
     e0e:	80 2d       	mov	r24, r0
     e10:	bf 01       	movw	r22, r30
     e12:	ff 27       	eor	r31, r31
     e14:	93 58       	subi	r25, 0x83	; 131
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
     e18:	3a f0       	brmi	.+14     	; 0xe28 <__divsf3_pse+0x70>
     e1a:	9e 3f       	cpi	r25, 0xFE	; 254
     e1c:	51 05       	cpc	r21, r1
     e1e:	78 f0       	brcs	.+30     	; 0xe3e <__divsf3_pse+0x86>
     e20:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
     e24:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_szero>
     e28:	5f 3f       	cpi	r21, 0xFF	; 255
     e2a:	e4 f3       	brlt	.-8      	; 0xe24 <__divsf3_pse+0x6c>
     e2c:	98 3e       	cpi	r25, 0xE8	; 232
     e2e:	d4 f3       	brlt	.-12     	; 0xe24 <__divsf3_pse+0x6c>
     e30:	86 95       	lsr	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f7 95       	ror	r31
     e3a:	9f 5f       	subi	r25, 0xFF	; 255
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <__divsf3_pse+0x78>
     e3e:	88 0f       	add	r24, r24
     e40:	91 1d       	adc	r25, r1
     e42:	96 95       	lsr	r25
     e44:	87 95       	ror	r24
     e46:	97 f9       	bld	r25, 7
     e48:	08 95       	ret
     e4a:	e1 e0       	ldi	r30, 0x01	; 1
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	bb 1f       	adc	r27, r27
     e54:	62 17       	cp	r22, r18
     e56:	73 07       	cpc	r23, r19
     e58:	84 07       	cpc	r24, r20
     e5a:	ba 07       	cpc	r27, r26
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <__divsf3_pse+0xae>
     e5e:	62 1b       	sub	r22, r18
     e60:	73 0b       	sbc	r23, r19
     e62:	84 0b       	sbc	r24, r20
     e64:	ba 0b       	sbc	r27, r26
     e66:	ee 1f       	adc	r30, r30
     e68:	88 f7       	brcc	.-30     	; 0xe4c <__divsf3_pse+0x94>
     e6a:	e0 95       	com	r30
     e6c:	08 95       	ret

00000e6e <__fixunssfsi>:
     e6e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_splitA>
     e72:	88 f0       	brcs	.+34     	; 0xe96 <__fixunssfsi+0x28>
     e74:	9f 57       	subi	r25, 0x7F	; 127
     e76:	98 f0       	brcs	.+38     	; 0xe9e <__fixunssfsi+0x30>
     e78:	b9 2f       	mov	r27, r25
     e7a:	99 27       	eor	r25, r25
     e7c:	b7 51       	subi	r27, 0x17	; 23
     e7e:	b0 f0       	brcs	.+44     	; 0xeac <__fixunssfsi+0x3e>
     e80:	e1 f0       	breq	.+56     	; 0xeba <__fixunssfsi+0x4c>
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	1a f0       	brmi	.+6      	; 0xe92 <__fixunssfsi+0x24>
     e8c:	ba 95       	dec	r27
     e8e:	c9 f7       	brne	.-14     	; 0xe82 <__fixunssfsi+0x14>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <__fixunssfsi+0x4c>
     e92:	b1 30       	cpi	r27, 0x01	; 1
     e94:	91 f0       	breq	.+36     	; 0xeba <__fixunssfsi+0x4c>
     e96:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_zero>
     e9a:	b1 e0       	ldi	r27, 0x01	; 1
     e9c:	08 95       	ret
     e9e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_zero>
     ea2:	67 2f       	mov	r22, r23
     ea4:	78 2f       	mov	r23, r24
     ea6:	88 27       	eor	r24, r24
     ea8:	b8 5f       	subi	r27, 0xF8	; 248
     eaa:	39 f0       	breq	.+14     	; 0xeba <__fixunssfsi+0x4c>
     eac:	b9 3f       	cpi	r27, 0xF9	; 249
     eae:	cc f3       	brlt	.-14     	; 0xea2 <__fixunssfsi+0x34>
     eb0:	86 95       	lsr	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b3 95       	inc	r27
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <__fixunssfsi+0x42>
     eba:	3e f4       	brtc	.+14     	; 0xeca <__fixunssfsi+0x5c>
     ebc:	90 95       	com	r25
     ebe:	80 95       	com	r24
     ec0:	70 95       	com	r23
     ec2:	61 95       	neg	r22
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	08 95       	ret

00000ecc <__floatunsisf>:
     ecc:	e8 94       	clt
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <__floatsisf+0x12>

00000ed0 <__floatsisf>:
     ed0:	97 fb       	bst	r25, 7
     ed2:	3e f4       	brtc	.+14     	; 0xee2 <__floatsisf+0x12>
     ed4:	90 95       	com	r25
     ed6:	80 95       	com	r24
     ed8:	70 95       	com	r23
     eda:	61 95       	neg	r22
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	99 23       	and	r25, r25
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <__floatsisf+0x40>
     ee6:	f9 2f       	mov	r31, r25
     ee8:	96 e9       	ldi	r25, 0x96	; 150
     eea:	bb 27       	eor	r27, r27
     eec:	93 95       	inc	r25
     eee:	f6 95       	lsr	r31
     ef0:	87 95       	ror	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b7 95       	ror	r27
     ef8:	f1 11       	cpse	r31, r1
     efa:	f8 cf       	rjmp	.-16     	; 0xeec <__floatsisf+0x1c>
     efc:	fa f4       	brpl	.+62     	; 0xf3c <__floatsisf+0x6c>
     efe:	bb 0f       	add	r27, r27
     f00:	11 f4       	brne	.+4      	; 0xf06 <__floatsisf+0x36>
     f02:	60 ff       	sbrs	r22, 0
     f04:	1b c0       	rjmp	.+54     	; 0xf3c <__floatsisf+0x6c>
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <__floatsisf+0x6c>
     f10:	88 23       	and	r24, r24
     f12:	11 f0       	breq	.+4      	; 0xf18 <__floatsisf+0x48>
     f14:	96 e9       	ldi	r25, 0x96	; 150
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <__floatsisf+0x6a>
     f18:	77 23       	and	r23, r23
     f1a:	21 f0       	breq	.+8      	; 0xf24 <__floatsisf+0x54>
     f1c:	9e e8       	ldi	r25, 0x8E	; 142
     f1e:	87 2f       	mov	r24, r23
     f20:	76 2f       	mov	r23, r22
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <__floatsisf+0x5e>
     f24:	66 23       	and	r22, r22
     f26:	71 f0       	breq	.+28     	; 0xf44 <__floatsisf+0x74>
     f28:	96 e8       	ldi	r25, 0x86	; 134
     f2a:	86 2f       	mov	r24, r22
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	2a f0       	brmi	.+10     	; 0xf3c <__floatsisf+0x6c>
     f32:	9a 95       	dec	r25
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	da f7       	brpl	.-10     	; 0xf32 <__floatsisf+0x62>
     f3c:	88 0f       	add	r24, r24
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	97 f9       	bld	r25, 7
     f44:	08 95       	ret

00000f46 <__fp_inf>:
     f46:	97 f9       	bld	r25, 7
     f48:	9f 67       	ori	r25, 0x7F	; 127
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	08 95       	ret

00000f52 <__fp_nan>:
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	80 ec       	ldi	r24, 0xC0	; 192
     f56:	08 95       	ret

00000f58 <__fp_pscA>:
     f58:	00 24       	eor	r0, r0
     f5a:	0a 94       	dec	r0
     f5c:	16 16       	cp	r1, r22
     f5e:	17 06       	cpc	r1, r23
     f60:	18 06       	cpc	r1, r24
     f62:	09 06       	cpc	r0, r25
     f64:	08 95       	ret

00000f66 <__fp_pscB>:
     f66:	00 24       	eor	r0, r0
     f68:	0a 94       	dec	r0
     f6a:	12 16       	cp	r1, r18
     f6c:	13 06       	cpc	r1, r19
     f6e:	14 06       	cpc	r1, r20
     f70:	05 06       	cpc	r0, r21
     f72:	08 95       	ret

00000f74 <__fp_round>:
     f74:	09 2e       	mov	r0, r25
     f76:	03 94       	inc	r0
     f78:	00 0c       	add	r0, r0
     f7a:	11 f4       	brne	.+4      	; 0xf80 <__fp_round+0xc>
     f7c:	88 23       	and	r24, r24
     f7e:	52 f0       	brmi	.+20     	; 0xf94 <__fp_round+0x20>
     f80:	bb 0f       	add	r27, r27
     f82:	40 f4       	brcc	.+16     	; 0xf94 <__fp_round+0x20>
     f84:	bf 2b       	or	r27, r31
     f86:	11 f4       	brne	.+4      	; 0xf8c <__fp_round+0x18>
     f88:	60 ff       	sbrs	r22, 0
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <__fp_round+0x20>
     f8c:	6f 5f       	subi	r22, 0xFF	; 255
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	08 95       	ret

00000f96 <__fp_split3>:
     f96:	57 fd       	sbrc	r21, 7
     f98:	90 58       	subi	r25, 0x80	; 128
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	59 f0       	breq	.+22     	; 0xfb6 <__fp_splitA+0x10>
     fa0:	5f 3f       	cpi	r21, 0xFF	; 255
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <__fp_splitA+0x1a>
     fa4:	47 95       	ror	r20

00000fa6 <__fp_splitA>:
     fa6:	88 0f       	add	r24, r24
     fa8:	97 fb       	bst	r25, 7
     faa:	99 1f       	adc	r25, r25
     fac:	61 f0       	breq	.+24     	; 0xfc6 <__fp_splitA+0x20>
     fae:	9f 3f       	cpi	r25, 0xFF	; 255
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <__fp_splitA+0x2a>
     fb2:	87 95       	ror	r24
     fb4:	08 95       	ret
     fb6:	12 16       	cp	r1, r18
     fb8:	13 06       	cpc	r1, r19
     fba:	14 06       	cpc	r1, r20
     fbc:	55 1f       	adc	r21, r21
     fbe:	f2 cf       	rjmp	.-28     	; 0xfa4 <__fp_split3+0xe>
     fc0:	46 95       	lsr	r20
     fc2:	f1 df       	rcall	.-30     	; 0xfa6 <__fp_splitA>
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <__fp_splitA+0x30>
     fc6:	16 16       	cp	r1, r22
     fc8:	17 06       	cpc	r1, r23
     fca:	18 06       	cpc	r1, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	f1 cf       	rjmp	.-30     	; 0xfb2 <__fp_splitA+0xc>
     fd0:	86 95       	lsr	r24
     fd2:	71 05       	cpc	r23, r1
     fd4:	61 05       	cpc	r22, r1
     fd6:	08 94       	sec
     fd8:	08 95       	ret

00000fda <__fp_zero>:
     fda:	e8 94       	clt

00000fdc <__fp_szero>:
     fdc:	bb 27       	eor	r27, r27
     fde:	66 27       	eor	r22, r22
     fe0:	77 27       	eor	r23, r23
     fe2:	cb 01       	movw	r24, r22
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <__gesf2>:
     fe8:	0e 94 66 08 	call	0x10cc	; 0x10cc <__fp_cmp>
     fec:	08 f4       	brcc	.+2      	; 0xff0 <__gesf2+0x8>
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__mulsf3>:
     ff2:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3x>
     ff6:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__fp_round>
     ffa:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscA>
     ffe:	38 f0       	brcs	.+14     	; 0x100e <__mulsf3+0x1c>
    1000:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscB>
    1004:	20 f0       	brcs	.+8      	; 0x100e <__mulsf3+0x1c>
    1006:	95 23       	and	r25, r21
    1008:	11 f0       	breq	.+4      	; 0x100e <__mulsf3+0x1c>
    100a:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
    100e:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>
    1012:	11 24       	eor	r1, r1
    1014:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_szero>

00001018 <__mulsf3x>:
    1018:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_split3>
    101c:	70 f3       	brcs	.-36     	; 0xffa <__mulsf3+0x8>

0000101e <__mulsf3_pse>:
    101e:	95 9f       	mul	r25, r21
    1020:	c1 f3       	breq	.-16     	; 0x1012 <__mulsf3+0x20>
    1022:	95 0f       	add	r25, r21
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	55 1f       	adc	r21, r21
    1028:	62 9f       	mul	r22, r18
    102a:	f0 01       	movw	r30, r0
    102c:	72 9f       	mul	r23, r18
    102e:	bb 27       	eor	r27, r27
    1030:	f0 0d       	add	r31, r0
    1032:	b1 1d       	adc	r27, r1
    1034:	63 9f       	mul	r22, r19
    1036:	aa 27       	eor	r26, r26
    1038:	f0 0d       	add	r31, r0
    103a:	b1 1d       	adc	r27, r1
    103c:	aa 1f       	adc	r26, r26
    103e:	64 9f       	mul	r22, r20
    1040:	66 27       	eor	r22, r22
    1042:	b0 0d       	add	r27, r0
    1044:	a1 1d       	adc	r26, r1
    1046:	66 1f       	adc	r22, r22
    1048:	82 9f       	mul	r24, r18
    104a:	22 27       	eor	r18, r18
    104c:	b0 0d       	add	r27, r0
    104e:	a1 1d       	adc	r26, r1
    1050:	62 1f       	adc	r22, r18
    1052:	73 9f       	mul	r23, r19
    1054:	b0 0d       	add	r27, r0
    1056:	a1 1d       	adc	r26, r1
    1058:	62 1f       	adc	r22, r18
    105a:	83 9f       	mul	r24, r19
    105c:	a0 0d       	add	r26, r0
    105e:	61 1d       	adc	r22, r1
    1060:	22 1f       	adc	r18, r18
    1062:	74 9f       	mul	r23, r20
    1064:	33 27       	eor	r19, r19
    1066:	a0 0d       	add	r26, r0
    1068:	61 1d       	adc	r22, r1
    106a:	23 1f       	adc	r18, r19
    106c:	84 9f       	mul	r24, r20
    106e:	60 0d       	add	r22, r0
    1070:	21 1d       	adc	r18, r1
    1072:	82 2f       	mov	r24, r18
    1074:	76 2f       	mov	r23, r22
    1076:	6a 2f       	mov	r22, r26
    1078:	11 24       	eor	r1, r1
    107a:	9f 57       	subi	r25, 0x7F	; 127
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	9a f0       	brmi	.+38     	; 0x10a6 <__mulsf3_pse+0x88>
    1080:	f1 f0       	breq	.+60     	; 0x10be <__mulsf3_pse+0xa0>
    1082:	88 23       	and	r24, r24
    1084:	4a f0       	brmi	.+18     	; 0x1098 <__mulsf3_pse+0x7a>
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	bb 1f       	adc	r27, r27
    108c:	66 1f       	adc	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	50 40       	sbci	r21, 0x00	; 0
    1096:	a9 f7       	brne	.-22     	; 0x1082 <__mulsf3_pse+0x64>
    1098:	9e 3f       	cpi	r25, 0xFE	; 254
    109a:	51 05       	cpc	r21, r1
    109c:	80 f0       	brcs	.+32     	; 0x10be <__mulsf3_pse+0xa0>
    109e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
    10a2:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__fp_szero>
    10a6:	5f 3f       	cpi	r21, 0xFF	; 255
    10a8:	e4 f3       	brlt	.-8      	; 0x10a2 <__mulsf3_pse+0x84>
    10aa:	98 3e       	cpi	r25, 0xE8	; 232
    10ac:	d4 f3       	brlt	.-12     	; 0x10a2 <__mulsf3_pse+0x84>
    10ae:	86 95       	lsr	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	e7 95       	ror	r30
    10ba:	9f 5f       	subi	r25, 0xFF	; 255
    10bc:	c1 f7       	brne	.-16     	; 0x10ae <__mulsf3_pse+0x90>
    10be:	fe 2b       	or	r31, r30
    10c0:	88 0f       	add	r24, r24
    10c2:	91 1d       	adc	r25, r1
    10c4:	96 95       	lsr	r25
    10c6:	87 95       	ror	r24
    10c8:	97 f9       	bld	r25, 7
    10ca:	08 95       	ret

000010cc <__fp_cmp>:
    10cc:	99 0f       	add	r25, r25
    10ce:	00 08       	sbc	r0, r0
    10d0:	55 0f       	add	r21, r21
    10d2:	aa 0b       	sbc	r26, r26
    10d4:	e0 e8       	ldi	r30, 0x80	; 128
    10d6:	fe ef       	ldi	r31, 0xFE	; 254
    10d8:	16 16       	cp	r1, r22
    10da:	17 06       	cpc	r1, r23
    10dc:	e8 07       	cpc	r30, r24
    10de:	f9 07       	cpc	r31, r25
    10e0:	c0 f0       	brcs	.+48     	; 0x1112 <__stack+0x13>
    10e2:	12 16       	cp	r1, r18
    10e4:	13 06       	cpc	r1, r19
    10e6:	e4 07       	cpc	r30, r20
    10e8:	f5 07       	cpc	r31, r21
    10ea:	98 f0       	brcs	.+38     	; 0x1112 <__stack+0x13>
    10ec:	62 1b       	sub	r22, r18
    10ee:	73 0b       	sbc	r23, r19
    10f0:	84 0b       	sbc	r24, r20
    10f2:	95 0b       	sbc	r25, r21
    10f4:	39 f4       	brne	.+14     	; 0x1104 <__stack+0x5>
    10f6:	0a 26       	eor	r0, r26
    10f8:	61 f0       	breq	.+24     	; 0x1112 <__stack+0x13>
    10fa:	23 2b       	or	r18, r19
    10fc:	24 2b       	or	r18, r20
    10fe:	25 2b       	or	r18, r21
    1100:	21 f4       	brne	.+8      	; 0x110a <__stack+0xb>
    1102:	08 95       	ret
    1104:	0a 26       	eor	r0, r26
    1106:	09 f4       	brne	.+2      	; 0x110a <__stack+0xb>
    1108:	a1 40       	sbci	r26, 0x01	; 1
    110a:	a6 95       	lsr	r26
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	81 1d       	adc	r24, r1
    1110:	81 1d       	adc	r24, r1
    1112:	08 95       	ret

00001114 <__umulhisi3>:
    1114:	a2 9f       	mul	r26, r18
    1116:	b0 01       	movw	r22, r0
    1118:	b3 9f       	mul	r27, r19
    111a:	c0 01       	movw	r24, r0
    111c:	a3 9f       	mul	r26, r19
    111e:	70 0d       	add	r23, r0
    1120:	81 1d       	adc	r24, r1
    1122:	11 24       	eor	r1, r1
    1124:	91 1d       	adc	r25, r1
    1126:	b2 9f       	mul	r27, r18
    1128:	70 0d       	add	r23, r0
    112a:	81 1d       	adc	r24, r1
    112c:	11 24       	eor	r1, r1
    112e:	91 1d       	adc	r25, r1
    1130:	08 95       	ret

00001132 <_exit>:
    1132:	f8 94       	cli

00001134 <__stop_program>:
    1134:	ff cf       	rjmp	.-2      	; 0x1134 <__stop_program>
