
TestRS232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000ea4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f95  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3d  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085f  00000000  00000000  000029ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00003250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000746  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000913  00000000  00000000  00003dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000046ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 bc 04 	jmp	0x978	; 0x978 <__vector_20>
  54:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__vector_28>
  74:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_29>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e0       	ldi	r30, 0x00	; 0
  90:	fe e0       	ldi	r31, 0x0E	; 14
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 31       	cpi	r26, 0x10	; 16
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e1       	ldi	r26, 0x10	; 16
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a8 31       	cpi	r26, 0x18	; 24
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2e 05 	call	0xa5c	; 0xa5c <main>
  b2:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <delayMs>:
#include <util/delay.h>
#endif

void
delayMs( unsigned int aDelayMs )
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	28 97       	sbiw	r28, 0x08	; 8
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	98 87       	std	Y+8, r25	; 0x08
  d0:	8f 83       	std	Y+7, r24	; 0x07
	#ifdef DEBUG
		volatile unsigned long counter;
		volatile unsigned int help;
		for ( counter = 0; counter < aDelayMs * 150UL; counter++)
  d2:	19 82       	std	Y+1, r1	; 0x01
  d4:	1a 82       	std	Y+2, r1	; 0x02
  d6:	1b 82       	std	Y+3, r1	; 0x03
  d8:	1c 82       	std	Y+4, r1	; 0x04
  da:	10 c0       	rjmp	.+32     	; 0xfc <delayMs+0x42>
		help++;
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	9e 83       	std	Y+6, r25	; 0x06
  e4:	8d 83       	std	Y+5, r24	; 0x05
delayMs( unsigned int aDelayMs )
{
	#ifdef DEBUG
		volatile unsigned long counter;
		volatile unsigned int help;
		for ( counter = 0; counter < aDelayMs * 150UL; counter++)
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	ab 81       	ldd	r26, Y+3	; 0x03
  ec:	bc 81       	ldd	r27, Y+4	; 0x04
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	9a 83       	std	Y+2, r25	; 0x02
  f8:	ab 83       	std	Y+3, r26	; 0x03
  fa:	bc 83       	std	Y+4, r27	; 0x04
  fc:	8f 81       	ldd	r24, Y+7	; 0x07
  fe:	98 85       	ldd	r25, Y+8	; 0x08
 100:	9c 01       	movw	r18, r24
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	86 e9       	ldi	r24, 0x96	; 150
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	dc 01       	movw	r26, r24
 10c:	0e 94 a0 05 	call	0xb40	; 0xb40 <__muluhisi3>
 110:	9b 01       	movw	r18, r22
 112:	ac 01       	movw	r20, r24
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	ab 81       	ldd	r26, Y+3	; 0x03
 11a:	bc 81       	ldd	r27, Y+4	; 0x04
 11c:	82 17       	cp	r24, r18
 11e:	93 07       	cpc	r25, r19
 120:	a4 07       	cpc	r26, r20
 122:	b5 07       	cpc	r27, r21
 124:	d8 f2       	brcs	.-74     	; 0xdc <delayMs+0x22>
		help++;
	#else
		_delay_ms( aDelayMs );
	#endif
}
 126:	00 00       	nop
 128:	28 96       	adiw	r28, 0x08	; 8
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <RingBufferCreate>:
	unsigned char writeIndex;	// Index of the write position
	unsigned char* buffer;	// Buffer for data content
	unsigned char size;		// Size of the buffer
};

TRingBuffer RingBufferCreate(unsigned char aSize) {
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <RingBufferCreate+0x6>
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	8b 83       	std	Y+3, r24	; 0x03
	TRingBuffer ringBuffer;

	/* Allocate memory and set the content to 0 */
	ringBuffer = calloc( 1, sizeof(struct RingBufferStruct) );
 148:	65 e0       	ldi	r22, 0x05	; 5
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 ba 05 	call	0xb74	; 0xb74 <calloc>
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01

	if (!ringBuffer)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	9a 81       	ldd	r25, Y+2	; 0x02
 15c:	89 2b       	or	r24, r25
 15e:	19 f4       	brne	.+6      	; 0x166 <RingBufferCreate+0x2c>
		return NULL;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <RingBufferCreate+0x6c>
	
	ringBuffer->buffer = malloc( aSize );
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 d6 05 	call	0xbac	; 0xbac <malloc>
 170:	9c 01       	movw	r18, r24
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	fc 01       	movw	r30, r24
 178:	33 83       	std	Z+3, r19	; 0x03
 17a:	22 83       	std	Z+2, r18	; 0x02
	if ( !ringBuffer->buffer ) {
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	fc 01       	movw	r30, r24
 182:	82 81       	ldd	r24, Z+2	; 0x02
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	89 2b       	or	r24, r25
 188:	39 f4       	brne	.+14     	; 0x198 <RingBufferCreate+0x5e>
		RingBufferDestroy(ringBuffer);
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <RingBufferDestroy>
		return NULL;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <RingBufferCreate+0x6c>
	}
	
	ringBuffer->size = aSize;
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	2b 81       	ldd	r18, Y+3	; 0x03
 19e:	fc 01       	movw	r30, r24
 1a0:	24 83       	std	Z+4, r18	; 0x04
	return ringBuffer;
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <RingBufferDestroy>:

void RingBufferDestroy(TRingBuffer aRingBuffer) {
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <RingBufferDestroy+0x6>
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	9a 83       	std	Y+2, r25	; 0x02
 1be:	89 83       	std	Y+1, r24	; 0x01
	// assert( aRingBuffer );

	if ( !aRingBuffer )
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	89 2b       	or	r24, r25
 1c6:	99 f0       	breq	.+38     	; 0x1ee <RingBufferDestroy+0x3c>
		return;

	if ( aRingBuffer->buffer )
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	fc 01       	movw	r30, r24
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	93 81       	ldd	r25, Z+3	; 0x03
 1d2:	89 2b       	or	r24, r25
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <RingBufferDestroy+0x32>
		free( aRingBuffer->buffer );
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	fc 01       	movw	r30, r24
 1dc:	82 81       	ldd	r24, Z+2	; 0x02
 1de:	93 81       	ldd	r25, Z+3	; 0x03
 1e0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <free>
	
	free ( aRingBuffer );
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <free>
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <RingBufferDestroy+0x3e>

void RingBufferDestroy(TRingBuffer aRingBuffer) {
	// assert( aRingBuffer );

	if ( !aRingBuffer )
		return;
 1ee:	00 00       	nop

	if ( aRingBuffer->buffer )
		free( aRingBuffer->buffer );
	
	free ( aRingBuffer );
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <RingBufferWrite>:

TBool RingBufferWrite(TRingBuffer aRingBuffer, unsigned char aByte) {
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <RingBufferWrite+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <RingBufferWrite+0x8>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	9b 83       	std	Y+3, r25	; 0x03
 208:	8a 83       	std	Y+2, r24	; 0x02
 20a:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char locWriteIndex = aRingBuffer->writeIndex;
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	9b 81       	ldd	r25, Y+3	; 0x03
 210:	fc 01       	movw	r30, r24
 212:	81 81       	ldd	r24, Z+1	; 0x01
 214:	89 83       	std	Y+1, r24	; 0x01
	
	locWriteIndex++;
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	89 83       	std	Y+1, r24	; 0x01
	
	if ( locWriteIndex > aRingBuffer->size )
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	9b 81       	ldd	r25, Y+3	; 0x03
 220:	fc 01       	movw	r30, r24
 222:	94 81       	ldd	r25, Z+4	; 0x04
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	98 17       	cp	r25, r24
 228:	08 f4       	brcc	.+2      	; 0x22c <RingBufferWrite+0x32>
		locWriteIndex = 0;
 22a:	19 82       	std	Y+1, r1	; 0x01
	
	if ( locWriteIndex == aRingBuffer->readIndex )
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	9b 81       	ldd	r25, Y+3	; 0x03
 230:	fc 01       	movw	r30, r24
 232:	90 81       	ld	r25, Z
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	98 17       	cp	r25, r24
 238:	11 f4       	brne	.+4      	; 0x23e <RingBufferWrite+0x44>
		return EFALSE;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	16 c0       	rjmp	.+44     	; 0x26a <RingBufferWrite+0x70>
	
	aRingBuffer->buffer[aRingBuffer->writeIndex] = aByte;
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	9b 81       	ldd	r25, Y+3	; 0x03
 242:	fc 01       	movw	r30, r24
 244:	22 81       	ldd	r18, Z+2	; 0x02
 246:	33 81       	ldd	r19, Z+3	; 0x03
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	9b 81       	ldd	r25, Y+3	; 0x03
 24c:	fc 01       	movw	r30, r24
 24e:	81 81       	ldd	r24, Z+1	; 0x01
 250:	88 2f       	mov	r24, r24
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	2c 81       	ldd	r18, Y+4	; 0x04
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
	aRingBuffer->writeIndex = locWriteIndex;
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	9b 81       	ldd	r25, Y+3	; 0x03
 262:	29 81       	ldd	r18, Y+1	; 0x01
 264:	fc 01       	movw	r30, r24
 266:	21 83       	std	Z+1, r18	; 0x01
	
	return ETRUE;
 268:	81 e0       	ldi	r24, 0x01	; 1
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <RingBufferRead>:

TBool RingBufferRead(TRingBuffer aRingBuffer, unsigned char* aByte) {
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	00 d0       	rcall	.+0      	; 0x27e <RingBufferRead+0x6>
 27e:	00 d0       	rcall	.+0      	; 0x280 <RingBufferRead+0x8>
 280:	1f 92       	push	r1
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	9b 83       	std	Y+3, r25	; 0x03
 288:	8a 83       	std	Y+2, r24	; 0x02
 28a:	7d 83       	std	Y+5, r23	; 0x05
 28c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char locReadIndex = aRingBuffer->readIndex;
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	9b 81       	ldd	r25, Y+3	; 0x03
 292:	fc 01       	movw	r30, r24
 294:	80 81       	ld	r24, Z
 296:	89 83       	std	Y+1, r24	; 0x01

	if ( locReadIndex == aRingBuffer->writeIndex )
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	9b 81       	ldd	r25, Y+3	; 0x03
 29c:	fc 01       	movw	r30, r24
 29e:	91 81       	ldd	r25, Z+1	; 0x01
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	98 17       	cp	r25, r24
 2a4:	11 f4       	brne	.+4      	; 0x2aa <RingBufferRead+0x32>
		return EFALSE;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	24 c0       	rjmp	.+72     	; 0x2f2 <RingBufferRead+0x7a>
	
	locReadIndex++;
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	89 83       	std	Y+1, r24	; 0x01
	
	if ( locReadIndex > aRingBuffer->size )
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	9b 81       	ldd	r25, Y+3	; 0x03
 2b4:	fc 01       	movw	r30, r24
 2b6:	94 81       	ldd	r25, Z+4	; 0x04
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	98 17       	cp	r25, r24
 2bc:	08 f4       	brcc	.+2      	; 0x2c0 <RingBufferRead+0x48>
		locReadIndex = 0;
 2be:	19 82       	std	Y+1, r1	; 0x01

	*aByte = aRingBuffer->buffer[aRingBuffer->readIndex];
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	9b 81       	ldd	r25, Y+3	; 0x03
 2c4:	fc 01       	movw	r30, r24
 2c6:	22 81       	ldd	r18, Z+2	; 0x02
 2c8:	33 81       	ldd	r19, Z+3	; 0x03
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	9b 81       	ldd	r25, Y+3	; 0x03
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	fc 01       	movw	r30, r24
 2dc:	20 81       	ld	r18, Z
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	9d 81       	ldd	r25, Y+5	; 0x05
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
	aRingBuffer->readIndex = locReadIndex;
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ea:	29 81       	ldd	r18, Y+1	; 0x01
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	
	return ETRUE;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <RS232Create>:

TRS232Error
RS232GetLatestError(
	TRS232 Error )
{
}
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	2b 97       	sbiw	r28, 0x0b	; 11
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	8b 83       	std	Y+3, r24	; 0x03
 31c:	4c 83       	std	Y+4, r20	; 0x04
 31e:	5d 83       	std	Y+5, r21	; 0x05
 320:	6e 83       	std	Y+6, r22	; 0x06
 322:	7f 83       	std	Y+7, r23	; 0x07
 324:	08 87       	std	Y+8, r16	; 0x08
 326:	19 87       	std	Y+9, r17	; 0x09
 328:	2a 87       	std	Y+10, r18	; 0x0a
 32a:	3b 87       	std	Y+11, r19	; 0x0b
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	18 f0       	brcs	.+6      	; 0x338 <RS232Create+0x36>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	86 c0       	rjmp	.+268    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 ba 05 	call	0xb74	; 0xb74 <calloc>
 344:	9a 83       	std	Y+2, r25	; 0x02
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	89 2b       	or	r24, r25
 34e:	19 f4       	brne	.+6      	; 0x356 <RS232Create+0x54>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	77 c0       	rjmp	.+238    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	2b 81       	ldd	r18, Y+3	; 0x03
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	0e 94 9d 00 	call	0x13a	; 0x13a <RingBufferCreate>
 366:	9c 01       	movw	r18, r24
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	fc 01       	movw	r30, r24
 36e:	32 83       	std	Z+2, r19	; 0x02
 370:	21 83       	std	Z+1, r18	; 0x01
 372:	8c 81       	ldd	r24, Y+4	; 0x04
 374:	0e 94 9d 00 	call	0x13a	; 0x13a <RingBufferCreate>
 378:	9c 01       	movw	r18, r24
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	fc 01       	movw	r30, r24
 380:	34 83       	std	Z+4, r19	; 0x04
 382:	23 83       	std	Z+3, r18	; 0x03
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	fc 01       	movw	r30, r24
 38a:	81 81       	ldd	r24, Z+1	; 0x01
 38c:	92 81       	ldd	r25, Z+2	; 0x02
 38e:	89 2b       	or	r24, r25
 390:	39 f0       	breq	.+14     	; 0x3a0 <RS232Create+0x9e>
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	9a 81       	ldd	r25, Y+2	; 0x02
 396:	fc 01       	movw	r30, r24
 398:	83 81       	ldd	r24, Z+3	; 0x03
 39a:	94 81       	ldd	r25, Z+4	; 0x04
 39c:	89 2b       	or	r24, r25
 39e:	39 f4       	brne	.+14     	; 0x3ae <RS232Create+0xac>
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	9a 81       	ldd	r25, Y+2	; 0x02
 3a4:	0e 94 2d 02 	call	0x45a	; 0x45a <RS232Destroy>
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	4b c0       	rjmp	.+150    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3ae:	f8 94       	cli
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	88 2f       	mov	r24, r24
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	79 f0       	breq	.+30     	; 0x3d8 <RS232Create+0xd6>
 3ba:	9e 01       	movw	r18, r28
 3bc:	2c 5f       	subi	r18, 0xFC	; 252
 3be:	3f 4f       	sbci	r19, 0xFF	; 255
 3c0:	88 85       	ldd	r24, Y+8	; 0x08
 3c2:	99 85       	ldd	r25, Y+9	; 0x09
 3c4:	aa 85       	ldd	r26, Y+10	; 0x0a
 3c6:	bb 85       	ldd	r27, Y+11	; 0x0b
 3c8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ca:	fa 81       	ldd	r31, Y+2	; 0x02
 3cc:	ac 01       	movw	r20, r24
 3ce:	bd 01       	movw	r22, r26
 3d0:	cf 01       	movw	r24, r30
 3d2:	0e 94 13 03 	call	0x626	; 0x626 <RS232InitCon0>
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <RS232Create+0xf4>
 3d8:	9e 01       	movw	r18, r28
 3da:	2c 5f       	subi	r18, 0xFC	; 252
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	88 85       	ldd	r24, Y+8	; 0x08
 3e0:	99 85       	ldd	r25, Y+9	; 0x09
 3e2:	aa 85       	ldd	r26, Y+10	; 0x0a
 3e4:	bb 85       	ldd	r27, Y+11	; 0x0b
 3e6:	e9 81       	ldd	r30, Y+1	; 0x01
 3e8:	fa 81       	ldd	r31, Y+2	; 0x02
 3ea:	ac 01       	movw	r20, r24
 3ec:	bd 01       	movw	r22, r26
 3ee:	cf 01       	movw	r24, r30
 3f0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <RS232InitCon1>
 3f4:	00 00       	nop
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	80 5f       	subi	r24, 0xF0	; 240
 402:	9e 4f       	sbci	r25, 0xFE	; 254
 404:	fc 01       	movw	r30, r24
 406:	80 81       	ld	r24, Z
 408:	91 81       	ldd	r25, Z+1	; 0x01
 40a:	89 2b       	or	r24, r25
 40c:	61 f0       	breq	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	88 2f       	mov	r24, r24
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	80 5f       	subi	r24, 0xF0	; 240
 41a:	9e 4f       	sbci	r25, 0xFE	; 254
 41c:	fc 01       	movw	r30, r24
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	0e 94 2d 02 	call	0x45a	; 0x45a <RS232Destroy>
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	88 2f       	mov	r24, r24
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	80 5f       	subi	r24, 0xF0	; 240
 432:	9e 4f       	sbci	r25, 0xFE	; 254
 434:	29 81       	ldd	r18, Y+1	; 0x01
 436:	3a 81       	ldd	r19, Y+2	; 0x02
 438:	fc 01       	movw	r30, r24
 43a:	31 83       	std	Z+1, r19	; 0x01
 43c:	20 83       	st	Z, r18
 43e:	78 94       	sei
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	2b 96       	adiw	r28, 0x0b	; 11
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <RS232Destroy>:
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	00 d0       	rcall	.+0      	; 0x460 <RS232Destroy+0x6>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	89 2b       	or	r24, r25
 46e:	09 f4       	brne	.+2      	; 0x472 <RS232Destroy+0x18>
 470:	42 c0       	rjmp	.+132    	; 0x4f6 <RS232Destroy+0x9c>
 472:	f8 94       	cli
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	9a 81       	ldd	r25, Y+2	; 0x02
 478:	fc 01       	movw	r30, r24
 47a:	81 81       	ldd	r24, Z+1	; 0x01
 47c:	92 81       	ldd	r25, Z+2	; 0x02
 47e:	89 2b       	or	r24, r25
 480:	39 f0       	breq	.+14     	; 0x490 <RS232Destroy+0x36>
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	9a 81       	ldd	r25, Y+2	; 0x02
 486:	fc 01       	movw	r30, r24
 488:	81 81       	ldd	r24, Z+1	; 0x01
 48a:	92 81       	ldd	r25, Z+2	; 0x02
 48c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <RingBufferDestroy>
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	fc 01       	movw	r30, r24
 496:	83 81       	ldd	r24, Z+3	; 0x03
 498:	94 81       	ldd	r25, Z+4	; 0x04
 49a:	89 2b       	or	r24, r25
 49c:	39 f0       	breq	.+14     	; 0x4ac <RS232Destroy+0x52>
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	9a 81       	ldd	r25, Y+2	; 0x02
 4a2:	fc 01       	movw	r30, r24
 4a4:	83 81       	ldd	r24, Z+3	; 0x03
 4a6:	94 81       	ldd	r25, Z+4	; 0x04
 4a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <RingBufferDestroy>
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	9a 81       	ldd	r25, Y+2	; 0x02
 4b0:	fc 01       	movw	r30, r24
 4b2:	80 81       	ld	r24, Z
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	29 f0       	breq	.+10     	; 0x4c6 <RS232Destroy+0x6c>
 4bc:	81 ec       	ldi	r24, 0xC1	; 193
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	10 82       	st	Z, r1
 4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <RS232Destroy+0x76>
 4c6:	89 ec       	ldi	r24, 0xC9	; 201
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	10 82       	st	Z, r1
 4ce:	00 00       	nop
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	9a 81       	ldd	r25, Y+2	; 0x02
 4d4:	fc 01       	movw	r30, r24
 4d6:	80 81       	ld	r24, Z
 4d8:	88 2f       	mov	r24, r24
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	80 5f       	subi	r24, 0xF0	; 240
 4e2:	9e 4f       	sbci	r25, 0xFE	; 254
 4e4:	fc 01       	movw	r30, r24
 4e6:	11 82       	std	Z+1, r1	; 0x01
 4e8:	10 82       	st	Z, r1
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	9a 81       	ldd	r25, Y+2	; 0x02
 4ee:	0e 94 6e 06 	call	0xcdc	; 0xcdc <free>
 4f2:	78 94       	sei
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <RS232Destroy+0x9e>
 4f6:	00 00       	nop
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <RS232SendData>:
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	00 d0       	rcall	.+0      	; 0x508 <RS232SendData+0x6>
 508:	00 d0       	rcall	.+0      	; 0x50a <RS232SendData+0x8>
 50a:	00 d0       	rcall	.+0      	; 0x50c <RS232SendData+0xa>
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	9b 83       	std	Y+3, r25	; 0x03
 512:	8a 83       	std	Y+2, r24	; 0x02
 514:	7d 83       	std	Y+5, r23	; 0x05
 516:	6c 83       	std	Y+4, r22	; 0x04
 518:	4e 83       	std	Y+6, r20	; 0x06
 51a:	19 82       	std	Y+1, r1	; 0x01
 51c:	16 c0       	rjmp	.+44     	; 0x54a <RS232SendData+0x48>
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	2c 81       	ldd	r18, Y+4	; 0x04
 526:	3d 81       	ldd	r19, Y+5	; 0x05
 528:	82 0f       	add	r24, r18
 52a:	93 1f       	adc	r25, r19
 52c:	fc 01       	movw	r30, r24
 52e:	20 81       	ld	r18, Z
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	9b 81       	ldd	r25, Y+3	; 0x03
 534:	fc 01       	movw	r30, r24
 536:	81 81       	ldd	r24, Z+1	; 0x01
 538:	92 81       	ldd	r25, Z+2	; 0x02
 53a:	62 2f       	mov	r22, r18
 53c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <RingBufferWrite>
 540:	88 23       	and	r24, r24
 542:	41 f0       	breq	.+16     	; 0x554 <RS232SendData+0x52>
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	89 83       	std	Y+1, r24	; 0x01
 54a:	99 81       	ldd	r25, Y+1	; 0x01
 54c:	8e 81       	ldd	r24, Y+6	; 0x06
 54e:	98 17       	cp	r25, r24
 550:	30 f3       	brcs	.-52     	; 0x51e <RS232SendData+0x1c>
 552:	01 c0       	rjmp	.+2      	; 0x556 <RS232SendData+0x54>
 554:	00 00       	nop
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	88 23       	and	r24, r24
 55a:	f9 f0       	breq	.+62     	; 0x59a <RS232SendData+0x98>
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	9b 81       	ldd	r25, Y+3	; 0x03
 560:	fc 01       	movw	r30, r24
 562:	80 81       	ld	r24, Z
 564:	88 2f       	mov	r24, r24
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	19 f0       	breq	.+6      	; 0x572 <RS232SendData+0x70>
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	59 f0       	breq	.+22     	; 0x586 <RS232SendData+0x84>
 570:	14 c0       	rjmp	.+40     	; 0x59a <RS232SendData+0x98>
 572:	81 ec       	ldi	r24, 0xC1	; 193
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	21 ec       	ldi	r18, 0xC1	; 193
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	20 62       	ori	r18, 0x20	; 32
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
 584:	0a c0       	rjmp	.+20     	; 0x59a <RS232SendData+0x98>
 586:	89 ec       	ldi	r24, 0xC9	; 201
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	29 ec       	ldi	r18, 0xC9	; 201
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	f9 01       	movw	r30, r18
 590:	20 81       	ld	r18, Z
 592:	20 62       	ori	r18, 0x20	; 32
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
 598:	00 00       	nop
 59a:	89 81       	ldd	r24, Y+1	; 0x01
 59c:	26 96       	adiw	r28, 0x06	; 6
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <RS232ReceiveData>:
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	28 97       	sbiw	r28, 0x08	; 8
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	9d 83       	std	Y+5, r25	; 0x05
 5c4:	8c 83       	std	Y+4, r24	; 0x04
 5c6:	7f 83       	std	Y+7, r23	; 0x07
 5c8:	6e 83       	std	Y+6, r22	; 0x06
 5ca:	48 87       	std	Y+8, r20	; 0x08
 5cc:	19 82       	std	Y+1, r1	; 0x01
 5ce:	1b c0       	rjmp	.+54     	; 0x606 <RS232ReceiveData+0x58>
 5d0:	8c 81       	ldd	r24, Y+4	; 0x04
 5d2:	9d 81       	ldd	r25, Y+5	; 0x05
 5d4:	fc 01       	movw	r30, r24
 5d6:	83 81       	ldd	r24, Z+3	; 0x03
 5d8:	94 81       	ldd	r25, Z+4	; 0x04
 5da:	9e 01       	movw	r18, r28
 5dc:	2e 5f       	subi	r18, 0xFE	; 254
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	b9 01       	movw	r22, r18
 5e2:	0e 94 3c 01 	call	0x278	; 0x278 <RingBufferRead>
 5e6:	88 23       	and	r24, r24
 5e8:	99 f0       	breq	.+38     	; 0x610 <RS232ReceiveData+0x62>
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	88 2f       	mov	r24, r24
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	2e 81       	ldd	r18, Y+6	; 0x06
 5f2:	3f 81       	ldd	r19, Y+7	; 0x07
 5f4:	82 0f       	add	r24, r18
 5f6:	93 1f       	adc	r25, r19
 5f8:	2a 81       	ldd	r18, Y+2	; 0x02
 5fa:	3b 81       	ldd	r19, Y+3	; 0x03
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 83       	st	Z, r18
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	99 81       	ldd	r25, Y+1	; 0x01
 608:	88 85       	ldd	r24, Y+8	; 0x08
 60a:	98 17       	cp	r25, r24
 60c:	08 f3       	brcs	.-62     	; 0x5d0 <RS232ReceiveData+0x22>
 60e:	01 c0       	rjmp	.+2      	; 0x612 <RS232ReceiveData+0x64>
 610:	00 00       	nop
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	28 96       	adiw	r28, 0x08	; 8
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <RS232InitCon0>:
static void
RS232InitCon0(
	TRS232		   aRS232,
	unsigned long  aCpuClk,
	TRS232Config * aConfig )
{
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	29 97       	sbiw	r28, 0x09	; 9
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	de bf       	out	0x3e, r29	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	cd bf       	out	0x3d, r28	; 61
 63e:	9b 83       	std	Y+3, r25	; 0x03
 640:	8a 83       	std	Y+2, r24	; 0x02
 642:	4c 83       	std	Y+4, r20	; 0x04
 644:	5d 83       	std	Y+5, r21	; 0x05
 646:	6e 83       	std	Y+6, r22	; 0x06
 648:	7f 83       	std	Y+7, r23	; 0x07
 64a:	39 87       	std	Y+9, r19	; 0x09
 64c:	28 87       	std	Y+8, r18	; 0x08
	TBool doubleSpeed; // U2X bit int ... register
	
	UCSR0A = 0;
 64e:	80 ec       	ldi	r24, 0xC0	; 192
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	fc 01       	movw	r30, r24
 654:	10 82       	st	Z, r1
	UCSR0B = 0;
 656:	81 ec       	ldi	r24, 0xC1	; 193
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	fc 01       	movw	r30, r24
 65c:	10 82       	st	Z, r1
	UCSR0C = 0;
 65e:	82 ec       	ldi	r24, 0xC2	; 194
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	10 82       	st	Z, r1
	
	UBRR0 = RS232CalculateBaudrateRegValue( aCpuClk, aConfig->Baudrate, &doubleSpeed );
 666:	04 ec       	ldi	r16, 0xC4	; 196
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	88 85       	ldd	r24, Y+8	; 0x08
 66c:	99 85       	ldd	r25, Y+9	; 0x09
 66e:	fc 01       	movw	r30, r24
 670:	42 81       	ldd	r20, Z+2	; 0x02
 672:	53 81       	ldd	r21, Z+3	; 0x03
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	ae 81       	ldd	r26, Y+6	; 0x06
 67a:	bf 81       	ldd	r27, Y+7	; 0x07
 67c:	9e 01       	movw	r18, r28
 67e:	2f 5f       	subi	r18, 0xFF	; 255
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	bc 01       	movw	r22, r24
 684:	cd 01       	movw	r24, r26
 686:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <RS232CalculateBaudrateRegValue>
 68a:	f8 01       	movw	r30, r16
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
	
	if ( doubleSpeed )
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	88 23       	and	r24, r24
 694:	49 f0       	breq	.+18     	; 0x6a8 <RS232InitCon0+0x82>
		UCSR0A |= ( 1 << U2X0 );
 696:	80 ec       	ldi	r24, 0xC0	; 192
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	20 ec       	ldi	r18, 0xC0	; 192
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	22 60       	ori	r18, 0x02	; 2
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18

	UCSR0C |= ( 3 << UCSZ00 );
 6a8:	82 ec       	ldi	r24, 0xC2	; 194
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	22 ec       	ldi	r18, 0xC2	; 194
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	f9 01       	movw	r30, r18
 6b2:	20 81       	ld	r18, Z
 6b4:	26 60       	ori	r18, 0x06	; 6
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
	UCSR0B |= ( 1 << RXCIE0 ) | ( 1 << RXEN0 ) | ( 1 << TXEN0 );
 6ba:	81 ec       	ldi	r24, 0xC1	; 193
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	21 ec       	ldi	r18, 0xC1	; 193
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	f9 01       	movw	r30, r18
 6c4:	20 81       	ld	r18, Z
 6c6:	28 69       	ori	r18, 0x98	; 152
 6c8:	fc 01       	movw	r30, r24
 6ca:	20 83       	st	Z, r18
}
 6cc:	00 00       	nop
 6ce:	29 96       	adiw	r28, 0x09	; 9
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	f8 94       	cli
 6d4:	de bf       	out	0x3e, r29	; 62
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	cd bf       	out	0x3d, r28	; 61
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	08 95       	ret

000006e4 <RS232InitCon1>:
static void
RS232InitCon1(
TRS232		   aRS232,
unsigned long  aCpuClk,
TRS232Config * aConfig )
{
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	29 97       	sbiw	r28, 0x09	; 9
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	9b 83       	std	Y+3, r25	; 0x03
 6fe:	8a 83       	std	Y+2, r24	; 0x02
 700:	4c 83       	std	Y+4, r20	; 0x04
 702:	5d 83       	std	Y+5, r21	; 0x05
 704:	6e 83       	std	Y+6, r22	; 0x06
 706:	7f 83       	std	Y+7, r23	; 0x07
 708:	39 87       	std	Y+9, r19	; 0x09
 70a:	28 87       	std	Y+8, r18	; 0x08
	TBool doubleSpeed; // U2X bit int ... register
	
	UCSR1A = 0;
 70c:	88 ec       	ldi	r24, 0xC8	; 200
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	fc 01       	movw	r30, r24
 712:	10 82       	st	Z, r1
	UCSR1B = 0;
 714:	89 ec       	ldi	r24, 0xC9	; 201
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	fc 01       	movw	r30, r24
 71a:	10 82       	st	Z, r1
	UCSR1C = 0;
 71c:	8a ec       	ldi	r24, 0xCA	; 202
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	fc 01       	movw	r30, r24
 722:	10 82       	st	Z, r1
	
	UBRR0 = RS232CalculateBaudrateRegValue( aCpuClk, aConfig->Baudrate, &doubleSpeed );
 724:	04 ec       	ldi	r16, 0xC4	; 196
 726:	10 e0       	ldi	r17, 0x00	; 0
 728:	88 85       	ldd	r24, Y+8	; 0x08
 72a:	99 85       	ldd	r25, Y+9	; 0x09
 72c:	fc 01       	movw	r30, r24
 72e:	42 81       	ldd	r20, Z+2	; 0x02
 730:	53 81       	ldd	r21, Z+3	; 0x03
 732:	8c 81       	ldd	r24, Y+4	; 0x04
 734:	9d 81       	ldd	r25, Y+5	; 0x05
 736:	ae 81       	ldd	r26, Y+6	; 0x06
 738:	bf 81       	ldd	r27, Y+7	; 0x07
 73a:	9e 01       	movw	r18, r28
 73c:	2f 5f       	subi	r18, 0xFF	; 255
 73e:	3f 4f       	sbci	r19, 0xFF	; 255
 740:	bc 01       	movw	r22, r24
 742:	cd 01       	movw	r24, r26
 744:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <RS232CalculateBaudrateRegValue>
 748:	f8 01       	movw	r30, r16
 74a:	91 83       	std	Z+1, r25	; 0x01
 74c:	80 83       	st	Z, r24
	
	if ( doubleSpeed )
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	88 23       	and	r24, r24
 752:	49 f0       	breq	.+18     	; 0x766 <RS232InitCon1+0x82>
	UCSR1A |= ( 1 << U2X1 );
 754:	88 ec       	ldi	r24, 0xC8	; 200
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	28 ec       	ldi	r18, 0xC8	; 200
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	f9 01       	movw	r30, r18
 75e:	20 81       	ld	r18, Z
 760:	22 60       	ori	r18, 0x02	; 2
 762:	fc 01       	movw	r30, r24
 764:	20 83       	st	Z, r18

	UCSR1C |= ( 3 << UCSZ10 );
 766:	8a ec       	ldi	r24, 0xCA	; 202
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	2a ec       	ldi	r18, 0xCA	; 202
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	f9 01       	movw	r30, r18
 770:	20 81       	ld	r18, Z
 772:	26 60       	ori	r18, 0x06	; 6
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
	UCSR1B |= ( 1 << RXCIE1 ) | ( 1 << RXEN1 ) | ( 1 << TXEN1 );
 778:	89 ec       	ldi	r24, 0xC9	; 201
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	29 ec       	ldi	r18, 0xC9	; 201
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	f9 01       	movw	r30, r18
 782:	20 81       	ld	r18, Z
 784:	28 69       	ori	r18, 0x98	; 152
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
}
 78a:	00 00       	nop
 78c:	29 96       	adiw	r28, 0x09	; 9
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	08 95       	ret

000007a2 <RS232CalculateBaudrateRegValue>:
unsigned int
RS232CalculateBaudrateRegValue(
	unsigned long aCpuClk,
	unsigned int  Baudrate,
	TBool       * aDoubleSpeed )
{
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	2a 97       	sbiw	r28, 0x0a	; 10
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	6b 83       	std	Y+3, r22	; 0x03
 7b8:	7c 83       	std	Y+4, r23	; 0x04
 7ba:	8d 83       	std	Y+5, r24	; 0x05
 7bc:	9e 83       	std	Y+6, r25	; 0x06
 7be:	58 87       	std	Y+8, r21	; 0x08
 7c0:	4f 83       	std	Y+7, r20	; 0x07
 7c2:	3a 87       	std	Y+10, r19	; 0x0a
 7c4:	29 87       	std	Y+9, r18	; 0x09
	unsigned int ubrr;
	
	ubrr = ( aCpuClk / ( 16UL * Baudrate ) - 1 );
 7c6:	8f 81       	ldd	r24, Y+7	; 0x07
 7c8:	98 85       	ldd	r25, Y+8	; 0x08
 7ca:	cc 01       	movw	r24, r24
 7cc:	a0 e0       	ldi	r26, 0x00	; 0
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	aa 1f       	adc	r26, r26
 7d6:	bb 1f       	adc	r27, r27
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	aa 1f       	adc	r26, r26
 7de:	bb 1f       	adc	r27, r27
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	aa 1f       	adc	r26, r26
 7e6:	bb 1f       	adc	r27, r27
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	aa 1f       	adc	r26, r26
 7ee:	bb 1f       	adc	r27, r27
 7f0:	9c 01       	movw	r18, r24
 7f2:	ad 01       	movw	r20, r26
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	9c 81       	ldd	r25, Y+4	; 0x04
 7f8:	ad 81       	ldd	r26, Y+5	; 0x05
 7fa:	be 81       	ldd	r27, Y+6	; 0x06
 7fc:	bc 01       	movw	r22, r24
 7fe:	cd 01       	movw	r24, r26
 800:	0e 94 7e 05 	call	0xafc	; 0xafc <__udivmodsi4>
 804:	da 01       	movw	r26, r20
 806:	c9 01       	movw	r24, r18
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	9a 83       	std	Y+2, r25	; 0x02
 80c:	89 83       	std	Y+1, r24	; 0x01
	
	*aDoubleSpeed = EFALSE;
 80e:	89 85       	ldd	r24, Y+9	; 0x09
 810:	9a 85       	ldd	r25, Y+10	; 0x0a
 812:	fc 01       	movw	r30, r24
 814:	10 82       	st	Z, r1
	
	if ( ubrr > 4096 ) {
 816:	89 81       	ldd	r24, Y+1	; 0x01
 818:	9a 81       	ldd	r25, Y+2	; 0x02
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	90 41       	sbci	r25, 0x10	; 16
 81e:	58 f0       	brcs	.+22     	; 0x836 <RS232CalculateBaudrateRegValue+0x94>
		*aDoubleSpeed = ETRUE;
 820:	89 85       	ldd	r24, Y+9	; 0x09
 822:	9a 85       	ldd	r25, Y+10	; 0x0a
 824:	21 e0       	ldi	r18, 0x01	; 1
 826:	fc 01       	movw	r30, r24
 828:	20 83       	st	Z, r18
		ubrr = ubrr / 2;
 82a:	89 81       	ldd	r24, Y+1	; 0x01
 82c:	9a 81       	ldd	r25, Y+2	; 0x02
 82e:	96 95       	lsr	r25
 830:	87 95       	ror	r24
 832:	9a 83       	std	Y+2, r25	; 0x02
 834:	89 83       	std	Y+1, r24	; 0x01
	}

	return ubrr;
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	9a 81       	ldd	r25, Y+2	; 0x02
}
 83a:	2a 96       	adiw	r28, 0x0a	; 10
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	de bf       	out	0x3e, r29	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	cd bf       	out	0x3d, r28	; 61
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <__vector_21>:

ISR( USART0_UDRE_vect )
{
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	2f 93       	push	r18
 85a:	3f 93       	push	r19
 85c:	4f 93       	push	r20
 85e:	5f 93       	push	r21
 860:	6f 93       	push	r22
 862:	7f 93       	push	r23
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	af 93       	push	r26
 86a:	bf 93       	push	r27
 86c:	ef 93       	push	r30
 86e:	ff 93       	push	r31
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	1f 92       	push	r1
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if ( RingBufferRead( RS232[ ERS232_NO_0 ]->SendBuffer, &data ))
 87a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 87e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 882:	fc 01       	movw	r30, r24
 884:	81 81       	ldd	r24, Z+1	; 0x01
 886:	92 81       	ldd	r25, Z+2	; 0x02
 888:	9e 01       	movw	r18, r28
 88a:	2f 5f       	subi	r18, 0xFF	; 255
 88c:	3f 4f       	sbci	r19, 0xFF	; 255
 88e:	b9 01       	movw	r22, r18
 890:	0e 94 3c 01 	call	0x278	; 0x278 <RingBufferRead>
 894:	88 23       	and	r24, r24
 896:	31 f0       	breq	.+12     	; 0x8a4 <__vector_21+0x58>
		UDR0 = data;
 898:	86 ec       	ldi	r24, 0xC6	; 198
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	29 81       	ldd	r18, Y+1	; 0x01
 89e:	fc 01       	movw	r30, r24
 8a0:	20 83       	st	Z, r18
	else
		UCSR0B &= ~( 1 << UDRIE0 );
}
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <__vector_21+0x6a>
	unsigned char data;
	
	if ( RingBufferRead( RS232[ ERS232_NO_0 ]->SendBuffer, &data ))
		UDR0 = data;
	else
		UCSR0B &= ~( 1 << UDRIE0 );
 8a4:	81 ec       	ldi	r24, 0xC1	; 193
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	21 ec       	ldi	r18, 0xC1	; 193
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	f9 01       	movw	r30, r18
 8ae:	20 81       	ld	r18, Z
 8b0:	2f 7d       	andi	r18, 0xDF	; 223
 8b2:	fc 01       	movw	r30, r24
 8b4:	20 83       	st	Z, r18
}
 8b6:	00 00       	nop
 8b8:	0f 90       	pop	r0
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	ff 91       	pop	r31
 8c0:	ef 91       	pop	r30
 8c2:	bf 91       	pop	r27
 8c4:	af 91       	pop	r26
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	7f 91       	pop	r23
 8cc:	6f 91       	pop	r22
 8ce:	5f 91       	pop	r21
 8d0:	4f 91       	pop	r20
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <__vector_29>:

ISR( USART1_UDRE_vect )
{
 8e2:	1f 92       	push	r1
 8e4:	0f 92       	push	r0
 8e6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 8ea:	0f 92       	push	r0
 8ec:	11 24       	eor	r1, r1
 8ee:	2f 93       	push	r18
 8f0:	3f 93       	push	r19
 8f2:	4f 93       	push	r20
 8f4:	5f 93       	push	r21
 8f6:	6f 93       	push	r22
 8f8:	7f 93       	push	r23
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
 8fe:	af 93       	push	r26
 900:	bf 93       	push	r27
 902:	ef 93       	push	r30
 904:	ff 93       	push	r31
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	1f 92       	push	r1
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if ( RingBufferRead( RS232[ ERS232_NO_1 ]->SendBuffer, &data ))
 910:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 914:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 918:	fc 01       	movw	r30, r24
 91a:	81 81       	ldd	r24, Z+1	; 0x01
 91c:	92 81       	ldd	r25, Z+2	; 0x02
 91e:	9e 01       	movw	r18, r28
 920:	2f 5f       	subi	r18, 0xFF	; 255
 922:	3f 4f       	sbci	r19, 0xFF	; 255
 924:	b9 01       	movw	r22, r18
 926:	0e 94 3c 01 	call	0x278	; 0x278 <RingBufferRead>
 92a:	88 23       	and	r24, r24
 92c:	31 f0       	breq	.+12     	; 0x93a <__vector_29+0x58>
	UDR1 = data;
 92e:	8e ec       	ldi	r24, 0xCE	; 206
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	29 81       	ldd	r18, Y+1	; 0x01
 934:	fc 01       	movw	r30, r24
 936:	20 83       	st	Z, r18
	else
	UCSR1B &= ~( 1 << UDRIE1 );
}
 938:	09 c0       	rjmp	.+18     	; 0x94c <__vector_29+0x6a>
	unsigned char data;
	
	if ( RingBufferRead( RS232[ ERS232_NO_1 ]->SendBuffer, &data ))
	UDR1 = data;
	else
	UCSR1B &= ~( 1 << UDRIE1 );
 93a:	89 ec       	ldi	r24, 0xC9	; 201
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	29 ec       	ldi	r18, 0xC9	; 201
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	f9 01       	movw	r30, r18
 944:	20 81       	ld	r18, Z
 946:	2f 7d       	andi	r18, 0xDF	; 223
 948:	fc 01       	movw	r30, r24
 94a:	20 83       	st	Z, r18
}
 94c:	00 00       	nop
 94e:	0f 90       	pop	r0
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	bf 91       	pop	r27
 95a:	af 91       	pop	r26
 95c:	9f 91       	pop	r25
 95e:	8f 91       	pop	r24
 960:	7f 91       	pop	r23
 962:	6f 91       	pop	r22
 964:	5f 91       	pop	r21
 966:	4f 91       	pop	r20
 968:	3f 91       	pop	r19
 96a:	2f 91       	pop	r18
 96c:	0f 90       	pop	r0
 96e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 972:	0f 90       	pop	r0
 974:	1f 90       	pop	r1
 976:	18 95       	reti

00000978 <__vector_20>:

ISR( USART0_RX_vect )
{
 978:	1f 92       	push	r1
 97a:	0f 92       	push	r0
 97c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	2f 93       	push	r18
 986:	3f 93       	push	r19
 988:	4f 93       	push	r20
 98a:	5f 93       	push	r21
 98c:	6f 93       	push	r22
 98e:	7f 93       	push	r23
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	af 93       	push	r26
 996:	bf 93       	push	r27
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
	RingBufferWrite( RS232[ERS232_NO_0]->ReceiveBuffer, UDR0 );
 9a4:	86 ec       	ldi	r24, 0xC6	; 198
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	fc 01       	movw	r30, r24
 9aa:	20 81       	ld	r18, Z
 9ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 9b0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 9b4:	fc 01       	movw	r30, r24
 9b6:	83 81       	ldd	r24, Z+3	; 0x03
 9b8:	94 81       	ldd	r25, Z+4	; 0x04
 9ba:	62 2f       	mov	r22, r18
 9bc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <RingBufferWrite>
}
 9c0:	00 00       	nop
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	ff 91       	pop	r31
 9c8:	ef 91       	pop	r30
 9ca:	bf 91       	pop	r27
 9cc:	af 91       	pop	r26
 9ce:	9f 91       	pop	r25
 9d0:	8f 91       	pop	r24
 9d2:	7f 91       	pop	r23
 9d4:	6f 91       	pop	r22
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__vector_28>:

ISR( USART1_RX_vect )
{
 9ea:	1f 92       	push	r1
 9ec:	0f 92       	push	r0
 9ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	3f 93       	push	r19
 9fa:	4f 93       	push	r20
 9fc:	5f 93       	push	r21
 9fe:	6f 93       	push	r22
 a00:	7f 93       	push	r23
 a02:	8f 93       	push	r24
 a04:	9f 93       	push	r25
 a06:	af 93       	push	r26
 a08:	bf 93       	push	r27
 a0a:	ef 93       	push	r30
 a0c:	ff 93       	push	r31
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	cd b7       	in	r28, 0x3d	; 61
 a14:	de b7       	in	r29, 0x3e	; 62
	RingBufferWrite( RS232[ERS232_NO_1]->ReceiveBuffer, UDR1 );
 a16:	8e ec       	ldi	r24, 0xCE	; 206
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	fc 01       	movw	r30, r24
 a1c:	20 81       	ld	r18, Z
 a1e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 a22:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 a26:	fc 01       	movw	r30, r24
 a28:	83 81       	ldd	r24, Z+3	; 0x03
 a2a:	94 81       	ldd	r25, Z+4	; 0x04
 a2c:	62 2f       	mov	r22, r18
 a2e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <RingBufferWrite>
 a32:	00 00       	nop
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	ff 91       	pop	r31
 a3a:	ef 91       	pop	r30
 a3c:	bf 91       	pop	r27
 a3e:	af 91       	pop	r26
 a40:	9f 91       	pop	r25
 a42:	8f 91       	pop	r24
 a44:	7f 91       	pop	r23
 a46:	6f 91       	pop	r22
 a48:	5f 91       	pop	r21
 a4a:	4f 91       	pop	r20
 a4c:	3f 91       	pop	r19
 a4e:	2f 91       	pop	r18
 a50:	0f 90       	pop	r0
 a52:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a56:	0f 90       	pop	r0
 a58:	1f 90       	pop	r1
 a5a:	18 95       	reti

00000a5c <main>:
	
	while(1)
	{
		RS232SendData( rs232, "12345 ", 6);
		delayMs( 1000 );
	}
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	cd b7       	in	r28, 0x3d	; 61
 a62:	de b7       	in	r29, 0x3e	; 62
 a64:	0e 94 39 05 	call	0xa72	; 0xa72 <TestRS232_SendReceive>
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <TestRS232_SendReceive>:
}

void
TestRS232_SendReceive( void )
{
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	6b 97       	sbiw	r28, 0x1b	; 27
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
	TRS232 rs232;
	TRS232Config config;
	
	config.Baudrate = 9600;
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	95 e2       	ldi	r25, 0x25	; 37
 a8e:	9f 83       	std	Y+7, r25	; 0x07
 a90:	8e 83       	std	Y+6, r24	; 0x06
	config.ReceiveBufferSize = 20;
 a92:	84 e1       	ldi	r24, 0x14	; 20
 a94:	8c 83       	std	Y+4, r24	; 0x04
	config.SendBufferSize = 20;
 a96:	84 e1       	ldi	r24, 0x14	; 20
 a98:	8d 83       	std	Y+5, r24	; 0x05
	
	rs232 = RS232Create( ERS232_NO_0, config, CPU_CLK);
 a9a:	8c 81       	ldd	r24, Y+4	; 0x04
 a9c:	9d 81       	ldd	r25, Y+5	; 0x05
 a9e:	ae 81       	ldd	r26, Y+6	; 0x06
 aa0:	bf 81       	ldd	r27, Y+7	; 0x07
 aa2:	00 e0       	ldi	r16, 0x00	; 0
 aa4:	14 e2       	ldi	r17, 0x24	; 36
 aa6:	24 ef       	ldi	r18, 0xF4	; 244
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	ac 01       	movw	r20, r24
 aac:	bd 01       	movw	r22, r26
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	0e 94 81 01 	call	0x302	; 0x302 <RS232Create>
 ab4:	9a 83       	std	Y+2, r25	; 0x02
 ab6:	89 83       	std	Y+1, r24	; 0x01
	
	unsigned char receivedData[20];
	
	while(1)
	{		
		unsigned char received = RS232ReceiveData( rs232, (unsigned char *)receivedData, 20);
 ab8:	9e 01       	movw	r18, r28
 aba:	28 5f       	subi	r18, 0xF8	; 248
 abc:	3f 4f       	sbci	r19, 0xFF	; 255
 abe:	89 81       	ldd	r24, Y+1	; 0x01
 ac0:	9a 81       	ldd	r25, Y+2	; 0x02
 ac2:	44 e1       	ldi	r20, 0x14	; 20
 ac4:	b9 01       	movw	r22, r18
 ac6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <RS232ReceiveData>
 aca:	8b 83       	std	Y+3, r24	; 0x03
		delayMs(100);
 acc:	84 e6       	ldi	r24, 0x64	; 100
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 5d 00 	call	0xba	; 0xba <delayMs>
		
		if(0 != received) {
 ad4:	8b 81       	ldd	r24, Y+3	; 0x03
 ad6:	88 23       	and	r24, r24
 ad8:	79 f3       	breq	.-34     	; 0xab8 <TestRS232_SendReceive+0x46>
			RS232SendData( rs232, (unsigned char *)receivedData, received );
 ada:	9e 01       	movw	r18, r28
 adc:	28 5f       	subi	r18, 0xF8	; 248
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	89 81       	ldd	r24, Y+1	; 0x01
 ae2:	9a 81       	ldd	r25, Y+2	; 0x02
 ae4:	4b 81       	ldd	r20, Y+3	; 0x03
 ae6:	b9 01       	movw	r22, r18
 ae8:	0e 94 81 02 	call	0x502	; 0x502 <RS232SendData>
			RS232SendData( rs232, " ", 1 );
 aec:	89 81       	ldd	r24, Y+1	; 0x01
 aee:	9a 81       	ldd	r25, Y+2	; 0x02
 af0:	41 e0       	ldi	r20, 0x01	; 1
 af2:	6d e0       	ldi	r22, 0x0D	; 13
 af4:	71 e0       	ldi	r23, 0x01	; 1
 af6:	0e 94 81 02 	call	0x502	; 0x502 <RS232SendData>
		}
	}
 afa:	de cf       	rjmp	.-68     	; 0xab8 <TestRS232_SendReceive+0x46>

00000afc <__udivmodsi4>:
 afc:	a1 e2       	ldi	r26, 0x21	; 33
 afe:	1a 2e       	mov	r1, r26
 b00:	aa 1b       	sub	r26, r26
 b02:	bb 1b       	sub	r27, r27
 b04:	fd 01       	movw	r30, r26
 b06:	0d c0       	rjmp	.+26     	; 0xb22 <__udivmodsi4_ep>

00000b08 <__udivmodsi4_loop>:
 b08:	aa 1f       	adc	r26, r26
 b0a:	bb 1f       	adc	r27, r27
 b0c:	ee 1f       	adc	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	a2 17       	cp	r26, r18
 b12:	b3 07       	cpc	r27, r19
 b14:	e4 07       	cpc	r30, r20
 b16:	f5 07       	cpc	r31, r21
 b18:	20 f0       	brcs	.+8      	; 0xb22 <__udivmodsi4_ep>
 b1a:	a2 1b       	sub	r26, r18
 b1c:	b3 0b       	sbc	r27, r19
 b1e:	e4 0b       	sbc	r30, r20
 b20:	f5 0b       	sbc	r31, r21

00000b22 <__udivmodsi4_ep>:
 b22:	66 1f       	adc	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	1a 94       	dec	r1
 b2c:	69 f7       	brne	.-38     	; 0xb08 <__udivmodsi4_loop>
 b2e:	60 95       	com	r22
 b30:	70 95       	com	r23
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	9b 01       	movw	r18, r22
 b38:	ac 01       	movw	r20, r24
 b3a:	bd 01       	movw	r22, r26
 b3c:	cf 01       	movw	r24, r30
 b3e:	08 95       	ret

00000b40 <__muluhisi3>:
 b40:	0e 94 ab 05 	call	0xb56	; 0xb56 <__umulhisi3>
 b44:	a5 9f       	mul	r26, r21
 b46:	90 0d       	add	r25, r0
 b48:	b4 9f       	mul	r27, r20
 b4a:	90 0d       	add	r25, r0
 b4c:	a4 9f       	mul	r26, r20
 b4e:	80 0d       	add	r24, r0
 b50:	91 1d       	adc	r25, r1
 b52:	11 24       	eor	r1, r1
 b54:	08 95       	ret

00000b56 <__umulhisi3>:
 b56:	a2 9f       	mul	r26, r18
 b58:	b0 01       	movw	r22, r0
 b5a:	b3 9f       	mul	r27, r19
 b5c:	c0 01       	movw	r24, r0
 b5e:	a3 9f       	mul	r26, r19
 b60:	70 0d       	add	r23, r0
 b62:	81 1d       	adc	r24, r1
 b64:	11 24       	eor	r1, r1
 b66:	91 1d       	adc	r25, r1
 b68:	b2 9f       	mul	r27, r18
 b6a:	70 0d       	add	r23, r0
 b6c:	81 1d       	adc	r24, r1
 b6e:	11 24       	eor	r1, r1
 b70:	91 1d       	adc	r25, r1
 b72:	08 95       	ret

00000b74 <calloc>:
 b74:	0f 93       	push	r16
 b76:	1f 93       	push	r17
 b78:	cf 93       	push	r28
 b7a:	df 93       	push	r29
 b7c:	86 9f       	mul	r24, r22
 b7e:	80 01       	movw	r16, r0
 b80:	87 9f       	mul	r24, r23
 b82:	10 0d       	add	r17, r0
 b84:	96 9f       	mul	r25, r22
 b86:	10 0d       	add	r17, r0
 b88:	11 24       	eor	r1, r1
 b8a:	c8 01       	movw	r24, r16
 b8c:	0e 94 d6 05 	call	0xbac	; 0xbac <malloc>
 b90:	ec 01       	movw	r28, r24
 b92:	00 97       	sbiw	r24, 0x00	; 0
 b94:	29 f0       	breq	.+10     	; 0xba0 <calloc+0x2c>
 b96:	a8 01       	movw	r20, r16
 b98:	60 e0       	ldi	r22, 0x00	; 0
 b9a:	70 e0       	ldi	r23, 0x00	; 0
 b9c:	0e 94 f7 06 	call	0xdee	; 0xdee <memset>
 ba0:	ce 01       	movw	r24, r28
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	08 95       	ret

00000bac <malloc>:
 bac:	0f 93       	push	r16
 bae:	1f 93       	push	r17
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	82 30       	cpi	r24, 0x02	; 2
 bb6:	91 05       	cpc	r25, r1
 bb8:	10 f4       	brcc	.+4      	; 0xbbe <malloc+0x12>
 bba:	82 e0       	ldi	r24, 0x02	; 2
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__flp>
 bc2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__flp+0x1>
 bc6:	20 e0       	ldi	r18, 0x00	; 0
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	a0 e0       	ldi	r26, 0x00	; 0
 bcc:	b0 e0       	ldi	r27, 0x00	; 0
 bce:	30 97       	sbiw	r30, 0x00	; 0
 bd0:	19 f1       	breq	.+70     	; 0xc18 <malloc+0x6c>
 bd2:	40 81       	ld	r20, Z
 bd4:	51 81       	ldd	r21, Z+1	; 0x01
 bd6:	02 81       	ldd	r16, Z+2	; 0x02
 bd8:	13 81       	ldd	r17, Z+3	; 0x03
 bda:	48 17       	cp	r20, r24
 bdc:	59 07       	cpc	r21, r25
 bde:	c8 f0       	brcs	.+50     	; 0xc12 <malloc+0x66>
 be0:	84 17       	cp	r24, r20
 be2:	95 07       	cpc	r25, r21
 be4:	69 f4       	brne	.+26     	; 0xc00 <malloc+0x54>
 be6:	10 97       	sbiw	r26, 0x00	; 0
 be8:	31 f0       	breq	.+12     	; 0xbf6 <malloc+0x4a>
 bea:	12 96       	adiw	r26, 0x02	; 2
 bec:	0c 93       	st	X, r16
 bee:	12 97       	sbiw	r26, 0x02	; 2
 bf0:	13 96       	adiw	r26, 0x03	; 3
 bf2:	1c 93       	st	X, r17
 bf4:	27 c0       	rjmp	.+78     	; 0xc44 <malloc+0x98>
 bf6:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <__flp>
 bfa:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <__flp+0x1>
 bfe:	22 c0       	rjmp	.+68     	; 0xc44 <malloc+0x98>
 c00:	21 15       	cp	r18, r1
 c02:	31 05       	cpc	r19, r1
 c04:	19 f0       	breq	.+6      	; 0xc0c <malloc+0x60>
 c06:	42 17       	cp	r20, r18
 c08:	53 07       	cpc	r21, r19
 c0a:	18 f4       	brcc	.+6      	; 0xc12 <malloc+0x66>
 c0c:	9a 01       	movw	r18, r20
 c0e:	bd 01       	movw	r22, r26
 c10:	ef 01       	movw	r28, r30
 c12:	df 01       	movw	r26, r30
 c14:	f8 01       	movw	r30, r16
 c16:	db cf       	rjmp	.-74     	; 0xbce <malloc+0x22>
 c18:	21 15       	cp	r18, r1
 c1a:	31 05       	cpc	r19, r1
 c1c:	f9 f0       	breq	.+62     	; 0xc5c <malloc+0xb0>
 c1e:	28 1b       	sub	r18, r24
 c20:	39 0b       	sbc	r19, r25
 c22:	24 30       	cpi	r18, 0x04	; 4
 c24:	31 05       	cpc	r19, r1
 c26:	80 f4       	brcc	.+32     	; 0xc48 <malloc+0x9c>
 c28:	8a 81       	ldd	r24, Y+2	; 0x02
 c2a:	9b 81       	ldd	r25, Y+3	; 0x03
 c2c:	61 15       	cp	r22, r1
 c2e:	71 05       	cpc	r23, r1
 c30:	21 f0       	breq	.+8      	; 0xc3a <malloc+0x8e>
 c32:	fb 01       	movw	r30, r22
 c34:	93 83       	std	Z+3, r25	; 0x03
 c36:	82 83       	std	Z+2, r24	; 0x02
 c38:	04 c0       	rjmp	.+8      	; 0xc42 <malloc+0x96>
 c3a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__flp+0x1>
 c3e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__flp>
 c42:	fe 01       	movw	r30, r28
 c44:	32 96       	adiw	r30, 0x02	; 2
 c46:	44 c0       	rjmp	.+136    	; 0xcd0 <malloc+0x124>
 c48:	fe 01       	movw	r30, r28
 c4a:	e2 0f       	add	r30, r18
 c4c:	f3 1f       	adc	r31, r19
 c4e:	81 93       	st	Z+, r24
 c50:	91 93       	st	Z+, r25
 c52:	22 50       	subi	r18, 0x02	; 2
 c54:	31 09       	sbc	r19, r1
 c56:	39 83       	std	Y+1, r19	; 0x01
 c58:	28 83       	st	Y, r18
 c5a:	3a c0       	rjmp	.+116    	; 0xcd0 <malloc+0x124>
 c5c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 c60:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 c64:	23 2b       	or	r18, r19
 c66:	41 f4       	brne	.+16     	; 0xc78 <malloc+0xcc>
 c68:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c6c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c70:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__brkval+0x1>
 c74:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__brkval>
 c78:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c7c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c80:	21 15       	cp	r18, r1
 c82:	31 05       	cpc	r19, r1
 c84:	41 f4       	brne	.+16     	; 0xc96 <malloc+0xea>
 c86:	2d b7       	in	r18, 0x3d	; 61
 c88:	3e b7       	in	r19, 0x3e	; 62
 c8a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c8e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c92:	24 1b       	sub	r18, r20
 c94:	35 0b       	sbc	r19, r21
 c96:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__brkval>
 c9a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__brkval+0x1>
 c9e:	e2 17       	cp	r30, r18
 ca0:	f3 07       	cpc	r31, r19
 ca2:	a0 f4       	brcc	.+40     	; 0xccc <malloc+0x120>
 ca4:	2e 1b       	sub	r18, r30
 ca6:	3f 0b       	sbc	r19, r31
 ca8:	28 17       	cp	r18, r24
 caa:	39 07       	cpc	r19, r25
 cac:	78 f0       	brcs	.+30     	; 0xccc <malloc+0x120>
 cae:	ac 01       	movw	r20, r24
 cb0:	4e 5f       	subi	r20, 0xFE	; 254
 cb2:	5f 4f       	sbci	r21, 0xFF	; 255
 cb4:	24 17       	cp	r18, r20
 cb6:	35 07       	cpc	r19, r21
 cb8:	48 f0       	brcs	.+18     	; 0xccc <malloc+0x120>
 cba:	4e 0f       	add	r20, r30
 cbc:	5f 1f       	adc	r21, r31
 cbe:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <__brkval+0x1>
 cc2:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <__brkval>
 cc6:	81 93       	st	Z+, r24
 cc8:	91 93       	st	Z+, r25
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <malloc+0x124>
 ccc:	e0 e0       	ldi	r30, 0x00	; 0
 cce:	f0 e0       	ldi	r31, 0x00	; 0
 cd0:	cf 01       	movw	r24, r30
 cd2:	df 91       	pop	r29
 cd4:	cf 91       	pop	r28
 cd6:	1f 91       	pop	r17
 cd8:	0f 91       	pop	r16
 cda:	08 95       	ret

00000cdc <free>:
 cdc:	cf 93       	push	r28
 cde:	df 93       	push	r29
 ce0:	00 97       	sbiw	r24, 0x00	; 0
 ce2:	09 f4       	brne	.+2      	; 0xce6 <free+0xa>
 ce4:	81 c0       	rjmp	.+258    	; 0xde8 <free+0x10c>
 ce6:	fc 01       	movw	r30, r24
 ce8:	32 97       	sbiw	r30, 0x02	; 2
 cea:	13 82       	std	Z+3, r1	; 0x03
 cec:	12 82       	std	Z+2, r1	; 0x02
 cee:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__flp>
 cf2:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__flp+0x1>
 cf6:	10 97       	sbiw	r26, 0x00	; 0
 cf8:	81 f4       	brne	.+32     	; 0xd1a <free+0x3e>
 cfa:	20 81       	ld	r18, Z
 cfc:	31 81       	ldd	r19, Z+1	; 0x01
 cfe:	82 0f       	add	r24, r18
 d00:	93 1f       	adc	r25, r19
 d02:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 d06:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 d0a:	28 17       	cp	r18, r24
 d0c:	39 07       	cpc	r19, r25
 d0e:	51 f5       	brne	.+84     	; 0xd64 <free+0x88>
 d10:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__brkval+0x1>
 d14:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__brkval>
 d18:	67 c0       	rjmp	.+206    	; 0xde8 <free+0x10c>
 d1a:	ed 01       	movw	r28, r26
 d1c:	20 e0       	ldi	r18, 0x00	; 0
 d1e:	30 e0       	ldi	r19, 0x00	; 0
 d20:	ce 17       	cp	r28, r30
 d22:	df 07       	cpc	r29, r31
 d24:	40 f4       	brcc	.+16     	; 0xd36 <free+0x5a>
 d26:	4a 81       	ldd	r20, Y+2	; 0x02
 d28:	5b 81       	ldd	r21, Y+3	; 0x03
 d2a:	9e 01       	movw	r18, r28
 d2c:	41 15       	cp	r20, r1
 d2e:	51 05       	cpc	r21, r1
 d30:	f1 f0       	breq	.+60     	; 0xd6e <free+0x92>
 d32:	ea 01       	movw	r28, r20
 d34:	f5 cf       	rjmp	.-22     	; 0xd20 <free+0x44>
 d36:	d3 83       	std	Z+3, r29	; 0x03
 d38:	c2 83       	std	Z+2, r28	; 0x02
 d3a:	40 81       	ld	r20, Z
 d3c:	51 81       	ldd	r21, Z+1	; 0x01
 d3e:	84 0f       	add	r24, r20
 d40:	95 1f       	adc	r25, r21
 d42:	c8 17       	cp	r28, r24
 d44:	d9 07       	cpc	r29, r25
 d46:	59 f4       	brne	.+22     	; 0xd5e <free+0x82>
 d48:	88 81       	ld	r24, Y
 d4a:	99 81       	ldd	r25, Y+1	; 0x01
 d4c:	84 0f       	add	r24, r20
 d4e:	95 1f       	adc	r25, r21
 d50:	02 96       	adiw	r24, 0x02	; 2
 d52:	91 83       	std	Z+1, r25	; 0x01
 d54:	80 83       	st	Z, r24
 d56:	8a 81       	ldd	r24, Y+2	; 0x02
 d58:	9b 81       	ldd	r25, Y+3	; 0x03
 d5a:	93 83       	std	Z+3, r25	; 0x03
 d5c:	82 83       	std	Z+2, r24	; 0x02
 d5e:	21 15       	cp	r18, r1
 d60:	31 05       	cpc	r19, r1
 d62:	29 f4       	brne	.+10     	; 0xd6e <free+0x92>
 d64:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__flp+0x1>
 d68:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__flp>
 d6c:	3d c0       	rjmp	.+122    	; 0xde8 <free+0x10c>
 d6e:	e9 01       	movw	r28, r18
 d70:	fb 83       	std	Y+3, r31	; 0x03
 d72:	ea 83       	std	Y+2, r30	; 0x02
 d74:	49 91       	ld	r20, Y+
 d76:	59 91       	ld	r21, Y+
 d78:	c4 0f       	add	r28, r20
 d7a:	d5 1f       	adc	r29, r21
 d7c:	ec 17       	cp	r30, r28
 d7e:	fd 07       	cpc	r31, r29
 d80:	61 f4       	brne	.+24     	; 0xd9a <free+0xbe>
 d82:	80 81       	ld	r24, Z
 d84:	91 81       	ldd	r25, Z+1	; 0x01
 d86:	84 0f       	add	r24, r20
 d88:	95 1f       	adc	r25, r21
 d8a:	02 96       	adiw	r24, 0x02	; 2
 d8c:	e9 01       	movw	r28, r18
 d8e:	99 83       	std	Y+1, r25	; 0x01
 d90:	88 83       	st	Y, r24
 d92:	82 81       	ldd	r24, Z+2	; 0x02
 d94:	93 81       	ldd	r25, Z+3	; 0x03
 d96:	9b 83       	std	Y+3, r25	; 0x03
 d98:	8a 83       	std	Y+2, r24	; 0x02
 d9a:	e0 e0       	ldi	r30, 0x00	; 0
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	12 96       	adiw	r26, 0x02	; 2
 da0:	8d 91       	ld	r24, X+
 da2:	9c 91       	ld	r25, X
 da4:	13 97       	sbiw	r26, 0x03	; 3
 da6:	00 97       	sbiw	r24, 0x00	; 0
 da8:	19 f0       	breq	.+6      	; 0xdb0 <free+0xd4>
 daa:	fd 01       	movw	r30, r26
 dac:	dc 01       	movw	r26, r24
 dae:	f7 cf       	rjmp	.-18     	; 0xd9e <free+0xc2>
 db0:	8d 91       	ld	r24, X+
 db2:	9c 91       	ld	r25, X
 db4:	11 97       	sbiw	r26, 0x01	; 1
 db6:	9d 01       	movw	r18, r26
 db8:	2e 5f       	subi	r18, 0xFE	; 254
 dba:	3f 4f       	sbci	r19, 0xFF	; 255
 dbc:	82 0f       	add	r24, r18
 dbe:	93 1f       	adc	r25, r19
 dc0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 dc4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 dc8:	28 17       	cp	r18, r24
 dca:	39 07       	cpc	r19, r25
 dcc:	69 f4       	brne	.+26     	; 0xde8 <free+0x10c>
 dce:	30 97       	sbiw	r30, 0x00	; 0
 dd0:	29 f4       	brne	.+10     	; 0xddc <free+0x100>
 dd2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__flp+0x1>
 dd6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp>
 dda:	02 c0       	rjmp	.+4      	; 0xde0 <free+0x104>
 ddc:	13 82       	std	Z+3, r1	; 0x03
 dde:	12 82       	std	Z+2, r1	; 0x02
 de0:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__brkval+0x1>
 de4:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__brkval>
 de8:	df 91       	pop	r29
 dea:	cf 91       	pop	r28
 dec:	08 95       	ret

00000dee <memset>:
 dee:	dc 01       	movw	r26, r24
 df0:	01 c0       	rjmp	.+2      	; 0xdf4 <memset+0x6>
 df2:	6d 93       	st	X+, r22
 df4:	41 50       	subi	r20, 0x01	; 1
 df6:	50 40       	sbci	r21, 0x00	; 0
 df8:	e0 f7       	brcc	.-8      	; 0xdf2 <memset+0x4>
 dfa:	08 95       	ret

00000dfc <_exit>:
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
