
TestRingbuffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006d6  0000076a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  00000770  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a61  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000459  00000000  00000000  00001ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000274b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 ed       	ldi	r30, 0xD6	; 214
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 e0       	ldi	r26, 0x06	; 6
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 30       	cpi	r26, 0x0A	; 10
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 41 01 	call	0x282	; 0x282 <main>
  b2:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <RingBufferCreate>:
	unsigned char writeIndex;	// Index of the write position
	unsigned char* buffer;	// Buffer for data content
	unsigned char size;		// Size of the buffer
};

TRingBuffer RingBufferCreate(unsigned char aSize) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <RingBufferCreate+0x6>
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	8b 83       	std	Y+3, r24	; 0x03
	TRingBuffer ringBuffer;

	/* Allocate memory and set the content to 0 */
	ringBuffer = calloc( 1, sizeof(struct RingBufferStruct) );
  c8:	65 e0       	ldi	r22, 0x05	; 5
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 25 02 	call	0x44a	; 0x44a <calloc>
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	89 83       	std	Y+1, r24	; 0x01

	if (!ringBuffer)
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	9a 81       	ldd	r25, Y+2	; 0x02
  dc:	89 2b       	or	r24, r25
  de:	19 f4       	brne	.+6      	; 0xe6 <RingBufferCreate+0x2c>
		return NULL;
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	20 c0       	rjmp	.+64     	; 0x126 <RingBufferCreate+0x6c>
	
	ringBuffer->buffer = malloc( aSize );
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	88 2f       	mov	r24, r24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 41 02 	call	0x482	; 0x482 <malloc>
  f0:	9c 01       	movw	r18, r24
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	fc 01       	movw	r30, r24
  f8:	33 83       	std	Z+3, r19	; 0x03
  fa:	22 83       	std	Z+2, r18	; 0x02
	if ( !ringBuffer->buffer ) {
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	fc 01       	movw	r30, r24
 102:	82 81       	ldd	r24, Z+2	; 0x02
 104:	93 81       	ldd	r25, Z+3	; 0x03
 106:	89 2b       	or	r24, r25
 108:	39 f4       	brne	.+14     	; 0x118 <RingBufferCreate+0x5e>
		RingBufferDestroy(ringBuffer);
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	0e 94 99 00 	call	0x132	; 0x132 <RingBufferDestroy>
		return NULL;
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	07 c0       	rjmp	.+14     	; 0x126 <RingBufferCreate+0x6c>
	}
	
	ringBuffer->size = aSize;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	2b 81       	ldd	r18, Y+3	; 0x03
 11e:	fc 01       	movw	r30, r24
 120:	24 83       	std	Z+4, r18	; 0x04
	return ringBuffer;
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	9a 81       	ldd	r25, Y+2	; 0x02
}
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <RingBufferDestroy>:

void RingBufferDestroy(TRingBuffer aRingBuffer) {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <RingBufferDestroy+0x6>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	9a 83       	std	Y+2, r25	; 0x02
 13e:	89 83       	std	Y+1, r24	; 0x01
	// assert( aRingBuffer );

	if ( !aRingBuffer )
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	89 2b       	or	r24, r25
 146:	99 f0       	breq	.+38     	; 0x16e <RingBufferDestroy+0x3c>
		return;

	if ( aRingBuffer->buffer )
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	fc 01       	movw	r30, r24
 14e:	82 81       	ldd	r24, Z+2	; 0x02
 150:	93 81       	ldd	r25, Z+3	; 0x03
 152:	89 2b       	or	r24, r25
 154:	39 f0       	breq	.+14     	; 0x164 <RingBufferDestroy+0x32>
		free( aRingBuffer->buffer );
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	fc 01       	movw	r30, r24
 15c:	82 81       	ldd	r24, Z+2	; 0x02
 15e:	93 81       	ldd	r25, Z+3	; 0x03
 160:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <free>
	
	free ( aRingBuffer );
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <free>
 16c:	01 c0       	rjmp	.+2      	; 0x170 <RingBufferDestroy+0x3e>

void RingBufferDestroy(TRingBuffer aRingBuffer) {
	// assert( aRingBuffer );

	if ( !aRingBuffer )
		return;
 16e:	00 00       	nop

	if ( aRingBuffer->buffer )
		free( aRingBuffer->buffer );
	
	free ( aRingBuffer );
}
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <RingBufferWrite>:

TBool RingBufferWrite(TRingBuffer aRingBuffer, unsigned char aByte) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <RingBufferWrite+0x6>
 180:	00 d0       	rcall	.+0      	; 0x182 <RingBufferWrite+0x8>
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	9b 83       	std	Y+3, r25	; 0x03
 188:	8a 83       	std	Y+2, r24	; 0x02
 18a:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char locWriteIndex = aRingBuffer->writeIndex;
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	9b 81       	ldd	r25, Y+3	; 0x03
 190:	fc 01       	movw	r30, r24
 192:	81 81       	ldd	r24, Z+1	; 0x01
 194:	89 83       	std	Y+1, r24	; 0x01
	
	locWriteIndex++;
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	89 83       	std	Y+1, r24	; 0x01
	
	if ( locWriteIndex > aRingBuffer->size )
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	fc 01       	movw	r30, r24
 1a2:	94 81       	ldd	r25, Z+4	; 0x04
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	98 17       	cp	r25, r24
 1a8:	08 f4       	brcc	.+2      	; 0x1ac <RingBufferWrite+0x32>
		locWriteIndex = 0;
 1aa:	19 82       	std	Y+1, r1	; 0x01
	
	if ( locWriteIndex == aRingBuffer->readIndex )
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	9b 81       	ldd	r25, Y+3	; 0x03
 1b0:	fc 01       	movw	r30, r24
 1b2:	90 81       	ld	r25, Z
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	98 17       	cp	r25, r24
 1b8:	11 f4       	brne	.+4      	; 0x1be <RingBufferWrite+0x44>
		return EFALSE;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	16 c0       	rjmp	.+44     	; 0x1ea <RingBufferWrite+0x70>
	
	aRingBuffer->buffer[aRingBuffer->writeIndex] = aByte;
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	9b 81       	ldd	r25, Y+3	; 0x03
 1c2:	fc 01       	movw	r30, r24
 1c4:	22 81       	ldd	r18, Z+2	; 0x02
 1c6:	33 81       	ldd	r19, Z+3	; 0x03
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	9b 81       	ldd	r25, Y+3	; 0x03
 1cc:	fc 01       	movw	r30, r24
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	82 0f       	add	r24, r18
 1d6:	93 1f       	adc	r25, r19
 1d8:	2c 81       	ldd	r18, Y+4	; 0x04
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
	aRingBuffer->writeIndex = locWriteIndex;
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	9b 81       	ldd	r25, Y+3	; 0x03
 1e2:	29 81       	ldd	r18, Y+1	; 0x01
 1e4:	fc 01       	movw	r30, r24
 1e6:	21 83       	std	Z+1, r18	; 0x01
	
	return ETRUE;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <RingBufferRead>:

TBool RingBufferRead(TRingBuffer aRingBuffer, unsigned char* aByte) {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <RingBufferRead+0x6>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <RingBufferRead+0x8>
 200:	1f 92       	push	r1
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	9b 83       	std	Y+3, r25	; 0x03
 208:	8a 83       	std	Y+2, r24	; 0x02
 20a:	7d 83       	std	Y+5, r23	; 0x05
 20c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char locReadIndex = aRingBuffer->readIndex;
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	9b 81       	ldd	r25, Y+3	; 0x03
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	89 83       	std	Y+1, r24	; 0x01

	if ( locReadIndex == aRingBuffer->writeIndex )
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	9b 81       	ldd	r25, Y+3	; 0x03
 21c:	fc 01       	movw	r30, r24
 21e:	91 81       	ldd	r25, Z+1	; 0x01
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	98 17       	cp	r25, r24
 224:	11 f4       	brne	.+4      	; 0x22a <RingBufferRead+0x32>
		return EFALSE;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	24 c0       	rjmp	.+72     	; 0x272 <RingBufferRead+0x7a>
	
	locReadIndex++;
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	89 83       	std	Y+1, r24	; 0x01
	
	if ( locReadIndex > aRingBuffer->size )
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	9b 81       	ldd	r25, Y+3	; 0x03
 234:	fc 01       	movw	r30, r24
 236:	94 81       	ldd	r25, Z+4	; 0x04
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	98 17       	cp	r25, r24
 23c:	08 f4       	brcc	.+2      	; 0x240 <RingBufferRead+0x48>
		locReadIndex = 0;
 23e:	19 82       	std	Y+1, r1	; 0x01

	*aByte = aRingBuffer->buffer[aRingBuffer->readIndex];
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	9b 81       	ldd	r25, Y+3	; 0x03
 244:	fc 01       	movw	r30, r24
 246:	22 81       	ldd	r18, Z+2	; 0x02
 248:	33 81       	ldd	r19, Z+3	; 0x03
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	9b 81       	ldd	r25, Y+3	; 0x03
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	82 0f       	add	r24, r18
 258:	93 1f       	adc	r25, r19
 25a:	fc 01       	movw	r30, r24
 25c:	20 81       	ld	r18, Z
 25e:	8c 81       	ldd	r24, Y+4	; 0x04
 260:	9d 81       	ldd	r25, Y+5	; 0x05
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
	aRingBuffer->readIndex = locReadIndex;
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	9b 81       	ldd	r25, Y+3	; 0x03
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
	
	return ETRUE;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <main>:

unsigned int TestRingBuffer1();
unsigned int TestRingBuffer2();

int main(void)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <main+0x6>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	unsigned int errors;
	// Test-Cases
	errors = TestRingBuffer1();
 28c:	0e 94 4f 01 	call	0x29e	; 0x29e <TestRingBuffer1>
 290:	9a 83       	std	Y+2, r25	; 0x02
 292:	89 83       	std	Y+1, r24	; 0x01
	errors = TestRingBuffer2();
 294:	0e 94 a8 01 	call	0x350	; 0x350 <TestRingBuffer2>
 298:	9a 83       	std	Y+2, r25	; 0x02
 29a:	89 83       	std	Y+1, r24	; 0x01
	
	while (1)
	{
	}
 29c:	ff cf       	rjmp	.-2      	; 0x29c <main+0x1a>

0000029e <TestRingBuffer1>:
Description:
Write 1 Byte and read 1 Byte, check the result.
Repeat this for 3 times of the size of the ringbuffer.
**********************************************************************************/
unsigned int
TestRingBuffer1() {
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	2a 97       	sbiw	r28, 0x0a	; 10
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
	unsigned char bufferSize = 4;
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	8d 83       	std	Y+5, r24	; 0x05
	unsigned int errors = 0;
 2b6:	1a 82       	std	Y+2, r1	; 0x02
 2b8:	19 82       	std	Y+1, r1	; 0x01
	unsigned char readByteVal = 0x00;
 2ba:	1a 86       	std	Y+10, r1	; 0x0a
	unsigned char *readByte = &readByteVal;
 2bc:	ce 01       	movw	r24, r28
 2be:	0a 96       	adiw	r24, 0x0a	; 10
 2c0:	9f 83       	std	Y+7, r25	; 0x07
 2c2:	8e 83       	std	Y+6, r24	; 0x06
	TRingBuffer bufferCheck = RingBufferCreate(bufferSize);
 2c4:	8d 81       	ldd	r24, Y+5	; 0x05
 2c6:	0e 94 5d 00 	call	0xba	; 0xba <RingBufferCreate>
 2ca:	99 87       	std	Y+9, r25	; 0x09
 2cc:	88 87       	std	Y+8, r24	; 0x08
	
	for ( int i = 0; i <= bufferSize*3; i++) {
 2ce:	1c 82       	std	Y+4, r1	; 0x04
 2d0:	1b 82       	std	Y+3, r1	; 0x03
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <TestRingBuffer1+0x7a>
		RingBufferWrite(bufferCheck, i);
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	88 85       	ldd	r24, Y+8	; 0x08
 2d8:	99 85       	ldd	r25, Y+9	; 0x09
 2da:	62 2f       	mov	r22, r18
 2dc:	0e 94 bd 00 	call	0x17a	; 0x17a <RingBufferWrite>
		RingBufferRead(bufferCheck, readByte);
 2e0:	2e 81       	ldd	r18, Y+6	; 0x06
 2e2:	3f 81       	ldd	r19, Y+7	; 0x07
 2e4:	88 85       	ldd	r24, Y+8	; 0x08
 2e6:	99 85       	ldd	r25, Y+9	; 0x09
 2e8:	b9 01       	movw	r22, r18
 2ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <RingBufferRead>
		if ( *readByte != i )
 2ee:	8e 81       	ldd	r24, Y+6	; 0x06
 2f0:	9f 81       	ldd	r25, Y+7	; 0x07
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	28 17       	cp	r18, r24
 300:	39 07       	cpc	r19, r25
 302:	29 f0       	breq	.+10     	; 0x30e <TestRingBuffer1+0x70>
		errors++;
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	9a 83       	std	Y+2, r25	; 0x02
 30c:	89 83       	std	Y+1, r24	; 0x01
	unsigned int errors = 0;
	unsigned char readByteVal = 0x00;
	unsigned char *readByte = &readByteVal;
	TRingBuffer bufferCheck = RingBufferCreate(bufferSize);
	
	for ( int i = 0; i <= bufferSize*3; i++) {
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	9c 81       	ldd	r25, Y+4	; 0x04
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	9c 83       	std	Y+4, r25	; 0x04
 316:	8b 83       	std	Y+3, r24	; 0x03
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	c9 01       	movw	r24, r18
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	28 0f       	add	r18, r24
 326:	39 1f       	adc	r19, r25
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	9c 81       	ldd	r25, Y+4	; 0x04
 32c:	28 17       	cp	r18, r24
 32e:	39 07       	cpc	r19, r25
 330:	8c f6       	brge	.-94     	; 0x2d4 <TestRingBuffer1+0x36>
		RingBufferWrite(bufferCheck, i);
		RingBufferRead(bufferCheck, readByte);
		if ( *readByte != i )
		errors++;
	}
	RingBufferDestroy(bufferCheck);
 332:	88 85       	ldd	r24, Y+8	; 0x08
 334:	99 85       	ldd	r25, Y+9	; 0x09
 336:	0e 94 99 00 	call	0x132	; 0x132 <RingBufferDestroy>
	return errors;
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 33e:	2a 96       	adiw	r28, 0x0a	; 10
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <TestRingBuffer2>:
Description:
Write Bytes until the buffer is full and read all Bytes, check the result.
Repeat this for so many times as the size of the ringbuffer.
**********************************************************************************/
unsigned int
TestRingBuffer2() {
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	2f 97       	sbiw	r28, 0x0f	; 15
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
	unsigned char bufferSize = 4;
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	89 87       	std	Y+9, r24	; 0x09
	unsigned int errors = 0;
 368:	1a 82       	std	Y+2, r1	; 0x02
 36a:	19 82       	std	Y+1, r1	; 0x01
	unsigned char readByte[] = {0, 0, 0, 0};
 36c:	1c 86       	std	Y+12, r1	; 0x0c
 36e:	1d 86       	std	Y+13, r1	; 0x0d
 370:	1e 86       	std	Y+14, r1	; 0x0e
 372:	1f 86       	std	Y+15, r1	; 0x0f
	TRingBuffer bufferCheck = RingBufferCreate(bufferSize);
 374:	89 85       	ldd	r24, Y+9	; 0x09
 376:	0e 94 5d 00 	call	0xba	; 0xba <RingBufferCreate>
 37a:	9b 87       	std	Y+11, r25	; 0x0b
 37c:	8a 87       	std	Y+10, r24	; 0x0a
	
	for ( int i = 0; i <= bufferSize; i++)
 37e:	1c 82       	std	Y+4, r1	; 0x04
 380:	1b 82       	std	Y+3, r1	; 0x03
 382:	0b c0       	rjmp	.+22     	; 0x39a <TestRingBuffer2+0x4a>
		RingBufferWrite(bufferCheck, i);
 384:	2b 81       	ldd	r18, Y+3	; 0x03
 386:	8a 85       	ldd	r24, Y+10	; 0x0a
 388:	9b 85       	ldd	r25, Y+11	; 0x0b
 38a:	62 2f       	mov	r22, r18
 38c:	0e 94 bd 00 	call	0x17a	; 0x17a <RingBufferWrite>
	unsigned char bufferSize = 4;
	unsigned int errors = 0;
	unsigned char readByte[] = {0, 0, 0, 0};
	TRingBuffer bufferCheck = RingBufferCreate(bufferSize);
	
	for ( int i = 0; i <= bufferSize; i++)
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	9c 81       	ldd	r25, Y+4	; 0x04
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	9c 83       	std	Y+4, r25	; 0x04
 398:	8b 83       	std	Y+3, r24	; 0x03
 39a:	89 85       	ldd	r24, Y+9	; 0x09
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	9c 81       	ldd	r25, Y+4	; 0x04
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	6c f7       	brge	.-38     	; 0x384 <TestRingBuffer2+0x34>
		RingBufferWrite(bufferCheck, i);
	
	for ( int i = 0; i <= bufferSize; i++)
 3aa:	1e 82       	std	Y+6, r1	; 0x06
 3ac:	1d 82       	std	Y+5, r1	; 0x05
 3ae:	11 c0       	rjmp	.+34     	; 0x3d2 <TestRingBuffer2+0x82>
		RingBufferRead(bufferCheck, &readByte[i]);
 3b0:	9e 01       	movw	r18, r28
 3b2:	24 5f       	subi	r18, 0xF4	; 244
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ba:	28 0f       	add	r18, r24
 3bc:	39 1f       	adc	r19, r25
 3be:	8a 85       	ldd	r24, Y+10	; 0x0a
 3c0:	9b 85       	ldd	r25, Y+11	; 0x0b
 3c2:	b9 01       	movw	r22, r18
 3c4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <RingBufferRead>
	TRingBuffer bufferCheck = RingBufferCreate(bufferSize);
	
	for ( int i = 0; i <= bufferSize; i++)
		RingBufferWrite(bufferCheck, i);
	
	for ( int i = 0; i <= bufferSize; i++)
 3c8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ca:	9e 81       	ldd	r25, Y+6	; 0x06
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	9e 83       	std	Y+6, r25	; 0x06
 3d0:	8d 83       	std	Y+5, r24	; 0x05
 3d2:	89 85       	ldd	r24, Y+9	; 0x09
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	8d 81       	ldd	r24, Y+5	; 0x05
 3da:	9e 81       	ldd	r25, Y+6	; 0x06
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	3c f7       	brge	.-50     	; 0x3b0 <TestRingBuffer2+0x60>
		RingBufferRead(bufferCheck, &readByte[i]);
	
	for ( int i = 0; i < bufferSize; i++) {
 3e2:	18 86       	std	Y+8, r1	; 0x08
 3e4:	1f 82       	std	Y+7, r1	; 0x07
 3e6:	1a c0       	rjmp	.+52     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		if ( readByte[i] != i )
 3e8:	9e 01       	movw	r18, r28
 3ea:	24 5f       	subi	r18, 0xF4	; 244
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	8f 81       	ldd	r24, Y+7	; 0x07
 3f0:	98 85       	ldd	r25, Y+8	; 0x08
 3f2:	82 0f       	add	r24, r18
 3f4:	93 1f       	adc	r25, r19
 3f6:	fc 01       	movw	r30, r24
 3f8:	80 81       	ld	r24, Z
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	8f 81       	ldd	r24, Y+7	; 0x07
 400:	98 85       	ldd	r25, Y+8	; 0x08
 402:	28 17       	cp	r18, r24
 404:	39 07       	cpc	r19, r25
 406:	29 f0       	breq	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		errors++;
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	9a 83       	std	Y+2, r25	; 0x02
 410:	89 83       	std	Y+1, r24	; 0x01
		RingBufferWrite(bufferCheck, i);
	
	for ( int i = 0; i <= bufferSize; i++)
		RingBufferRead(bufferCheck, &readByte[i]);
	
	for ( int i = 0; i < bufferSize; i++) {
 412:	8f 81       	ldd	r24, Y+7	; 0x07
 414:	98 85       	ldd	r25, Y+8	; 0x08
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	98 87       	std	Y+8, r25	; 0x08
 41a:	8f 83       	std	Y+7, r24	; 0x07
 41c:	89 85       	ldd	r24, Y+9	; 0x09
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	8f 81       	ldd	r24, Y+7	; 0x07
 424:	98 85       	ldd	r25, Y+8	; 0x08
 426:	82 17       	cp	r24, r18
 428:	93 07       	cpc	r25, r19
 42a:	f4 f2       	brlt	.-68     	; 0x3e8 <TestRingBuffer2+0x98>
		if ( readByte[i] != i )
		errors++;
	}

	RingBufferDestroy(bufferCheck);
 42c:	8a 85       	ldd	r24, Y+10	; 0x0a
 42e:	9b 85       	ldd	r25, Y+11	; 0x0b
 430:	0e 94 99 00 	call	0x132	; 0x132 <RingBufferDestroy>
	return errors;
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	2f 96       	adiw	r28, 0x0f	; 15
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <calloc>:
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	86 9f       	mul	r24, r22
 454:	80 01       	movw	r16, r0
 456:	87 9f       	mul	r24, r23
 458:	10 0d       	add	r17, r0
 45a:	96 9f       	mul	r25, r22
 45c:	10 0d       	add	r17, r0
 45e:	11 24       	eor	r1, r1
 460:	c8 01       	movw	r24, r16
 462:	0e 94 41 02 	call	0x482	; 0x482 <malloc>
 466:	ec 01       	movw	r28, r24
 468:	00 97       	sbiw	r24, 0x00	; 0
 46a:	29 f0       	breq	.+10     	; 0x476 <calloc+0x2c>
 46c:	a8 01       	movw	r20, r16
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	0e 94 62 03 	call	0x6c4	; 0x6c4 <memset>
 476:	ce 01       	movw	r24, r28
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <malloc>:
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	82 30       	cpi	r24, 0x02	; 2
 48c:	91 05       	cpc	r25, r1
 48e:	10 f4       	brcc	.+4      	; 0x494 <malloc+0x12>
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 498:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	a0 e0       	ldi	r26, 0x00	; 0
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	30 97       	sbiw	r30, 0x00	; 0
 4a6:	19 f1       	breq	.+70     	; 0x4ee <malloc+0x6c>
 4a8:	40 81       	ld	r20, Z
 4aa:	51 81       	ldd	r21, Z+1	; 0x01
 4ac:	02 81       	ldd	r16, Z+2	; 0x02
 4ae:	13 81       	ldd	r17, Z+3	; 0x03
 4b0:	48 17       	cp	r20, r24
 4b2:	59 07       	cpc	r21, r25
 4b4:	c8 f0       	brcs	.+50     	; 0x4e8 <malloc+0x66>
 4b6:	84 17       	cp	r24, r20
 4b8:	95 07       	cpc	r25, r21
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <malloc+0x54>
 4bc:	10 97       	sbiw	r26, 0x00	; 0
 4be:	31 f0       	breq	.+12     	; 0x4cc <malloc+0x4a>
 4c0:	12 96       	adiw	r26, 0x02	; 2
 4c2:	0c 93       	st	X, r16
 4c4:	12 97       	sbiw	r26, 0x02	; 2
 4c6:	13 96       	adiw	r26, 0x03	; 3
 4c8:	1c 93       	st	X, r17
 4ca:	27 c0       	rjmp	.+78     	; 0x51a <malloc+0x98>
 4cc:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 4d0:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 4d4:	22 c0       	rjmp	.+68     	; 0x51a <malloc+0x98>
 4d6:	21 15       	cp	r18, r1
 4d8:	31 05       	cpc	r19, r1
 4da:	19 f0       	breq	.+6      	; 0x4e2 <malloc+0x60>
 4dc:	42 17       	cp	r20, r18
 4de:	53 07       	cpc	r21, r19
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <malloc+0x66>
 4e2:	9a 01       	movw	r18, r20
 4e4:	bd 01       	movw	r22, r26
 4e6:	ef 01       	movw	r28, r30
 4e8:	df 01       	movw	r26, r30
 4ea:	f8 01       	movw	r30, r16
 4ec:	db cf       	rjmp	.-74     	; 0x4a4 <malloc+0x22>
 4ee:	21 15       	cp	r18, r1
 4f0:	31 05       	cpc	r19, r1
 4f2:	f9 f0       	breq	.+62     	; 0x532 <malloc+0xb0>
 4f4:	28 1b       	sub	r18, r24
 4f6:	39 0b       	sbc	r19, r25
 4f8:	24 30       	cpi	r18, 0x04	; 4
 4fa:	31 05       	cpc	r19, r1
 4fc:	80 f4       	brcc	.+32     	; 0x51e <malloc+0x9c>
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	9b 81       	ldd	r25, Y+3	; 0x03
 502:	61 15       	cp	r22, r1
 504:	71 05       	cpc	r23, r1
 506:	21 f0       	breq	.+8      	; 0x510 <malloc+0x8e>
 508:	fb 01       	movw	r30, r22
 50a:	93 83       	std	Z+3, r25	; 0x03
 50c:	82 83       	std	Z+2, r24	; 0x02
 50e:	04 c0       	rjmp	.+8      	; 0x518 <malloc+0x96>
 510:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 514:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 518:	fe 01       	movw	r30, r28
 51a:	32 96       	adiw	r30, 0x02	; 2
 51c:	44 c0       	rjmp	.+136    	; 0x5a6 <malloc+0x124>
 51e:	fe 01       	movw	r30, r28
 520:	e2 0f       	add	r30, r18
 522:	f3 1f       	adc	r31, r19
 524:	81 93       	st	Z+, r24
 526:	91 93       	st	Z+, r25
 528:	22 50       	subi	r18, 0x02	; 2
 52a:	31 09       	sbc	r19, r1
 52c:	39 83       	std	Y+1, r19	; 0x01
 52e:	28 83       	st	Y, r18
 530:	3a c0       	rjmp	.+116    	; 0x5a6 <malloc+0x124>
 532:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 536:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 53a:	23 2b       	or	r18, r19
 53c:	41 f4       	brne	.+16     	; 0x54e <malloc+0xcc>
 53e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 542:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 546:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 54a:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 54e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 552:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 556:	21 15       	cp	r18, r1
 558:	31 05       	cpc	r19, r1
 55a:	41 f4       	brne	.+16     	; 0x56c <malloc+0xea>
 55c:	2d b7       	in	r18, 0x3d	; 61
 55e:	3e b7       	in	r19, 0x3e	; 62
 560:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 564:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 568:	24 1b       	sub	r18, r20
 56a:	35 0b       	sbc	r19, r21
 56c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 570:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 574:	e2 17       	cp	r30, r18
 576:	f3 07       	cpc	r31, r19
 578:	a0 f4       	brcc	.+40     	; 0x5a2 <malloc+0x120>
 57a:	2e 1b       	sub	r18, r30
 57c:	3f 0b       	sbc	r19, r31
 57e:	28 17       	cp	r18, r24
 580:	39 07       	cpc	r19, r25
 582:	78 f0       	brcs	.+30     	; 0x5a2 <malloc+0x120>
 584:	ac 01       	movw	r20, r24
 586:	4e 5f       	subi	r20, 0xFE	; 254
 588:	5f 4f       	sbci	r21, 0xFF	; 255
 58a:	24 17       	cp	r18, r20
 58c:	35 07       	cpc	r19, r21
 58e:	48 f0       	brcs	.+18     	; 0x5a2 <malloc+0x120>
 590:	4e 0f       	add	r20, r30
 592:	5f 1f       	adc	r21, r31
 594:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 598:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 59c:	81 93       	st	Z+, r24
 59e:	91 93       	st	Z+, r25
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <malloc+0x124>
 5a2:	e0 e0       	ldi	r30, 0x00	; 0
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	cf 01       	movw	r24, r30
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	08 95       	ret

000005b2 <free>:
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	09 f4       	brne	.+2      	; 0x5bc <free+0xa>
 5ba:	81 c0       	rjmp	.+258    	; 0x6be <free+0x10c>
 5bc:	fc 01       	movw	r30, r24
 5be:	32 97       	sbiw	r30, 0x02	; 2
 5c0:	13 82       	std	Z+3, r1	; 0x03
 5c2:	12 82       	std	Z+2, r1	; 0x02
 5c4:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 5c8:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 5cc:	10 97       	sbiw	r26, 0x00	; 0
 5ce:	81 f4       	brne	.+32     	; 0x5f0 <free+0x3e>
 5d0:	20 81       	ld	r18, Z
 5d2:	31 81       	ldd	r19, Z+1	; 0x01
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 5dc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 5e0:	28 17       	cp	r18, r24
 5e2:	39 07       	cpc	r19, r25
 5e4:	51 f5       	brne	.+84     	; 0x63a <free+0x88>
 5e6:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 5ea:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 5ee:	67 c0       	rjmp	.+206    	; 0x6be <free+0x10c>
 5f0:	ed 01       	movw	r28, r26
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	ce 17       	cp	r28, r30
 5f8:	df 07       	cpc	r29, r31
 5fa:	40 f4       	brcc	.+16     	; 0x60c <free+0x5a>
 5fc:	4a 81       	ldd	r20, Y+2	; 0x02
 5fe:	5b 81       	ldd	r21, Y+3	; 0x03
 600:	9e 01       	movw	r18, r28
 602:	41 15       	cp	r20, r1
 604:	51 05       	cpc	r21, r1
 606:	f1 f0       	breq	.+60     	; 0x644 <free+0x92>
 608:	ea 01       	movw	r28, r20
 60a:	f5 cf       	rjmp	.-22     	; 0x5f6 <free+0x44>
 60c:	d3 83       	std	Z+3, r29	; 0x03
 60e:	c2 83       	std	Z+2, r28	; 0x02
 610:	40 81       	ld	r20, Z
 612:	51 81       	ldd	r21, Z+1	; 0x01
 614:	84 0f       	add	r24, r20
 616:	95 1f       	adc	r25, r21
 618:	c8 17       	cp	r28, r24
 61a:	d9 07       	cpc	r29, r25
 61c:	59 f4       	brne	.+22     	; 0x634 <free+0x82>
 61e:	88 81       	ld	r24, Y
 620:	99 81       	ldd	r25, Y+1	; 0x01
 622:	84 0f       	add	r24, r20
 624:	95 1f       	adc	r25, r21
 626:	02 96       	adiw	r24, 0x02	; 2
 628:	91 83       	std	Z+1, r25	; 0x01
 62a:	80 83       	st	Z, r24
 62c:	8a 81       	ldd	r24, Y+2	; 0x02
 62e:	9b 81       	ldd	r25, Y+3	; 0x03
 630:	93 83       	std	Z+3, r25	; 0x03
 632:	82 83       	std	Z+2, r24	; 0x02
 634:	21 15       	cp	r18, r1
 636:	31 05       	cpc	r19, r1
 638:	29 f4       	brne	.+10     	; 0x644 <free+0x92>
 63a:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 63e:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 642:	3d c0       	rjmp	.+122    	; 0x6be <free+0x10c>
 644:	e9 01       	movw	r28, r18
 646:	fb 83       	std	Y+3, r31	; 0x03
 648:	ea 83       	std	Y+2, r30	; 0x02
 64a:	49 91       	ld	r20, Y+
 64c:	59 91       	ld	r21, Y+
 64e:	c4 0f       	add	r28, r20
 650:	d5 1f       	adc	r29, r21
 652:	ec 17       	cp	r30, r28
 654:	fd 07       	cpc	r31, r29
 656:	61 f4       	brne	.+24     	; 0x670 <free+0xbe>
 658:	80 81       	ld	r24, Z
 65a:	91 81       	ldd	r25, Z+1	; 0x01
 65c:	84 0f       	add	r24, r20
 65e:	95 1f       	adc	r25, r21
 660:	02 96       	adiw	r24, 0x02	; 2
 662:	e9 01       	movw	r28, r18
 664:	99 83       	std	Y+1, r25	; 0x01
 666:	88 83       	st	Y, r24
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	9b 83       	std	Y+3, r25	; 0x03
 66e:	8a 83       	std	Y+2, r24	; 0x02
 670:	e0 e0       	ldi	r30, 0x00	; 0
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	12 96       	adiw	r26, 0x02	; 2
 676:	8d 91       	ld	r24, X+
 678:	9c 91       	ld	r25, X
 67a:	13 97       	sbiw	r26, 0x03	; 3
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	19 f0       	breq	.+6      	; 0x686 <free+0xd4>
 680:	fd 01       	movw	r30, r26
 682:	dc 01       	movw	r26, r24
 684:	f7 cf       	rjmp	.-18     	; 0x674 <free+0xc2>
 686:	8d 91       	ld	r24, X+
 688:	9c 91       	ld	r25, X
 68a:	11 97       	sbiw	r26, 0x01	; 1
 68c:	9d 01       	movw	r18, r26
 68e:	2e 5f       	subi	r18, 0xFE	; 254
 690:	3f 4f       	sbci	r19, 0xFF	; 255
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 69a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 69e:	28 17       	cp	r18, r24
 6a0:	39 07       	cpc	r19, r25
 6a2:	69 f4       	brne	.+26     	; 0x6be <free+0x10c>
 6a4:	30 97       	sbiw	r30, 0x00	; 0
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <free+0x100>
 6a8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 6ac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <free+0x104>
 6b2:	13 82       	std	Z+3, r1	; 0x03
 6b4:	12 82       	std	Z+2, r1	; 0x02
 6b6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 6ba:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <memset>:
 6c4:	dc 01       	movw	r26, r24
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <memset+0x6>
 6c8:	6d 93       	st	X+, r22
 6ca:	41 50       	subi	r20, 0x01	; 1
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	e0 f7       	brcc	.-8      	; 0x6c8 <memset+0x4>
 6d0:	08 95       	ret

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
