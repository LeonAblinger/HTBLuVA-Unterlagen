
4_C_01_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000064c  000006c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac2  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ab  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f4  00000000  00000000  00001b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040f  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002c86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec e4       	ldi	r30, 0x4C	; 76
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <main>
  a2:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <delayMs>:
#include <util/delay.h>
#endif

void
delayMs( unsigned int aDelayMs )
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	28 97       	sbiw	r28, 0x08	; 8
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	98 87       	std	Y+8, r25	; 0x08
  c0:	8f 83       	std	Y+7, r24	; 0x07
	#ifdef DEBUG
		volatile unsigned long counter;
		volatile unsigned int help;
		for ( counter = 0; counter < aDelayMs * 150UL; counter++)
  c2:	19 82       	std	Y+1, r1	; 0x01
  c4:	1a 82       	std	Y+2, r1	; 0x02
  c6:	1b 82       	std	Y+3, r1	; 0x03
  c8:	1c 82       	std	Y+4, r1	; 0x04
  ca:	10 c0       	rjmp	.+32     	; 0xec <delayMs+0x42>
		help++;
  cc:	8d 81       	ldd	r24, Y+5	; 0x05
  ce:	9e 81       	ldd	r25, Y+6	; 0x06
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	9e 83       	std	Y+6, r25	; 0x06
  d4:	8d 83       	std	Y+5, r24	; 0x05
delayMs( unsigned int aDelayMs )
{
	#ifdef DEBUG
		volatile unsigned long counter;
		volatile unsigned int help;
		for ( counter = 0; counter < aDelayMs * 150UL; counter++)
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	ab 81       	ldd	r26, Y+3	; 0x03
  dc:	bc 81       	ldd	r27, Y+4	; 0x04
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	a1 1d       	adc	r26, r1
  e2:	b1 1d       	adc	r27, r1
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	9a 83       	std	Y+2, r25	; 0x02
  e8:	ab 83       	std	Y+3, r26	; 0x03
  ea:	bc 83       	std	Y+4, r27	; 0x04
  ec:	8f 81       	ldd	r24, Y+7	; 0x07
  ee:	98 85       	ldd	r25, Y+8	; 0x08
  f0:	9c 01       	movw	r18, r24
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	86 e9       	ldi	r24, 0x96	; 150
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	dc 01       	movw	r26, r24
  fc:	0e 94 0a 03 	call	0x614	; 0x614 <__muluhisi3>
 100:	9b 01       	movw	r18, r22
 102:	ac 01       	movw	r20, r24
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	ab 81       	ldd	r26, Y+3	; 0x03
 10a:	bc 81       	ldd	r27, Y+4	; 0x04
 10c:	82 17       	cp	r24, r18
 10e:	93 07       	cpc	r25, r19
 110:	a4 07       	cpc	r26, r20
 112:	b5 07       	cpc	r27, r21
 114:	d8 f2       	brcs	.-74     	; 0xcc <delayMs+0x22>
		help++;
	#else
		_delay_ms( aDelayMs );
	#endif
}
 116:	00 00       	nop
 118:	28 96       	adiw	r28, 0x08	; 8
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <delayUs>:

void
delayUs( unsigned int aDelayUs )
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	28 97       	sbiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	98 87       	std	Y+8, r25	; 0x08
 140:	8f 83       	std	Y+7, r24	; 0x07
	#ifdef DEBUG
	volatile unsigned long counter;
	volatile unsigned int help;
	for ( counter = 0; counter < aDelayUs; counter++)
 142:	19 82       	std	Y+1, r1	; 0x01
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	1b 82       	std	Y+3, r1	; 0x03
 148:	1c 82       	std	Y+4, r1	; 0x04
 14a:	10 c0       	rjmp	.+32     	; 0x16c <delayUs+0x42>
	help++;
 14c:	8d 81       	ldd	r24, Y+5	; 0x05
 14e:	9e 81       	ldd	r25, Y+6	; 0x06
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	9e 83       	std	Y+6, r25	; 0x06
 154:	8d 83       	std	Y+5, r24	; 0x05
delayUs( unsigned int aDelayUs )
{
	#ifdef DEBUG
	volatile unsigned long counter;
	volatile unsigned int help;
	for ( counter = 0; counter < aDelayUs; counter++)
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	ab 81       	ldd	r26, Y+3	; 0x03
 15c:	bc 81       	ldd	r27, Y+4	; 0x04
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	ab 83       	std	Y+3, r26	; 0x03
 16a:	bc 83       	std	Y+4, r27	; 0x04
 16c:	8f 81       	ldd	r24, Y+7	; 0x07
 16e:	98 85       	ldd	r25, Y+8	; 0x08
 170:	9c 01       	movw	r18, r24
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	ab 81       	ldd	r26, Y+3	; 0x03
 17c:	bc 81       	ldd	r27, Y+4	; 0x04
 17e:	82 17       	cp	r24, r18
 180:	93 07       	cpc	r25, r19
 182:	a4 07       	cpc	r26, r20
 184:	b5 07       	cpc	r27, r21
 186:	10 f3       	brcs	.-60     	; 0x14c <delayUs+0x22>
	help++;
	#else
	_delay_us( aDelayUs );
	#endif
 188:	00 00       	nop
 18a:	28 96       	adiw	r28, 0x08	; 8
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcdInit>:
  Function: lcdInit
  Description:
    Initialize the lcd display with the needed parameters to use the rest of the program.
******************************************************************************************************/
lcdInit()
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	LCD_PORT_DATA &= ~( 0xF << LCD_DB );
 1a4:	82 e2       	ldi	r24, 0x22	; 34
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	22 e2       	ldi	r18, 0x22	; 34
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
	LCD_DDR_DATA  |= ( 0xF << LCD_DB );
 1b6:	81 e2       	ldi	r24, 0x21	; 33
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	21 e2       	ldi	r18, 0x21	; 33
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	2f 60       	ori	r18, 0x0F	; 15
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
	
	LCD_PORT_RS &= ~( 1 << LCD_RS );
 1c8:	82 e2       	ldi	r24, 0x22	; 34
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	22 e2       	ldi	r18, 0x22	; 34
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	2f 7e       	andi	r18, 0xEF	; 239
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	LCD_DDR_RS |= ( 1 << LCD_RS );
 1da:	81 e2       	ldi	r24, 0x21	; 33
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 e2       	ldi	r18, 0x21	; 33
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	20 61       	ori	r18, 0x10	; 16
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
	
	LCD_PORT_RW &= ~( 1 << LCD_RW );
 1ec:	82 e2       	ldi	r24, 0x22	; 34
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	22 e2       	ldi	r18, 0x22	; 34
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	2f 7d       	andi	r18, 0xDF	; 223
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	LCD_DDR_RW |= ( 1 << LCD_RW );
 1fe:	81 e2       	ldi	r24, 0x21	; 33
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	21 e2       	ldi	r18, 0x21	; 33
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	20 62       	ori	r18, 0x20	; 32
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
	
	LCD_PORT_EN &= ~( 1 << LCD_EN );
 210:	82 e2       	ldi	r24, 0x22	; 34
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	22 e2       	ldi	r18, 0x22	; 34
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	2f 7b       	andi	r18, 0xBF	; 191
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
	LCD_DDR_EN |= ( 1 << LCD_EN );
 222:	81 e2       	ldi	r24, 0x21	; 33
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	21 e2       	ldi	r18, 0x21	; 33
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	20 64       	ori	r18, 0x40	; 64
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	
	/* Software	Reset 3 times */
	lcdOut4Bit( LCD_SOFT_RESET );
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
	delayMs( LCD_SOFT_RESET_MS1 );
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
	lcdOut4Bit( LCD_SOFT_RESET );
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
	delayMs( LCD_SOFT_RESET_MS2 );
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
	lcdOut4Bit( LCD_SOFT_RESET );
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
	delayMs( LCD_SOFT_RESET_MS3 );
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
	
	/* Set to 4-bit mode */
	lcdOut4Bit( LCD_SET_FUNCTION |
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
				LCD_FUNCTION_4BIT );
	delayMs( LCD_SET_4BITMODE_MS );
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
	
	/* Initialize 2 lines, 5x7 matrix */
	lcdCommand( LCD_SET_FUNCTION |
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 2b 02 	call	0x456	; 0x456 <lcdCommand>
				LCD_FUNCTION_4BIT |
				LCD_FUNCTION_2LINE |
				LCD_FUNCTION_5X7 );
				
	/* Initialize the cursor */
	lcdCommand( LCD_SET_DISPLAY |
 272:	8c e0       	ldi	r24, 0x0C	; 12
 274:	0e 94 2b 02 	call	0x456	; 0x456 <lcdCommand>
				LCD_DISPLAY_ON |
				LCD_CURSOR_OFF |
				LCD_BLINKING_OFF );
				
	/* Cursor increment, no scroll */
	lcdCommand( LCD_SET_ENTRY |
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 2b 02 	call	0x456	; 0x456 <lcdCommand>
				LCD_ENTRY_INCREASE |
				LCD_ENTRY_NOSHIFT );
				
	lcdClear();
 27e:	0e 94 9a 01 	call	0x334	; 0x334 <lcdClear>
}
 282:	00 00       	nop
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <lcdWrite>:
******************************************************************************************************/
lcdWrite(
  char *       aBuffer,
  unsigned int aSize
  )
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <lcdWrite+0x6>
 290:	00 d0       	rcall	.+0      	; 0x292 <lcdWrite+0x8>
 292:	00 d0       	rcall	.+0      	; 0x294 <lcdWrite+0xa>
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	9c 83       	std	Y+4, r25	; 0x04
 29a:	8b 83       	std	Y+3, r24	; 0x03
 29c:	7e 83       	std	Y+6, r23	; 0x06
 29e:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	for( i = 0; i < aSize; i++ )
 2a0:	1a 82       	std	Y+2, r1	; 0x02
 2a2:	19 82       	std	Y+1, r1	; 0x01
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <lcdWrite+0x3a>
	{
		lcdWriteChar( aBuffer[i] );
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	2b 81       	ldd	r18, Y+3	; 0x03
 2ac:	3c 81       	ldd	r19, Y+4	; 0x04
 2ae:	82 0f       	add	r24, r18
 2b0:	93 1f       	adc	r25, r19
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcdWriteChar>
  unsigned int aSize
  )
{
	int i;
	
	for( i = 0; i < aSize; i++ )
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	9a 81       	ldd	r25, Y+2	; 0x02
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	9a 83       	std	Y+2, r25	; 0x02
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	29 81       	ldd	r18, Y+1	; 0x01
 2c6:	3a 81       	ldd	r19, Y+2	; 0x02
 2c8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ca:	9e 81       	ldd	r25, Y+6	; 0x06
 2cc:	28 17       	cp	r18, r24
 2ce:	39 07       	cpc	r19, r25
 2d0:	50 f3       	brcs	.-44     	; 0x2a6 <lcdWrite+0x1c>
	{
		lcdWriteChar( aBuffer[i] );
	}
}
 2d2:	00 00       	nop
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <lcdWriteChar>:
    Writes a single character to the lcd display with the current position of the cursor.
  Parameters:
    aCharacter - A single character that should be sent to the lcd display
******************************************************************************************************/
lcdWriteChar( unsigned char aCharacter )
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	1f 92       	push	r1
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	89 83       	std	Y+1, r24	; 0x01
	lcdCheckBusy();
 2f2:	0e 94 4d 02 	call	0x49a	; 0x49a <lcdCheckBusy>
	LCD_PORT_RS |= ( 1 << LCD_RS );
 2f6:	82 e2       	ldi	r24, 0x22	; 34
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	22 e2       	ldi	r18, 0x22	; 34
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	20 61       	ori	r18, 0x10	; 16
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
	LCD_PORT_RW &= ~( 1 << LCD_RW );
 308:	82 e2       	ldi	r24, 0x22	; 34
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	22 e2       	ldi	r18, 0x22	; 34
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	2f 7d       	andi	r18, 0xDF	; 223
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18

	lcdOut4Bit( aCharacter );
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
	lcdOut4Bit( aCharacter << 4);
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	82 95       	swap	r24
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
}
 32a:	00 00       	nop
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <lcdClear>:
  Function: lcdClear
  Description:
    Clears the display and waits for a specific time.
******************************************************************************************************/
lcdClear()
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	lcdCommand( LCD_CLEAR_DISPLAY );
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 2b 02 	call	0x456	; 0x456 <lcdCommand>
	delayMs( LCD_CLEAR_DISPLAY_MS );
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
}
 34a:	00 00       	nop
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <lcdSetCursor>:
TBool
lcdSetCursor(
  unsigned char aColumn,
  unsigned char aRow
  )
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 d0       	rcall	.+0      	; 0x358 <lcdSetCursor+0x6>
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	8a 83       	std	Y+2, r24	; 0x02
 360:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char address;

	if( aRow == 1 )
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	21 f4       	brne	.+8      	; 0x370 <lcdSetCursor+0x1e>
		address = (LCD_DDADR_LINE1 + (aColumn - 1));
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	81 50       	subi	r24, 0x01	; 1
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	09 c0       	rjmp	.+18     	; 0x382 <lcdSetCursor+0x30>

	else if( aRow == 2 )
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	21 f4       	brne	.+8      	; 0x37e <lcdSetCursor+0x2c>
		address = (LCD_DDADR_LINE2 + (aColumn - 1));
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	81 5c       	subi	r24, 0xC1	; 193
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	02 c0       	rjmp	.+4      	; 0x382 <lcdSetCursor+0x30>
		
	else
		return EFALSE;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	05 c0       	rjmp	.+10     	; 0x38c <lcdSetCursor+0x3a>

	lcdCommand( address | LCD_SET_DDADR );
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	80 68       	ori	r24, 0x80	; 128
 386:	0e 94 2b 02 	call	0x456	; 0x456 <lcdCommand>

	return ETRUE;
 38a:	81 e0       	ldi	r24, 0x01	; 1
}
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <lcdOut4Bit>:
  Parameters:
    aByte - The upper 4 bits are written to the data lines.
******************************************************************************************************/
static void
lcdOut4Bit( unsigned char aByte )
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	1f 92       	push	r1
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	89 83       	std	Y+1, r24	; 0x01
	LCD_DDR_DATA |= ( 0xF << LCD_DB );
 3a4:	81 e2       	ldi	r24, 0x21	; 33
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	21 e2       	ldi	r18, 0x21	; 33
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	2f 60       	ori	r18, 0x0F	; 15
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
	LCD_PORT_RW	 &= ~( 1 << LCD_RW );
 3b6:	82 e2       	ldi	r24, 0x22	; 34
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	22 e2       	ldi	r18, 0x22	; 34
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	2f 7d       	andi	r18, 0xDF	; 223
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
	LCD_PORT_DATA &= ~( 0xF << LCD_DB );
 3c8:	82 e2       	ldi	r24, 0x22	; 34
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	22 e2       	ldi	r18, 0x22	; 34
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	20 7f       	andi	r18, 0xF0	; 240
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
	LCD_PORT_DATA |= (( aByte & 0xF0 ) >> ( 4 - LCD_DB ));
 3da:	82 e2       	ldi	r24, 0x22	; 34
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	22 e2       	ldi	r18, 0x22	; 34
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	30 81       	ld	r19, Z
 3e6:	29 81       	ldd	r18, Y+1	; 0x01
 3e8:	22 95       	swap	r18
 3ea:	2f 70       	andi	r18, 0x0F	; 15
 3ec:	23 2b       	or	r18, r19
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
	lcdEnable();
 3f2:	0e 94 00 02 	call	0x400	; 0x400 <lcdEnable>
}
 3f6:	00 00       	nop
 3f8:	0f 90       	pop	r0
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <lcdEnable>:
  Description:
    Writes an high impulse to the enable line for LCD_EN us. (Normally: 10us)
******************************************************************************************************/
static void
lcdEnable()
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
	LCD_PORT_EN &= ~( 1 << LCD_EN );
 408:	82 e2       	ldi	r24, 0x22	; 34
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	22 e2       	ldi	r18, 0x22	; 34
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	f9 01       	movw	r30, r18
 412:	20 81       	ld	r18, Z
 414:	2f 7b       	andi	r18, 0xBF	; 191
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
	delayUs( LCD_ENABLE_US );
 41a:	8a e0       	ldi	r24, 0x0A	; 10
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 95 00 	call	0x12a	; 0x12a <delayUs>
	LCD_PORT_EN |= ( 1 << LCD_EN );
 422:	82 e2       	ldi	r24, 0x22	; 34
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	22 e2       	ldi	r18, 0x22	; 34
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	20 64       	ori	r18, 0x40	; 64
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
	delayUs( LCD_ENABLE_US );
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 95 00 	call	0x12a	; 0x12a <delayUs>
	LCD_PORT_EN &= ~( 1 << LCD_EN );
 43c:	82 e2       	ldi	r24, 0x22	; 34
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	22 e2       	ldi	r18, 0x22	; 34
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	f9 01       	movw	r30, r18
 446:	20 81       	ld	r18, Z
 448:	2f 7b       	andi	r18, 0xBF	; 191
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
}
 44e:	00 00       	nop
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <lcdCommand>:
  Description:
    Send a command to the LCD-Display.
******************************************************************************************************/
static void
lcdCommand( unsigned char aCommand )
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	1f 92       	push	r1
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	89 83       	std	Y+1, r24	; 0x01
	lcdCheckBusy();
 462:	0e 94 4d 02 	call	0x49a	; 0x49a <lcdCheckBusy>
	
	LCD_PORT_RS &= ~( 1 << LCD_RS );
 466:	82 e2       	ldi	r24, 0x22	; 34
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	22 e2       	ldi	r18, 0x22	; 34
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	20 81       	ld	r18, Z
 472:	2f 7e       	andi	r18, 0xEF	; 239
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
	lcdOut4Bit( aCommand );
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
	lcdOut4Bit( aCommand << 4);
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	82 95       	swap	r24
 482:	80 7f       	andi	r24, 0xF0	; 240
 484:	0e 94 cc 01 	call	0x398	; 0x398 <lcdOut4Bit>
	
	delayUs( LCD_COMMAND_US );
 488:	8a e2       	ldi	r24, 0x2A	; 42
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 95 00 	call	0x12a	; 0x12a <delayUs>
}
 490:	00 00       	nop
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <lcdCheckBusy>:
  Description:
    Checks the busy flag in the status register of the LCD-Display.
******************************************************************************************************/
static void
lcdCheckBusy()
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <lcdCheckBusy+0x6>
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	unsigned int busyCounter = 0;
 4a4:	1a 82       	std	Y+2, r1	; 0x02
 4a6:	19 82       	std	Y+1, r1	; 0x01
	
	while( lcdReadBusyFlag() )
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <lcdCheckBusy+0x2c>
	{
		busyCounter++;
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	9a 83       	std	Y+2, r25	; 0x02
 4b2:	89 83       	std	Y+1, r24	; 0x01
		if( busyCounter > LCD_MAX_BUSY_COUNTER )
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	89 3e       	cpi	r24, 0xE9	; 233
 4ba:	93 40       	sbci	r25, 0x03	; 3
 4bc:	48 f4       	brcc	.+18     	; 0x4d0 <lcdCheckBusy+0x36>
			break;
		delayUs( 1 );
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 95 00 	call	0x12a	; 0x12a <delayUs>
static void
lcdCheckBusy()
{
	unsigned int busyCounter = 0;
	
	while( lcdReadBusyFlag() )
 4c6:	0e 94 6f 02 	call	0x4de	; 0x4de <lcdReadBusyFlag>
 4ca:	88 23       	and	r24, r24
 4cc:	71 f7       	brne	.-36     	; 0x4aa <lcdCheckBusy+0x10>
		busyCounter++;
		if( busyCounter > LCD_MAX_BUSY_COUNTER )
			break;
		delayUs( 1 );
	}
}
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <lcdCheckBusy+0x38>
	
	while( lcdReadBusyFlag() )
	{
		busyCounter++;
		if( busyCounter > LCD_MAX_BUSY_COUNTER )
			break;
 4d0:	00 00       	nop
		delayUs( 1 );
	}
}
 4d2:	00 00       	nop
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <lcdReadBusyFlag>:
  Description:
    Reads the busy flag from the status register.
******************************************************************************************************/
static TBool
lcdReadBusyFlag()
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	1f 92       	push	r1
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
	unsigned char statusRegister;
	
	statusRegister = lcdReadStatusRegister();
 4e8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <lcdReadStatusRegister>
 4ec:	89 83       	std	Y+1, r24	; 0x01
	
	return (( statusRegister & 0x80 ) != 0);
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	88 1f       	adc	r24, r24
 4f2:	88 27       	eor	r24, r24
 4f4:	88 1f       	adc	r24, r24
}
 4f6:	0f 90       	pop	r0
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <lcdReadStatusRegister>:
  Description:
    Reads the status register.
******************************************************************************************************/
static unsigned char
lcdReadStatusRegister()
{
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	1f 92       	push	r1
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
	unsigned char statusRegister;
	
	LCD_PORT_RS &= ~( 1 << LCD_RS );
 508:	82 e2       	ldi	r24, 0x22	; 34
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	22 e2       	ldi	r18, 0x22	; 34
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	2f 7e       	andi	r18, 0xEF	; 239
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
	statusRegister = lcdRead4();
 51a:	0e 94 a3 02 	call	0x546	; 0x546 <lcdRead4>
 51e:	89 83       	std	Y+1, r24	; 0x01
	statusRegister = statusRegister << 4;
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	82 95       	swap	r24
 524:	80 7f       	andi	r24, 0xF0	; 240
 526:	89 83       	std	Y+1, r24	; 0x01
	statusRegister |= ( lcdRead4() & 0xF );
 528:	0e 94 a3 02 	call	0x546	; 0x546 <lcdRead4>
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	99 27       	eor	r25, r25
 534:	98 2f       	mov	r25, r24
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	89 2b       	or	r24, r25
 53a:	89 83       	std	Y+1, r24	; 0x01
	return statusRegister;
 53c:	89 81       	ldd	r24, Y+1	; 0x01
}
 53e:	0f 90       	pop	r0
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <lcdRead4>:
  Description:
    Read 4 bit, stored in the lower nibble.
******************************************************************************************************/
static unsigned char
lcdRead4()
{
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	1f 92       	push	r1
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp;
	
	LCD_DDR_DATA &= ~( 0x0F << LCD_DB );
 550:	81 e2       	ldi	r24, 0x21	; 33
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	21 e2       	ldi	r18, 0x21	; 33
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	f9 01       	movw	r30, r18
 55a:	20 81       	ld	r18, Z
 55c:	20 7f       	andi	r18, 0xF0	; 240
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
	LCD_PORT_RW |= ( 1 << LCD_RW );
 562:	82 e2       	ldi	r24, 0x22	; 34
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	22 e2       	ldi	r18, 0x22	; 34
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	20 81       	ld	r18, Z
 56e:	20 62       	ori	r18, 0x20	; 32
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
	LCD_PORT_EN |= ( 1 << LCD_EN );
 574:	82 e2       	ldi	r24, 0x22	; 34
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	22 e2       	ldi	r18, 0x22	; 34
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	20 81       	ld	r18, Z
 580:	20 64       	ori	r18, 0x40	; 64
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
	delayUs( LCD_ENABLE_US );
 586:	8a e0       	ldi	r24, 0x0A	; 10
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 95 00 	call	0x12a	; 0x12a <delayUs>
	
	tmp = LCD_PIN_DATA;
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	fc 01       	movw	r30, r24
 594:	80 81       	ld	r24, Z
 596:	89 83       	std	Y+1, r24	; 0x01
	LCD_PORT_EN &= ~( 1 << LCD_EN );
 598:	82 e2       	ldi	r24, 0x22	; 34
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	22 e2       	ldi	r18, 0x22	; 34
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	2f 7b       	andi	r18, 0xBF	; 191
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
	
	tmp = ( tmp >> LCD_DB ) & 0xF;
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	8f 70       	andi	r24, 0x0F	; 15
 5ae:	89 83       	std	Y+1, r24	; 0x01
	LCD_DDR_DATA |= ( 0x0F << LCD_DB );
 5b0:	81 e2       	ldi	r24, 0x21	; 33
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	21 e2       	ldi	r18, 0x21	; 33
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	2f 60       	ori	r18, 0x0F	; 15
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
	
	return tmp;
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
 5c4:	0f 90       	pop	r0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <main>:
#include "LCD.h"
#include "HtlStddef.h"
#include "LcdConstants.h"

int main(void)
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <main+0x6>
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
	lcdInit();
 5d6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcdInit>
	
	delayMs(250);
 5da:	8a ef       	ldi	r24, 0xFA	; 250
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
	
	char* world = "UwU";
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	9a 83       	std	Y+2, r25	; 0x02
 5e8:	89 83       	std	Y+1, r24	; 0x01
	lcdSetCursor(1, 1);
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 a9 01 	call	0x352	; 0x352 <lcdSetCursor>
	delayMs(100);
 5f2:	84 e6       	ldi	r24, 0x64	; 100
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 55 00 	call	0xaa	; 0xaa <delayMs>
	lcdWrite(world, 3);
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	9a 81       	ldd	r25, Y+2	; 0x02
 5fe:	63 e0       	ldi	r22, 0x03	; 3
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	0e 94 45 01 	call	0x28a	; 0x28a <lcdWrite>
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <__muluhisi3>:
 614:	0e 94 15 03 	call	0x62a	; 0x62a <__umulhisi3>
 618:	a5 9f       	mul	r26, r21
 61a:	90 0d       	add	r25, r0
 61c:	b4 9f       	mul	r27, r20
 61e:	90 0d       	add	r25, r0
 620:	a4 9f       	mul	r26, r20
 622:	80 0d       	add	r24, r0
 624:	91 1d       	adc	r25, r1
 626:	11 24       	eor	r1, r1
 628:	08 95       	ret

0000062a <__umulhisi3>:
 62a:	a2 9f       	mul	r26, r18
 62c:	b0 01       	movw	r22, r0
 62e:	b3 9f       	mul	r27, r19
 630:	c0 01       	movw	r24, r0
 632:	a3 9f       	mul	r26, r19
 634:	70 0d       	add	r23, r0
 636:	81 1d       	adc	r24, r1
 638:	11 24       	eor	r1, r1
 63a:	91 1d       	adc	r25, r1
 63c:	b2 9f       	mul	r27, r18
 63e:	70 0d       	add	r23, r0
 640:	81 1d       	adc	r24, r1
 642:	11 24       	eor	r1, r1
 644:	91 1d       	adc	r25, r1
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
