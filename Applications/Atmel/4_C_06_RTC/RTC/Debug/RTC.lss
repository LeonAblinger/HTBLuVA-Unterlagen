
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00001bb8  00001c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001c6  008001c6  00001d12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ca  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d23  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e55  00000000  00000000  0000433d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00005194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b8  00000000  00000000  000057a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9c  00000000  00000000  0000615c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006df8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_20>
      54:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_28>
      74:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 eb       	ldi	r30, 0xB8	; 184
      90:	fb e1       	ldi	r31, 0x1B	; 27
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 3c       	cpi	r26, 0xC6	; 198
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a6 ec       	ldi	r26, 0xC6	; 198
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 3d       	cpi	r26, 0xDA	; 218
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 9a 07 	call	0xf34	; 0xf34 <main>
      b2:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <DelayMs>:
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	28 97       	sbiw	r28, 0x08	; 8
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
      ce:	98 87       	std	Y+8, r25	; 0x08
      d0:	8f 83       	std	Y+7, r24	; 0x07
      d2:	19 82       	std	Y+1, r1	; 0x01
      d4:	1a 82       	std	Y+2, r1	; 0x02
      d6:	1b 82       	std	Y+3, r1	; 0x03
      d8:	1c 82       	std	Y+4, r1	; 0x04
      da:	10 c0       	rjmp	.+32     	; 0xfc <DelayMs+0x42>
      dc:	8d 81       	ldd	r24, Y+5	; 0x05
      de:	9e 81       	ldd	r25, Y+6	; 0x06
      e0:	01 96       	adiw	r24, 0x01	; 1
      e2:	9e 83       	std	Y+6, r25	; 0x06
      e4:	8d 83       	std	Y+5, r24	; 0x05
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	9a 81       	ldd	r25, Y+2	; 0x02
      ea:	ab 81       	ldd	r26, Y+3	; 0x03
      ec:	bc 81       	ldd	r27, Y+4	; 0x04
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	a1 1d       	adc	r26, r1
      f2:	b1 1d       	adc	r27, r1
      f4:	89 83       	std	Y+1, r24	; 0x01
      f6:	9a 83       	std	Y+2, r25	; 0x02
      f8:	ab 83       	std	Y+3, r26	; 0x03
      fa:	bc 83       	std	Y+4, r27	; 0x04
      fc:	8f 81       	ldd	r24, Y+7	; 0x07
      fe:	98 85       	ldd	r25, Y+8	; 0x08
     100:	9c 01       	movw	r18, r24
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	86 e9       	ldi	r24, 0x96	; 150
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	dc 01       	movw	r26, r24
     10c:	0e 94 31 09 	call	0x1262	; 0x1262 <__muluhisi3>
     110:	9b 01       	movw	r18, r22
     112:	ac 01       	movw	r20, r24
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	9a 81       	ldd	r25, Y+2	; 0x02
     118:	ab 81       	ldd	r26, Y+3	; 0x03
     11a:	bc 81       	ldd	r27, Y+4	; 0x04
     11c:	82 17       	cp	r24, r18
     11e:	93 07       	cpc	r25, r19
     120:	a4 07       	cpc	r26, r20
     122:	b5 07       	cpc	r27, r21
     124:	d8 f2       	brcs	.-74     	; 0xdc <DelayMs+0x22>
     126:	00 00       	nop
     128:	28 96       	adiw	r28, 0x08	; 8
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <I2CInit>:
static TBool I2CReadByte(unsigned char * aBuffer);
static TBool I2CReadLastByte(unsigned char * aBuffer);

/*******************************************************************************************************************/

TBool I2CInit(unsigned int aBitrate, unsigned long aClkFrequency){
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	2b 97       	sbiw	r28, 0x0b	; 11
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	9f 83       	std	Y+7, r25	; 0x07
     150:	8e 83       	std	Y+6, r24	; 0x06
     152:	48 87       	std	Y+8, r20	; 0x08
     154:	59 87       	std	Y+9, r21	; 0x09
     156:	6a 87       	std	Y+10, r22	; 0x0a
     158:	7b 87       	std	Y+11, r23	; 0x0b
	unsigned char tws;
	unsigned long tmp;

	for(tws = 0; tws < sizeof(I2CPrescalerValues); tws++){
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	5a c0       	rjmp	.+180    	; 0x212 <I2CInit+0xd8>
		tmp =  ((aClkFrequency/aBitrate)-16)/(2*I2CPrescalerValues[tws]);
     15e:	8e 81       	ldd	r24, Y+6	; 0x06
     160:	9f 81       	ldd	r25, Y+7	; 0x07
     162:	9c 01       	movw	r18, r24
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	88 85       	ldd	r24, Y+8	; 0x08
     16a:	99 85       	ldd	r25, Y+9	; 0x09
     16c:	aa 85       	ldd	r26, Y+10	; 0x0a
     16e:	bb 85       	ldd	r27, Y+11	; 0x0b
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0e 94 0f 09 	call	0x121e	; 0x121e <__udivmodsi4>
     178:	da 01       	movw	r26, r20
     17a:	c9 01       	movw	r24, r18
     17c:	40 97       	sbiw	r24, 0x10	; 16
     17e:	a1 09       	sbc	r26, r1
     180:	b1 09       	sbc	r27, r1
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	22 2f       	mov	r18, r18
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	2a 5f       	subi	r18, 0xFA	; 250
     18a:	3e 4f       	sbci	r19, 0xFE	; 254
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	22 2f       	mov	r18, r18
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	22 0f       	add	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	03 2e       	mov	r0, r19
     19a:	00 0c       	add	r0, r0
     19c:	44 0b       	sbc	r20, r20
     19e:	55 0b       	sbc	r21, r21
     1a0:	bc 01       	movw	r22, r24
     1a2:	cd 01       	movw	r24, r26
     1a4:	0e 94 0f 09 	call	0x121e	; 0x121e <__udivmodsi4>
     1a8:	da 01       	movw	r26, r20
     1aa:	c9 01       	movw	r24, r18
     1ac:	8a 83       	std	Y+2, r24	; 0x02
     1ae:	9b 83       	std	Y+3, r25	; 0x03
     1b0:	ac 83       	std	Y+4, r26	; 0x04
     1b2:	bd 83       	std	Y+5, r27	; 0x05
		
		if(tmp < 256){
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	ac 81       	ldd	r26, Y+4	; 0x04
     1ba:	bd 81       	ldd	r27, Y+5	; 0x05
     1bc:	8f 3f       	cpi	r24, 0xFF	; 255
     1be:	91 05       	cpc	r25, r1
     1c0:	a1 05       	cpc	r26, r1
     1c2:	b1 05       	cpc	r27, r1
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <I2CInit+0x8e>
     1c6:	10 f5       	brcc	.+68     	; 0x20c <I2CInit+0xd2>
			PORTC |= (1 << PORTC0) | (1 << PORTC1);
     1c8:	88 e2       	ldi	r24, 0x28	; 40
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	28 e2       	ldi	r18, 0x28	; 40
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	20 81       	ld	r18, Z
     1d4:	23 60       	ori	r18, 0x03	; 3
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
			DDRC &= ~(1 << DDC0) & ~(1 << DDC1);
     1da:	87 e2       	ldi	r24, 0x27	; 39
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	27 e2       	ldi	r18, 0x27	; 39
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f9 01       	movw	r30, r18
     1e4:	20 81       	ld	r18, Z
     1e6:	2c 7f       	andi	r18, 0xFC	; 252
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
			TWSR |= (tmp <<TWPS0);
     1ec:	89 eb       	ldi	r24, 0xB9	; 185
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	29 eb       	ldi	r18, 0xB9	; 185
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	f9 01       	movw	r30, r18
     1f6:	30 81       	ld	r19, Z
     1f8:	2a 81       	ldd	r18, Y+2	; 0x02
     1fa:	23 2b       	or	r18, r19
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
			TWBR = aBitrate;
     200:	88 eb       	ldi	r24, 0xB8	; 184
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2e 81       	ldd	r18, Y+6	; 0x06
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
			break;
     20a:	07 c0       	rjmp	.+14     	; 0x21a <I2CInit+0xe0>

TBool I2CInit(unsigned int aBitrate, unsigned long aClkFrequency){
	unsigned char tws;
	unsigned long tmp;

	for(tws = 0; tws < sizeof(I2CPrescalerValues); tws++){
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	84 30       	cpi	r24, 0x04	; 4
     216:	08 f4       	brcc	.+2      	; 0x21a <I2CInit+0xe0>
     218:	a2 cf       	rjmp	.-188    	; 0x15e <I2CInit+0x24>
			TWBR = aBitrate;
			break;
		}
	}
	
	if(tmp >= 256){
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	9b 81       	ldd	r25, Y+3	; 0x03
     21e:	ac 81       	ldd	r26, Y+4	; 0x04
     220:	bd 81       	ldd	r27, Y+5	; 0x05
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	91 05       	cpc	r25, r1
     226:	a1 05       	cpc	r26, r1
     228:	b1 05       	cpc	r27, r1
     22a:	19 f0       	breq	.+6      	; 0x232 <I2CInit+0xf8>
     22c:	10 f0       	brcs	.+4      	; 0x232 <I2CInit+0xf8>
		return EFALSE;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	01 c0       	rjmp	.+2      	; 0x234 <I2CInit+0xfa>
	}
	
	return ETRUE;
     232:	81 e0       	ldi	r24, 0x01	; 1
}
     234:	2b 96       	adiw	r28, 0x0b	; 11
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <I2CWrite>:

/*******************************************************************************************************************/

TBool I2CWrite(unsigned char aSlaveAddress, unsigned char * aBuffer, unsigned int aSize){
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	27 97       	sbiw	r28, 0x07	; 7
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	8b 83       	std	Y+3, r24	; 0x03
     25c:	7d 83       	std	Y+5, r23	; 0x05
     25e:	6c 83       	std	Y+4, r22	; 0x04
     260:	5f 83       	std	Y+7, r21	; 0x07
     262:	4e 83       	std	Y+6, r20	; 0x06
	
	unsigned int i;
	
	if(!I2CStart()){
     264:	0e 94 c7 01 	call	0x38e	; 0x38e <I2CStart>
     268:	88 23       	and	r24, r24
     26a:	11 f4       	brne	.+4      	; 0x270 <I2CWrite+0x2a>
		return EFALSE;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	2c c0       	rjmp	.+88     	; 0x2c8 <I2CWrite+0x82>
	}
	
	if(!I2CSendAddress(aSlaveAddress & TW_WRITE)){
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	8e 7f       	andi	r24, 0xFE	; 254
     274:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2CSendAddress>
     278:	88 23       	and	r24, r24
     27a:	21 f4       	brne	.+8      	; 0x284 <I2CWrite+0x3e>
		I2CStop();
     27c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
		return EFALSE;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	22 c0       	rjmp	.+68     	; 0x2c8 <I2CWrite+0x82>
	}
	
	for(i = 0; i < aSize; i++){
     284:	1a 82       	std	Y+2, r1	; 0x02
     286:	19 82       	std	Y+1, r1	; 0x01
     288:	15 c0       	rjmp	.+42     	; 0x2b4 <I2CWrite+0x6e>
		
		if(!I2CSendByte(aBuffer[i])){
     28a:	2c 81       	ldd	r18, Y+4	; 0x04
     28c:	3d 81       	ldd	r19, Y+5	; 0x05
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	0e 94 3a 02 	call	0x474	; 0x474 <I2CSendByte>
     29e:	88 23       	and	r24, r24
     2a0:	21 f4       	brne	.+8      	; 0x2aa <I2CWrite+0x64>
			I2CStop();
     2a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
			return EFALSE;
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <I2CWrite+0x82>
	if(!I2CSendAddress(aSlaveAddress & TW_WRITE)){
		I2CStop();
		return EFALSE;
	}
	
	for(i = 0; i < aSize; i++){
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	9a 83       	std	Y+2, r25	; 0x02
     2b2:	89 83       	std	Y+1, r24	; 0x01
     2b4:	29 81       	ldd	r18, Y+1	; 0x01
     2b6:	3a 81       	ldd	r19, Y+2	; 0x02
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	9f 81       	ldd	r25, Y+7	; 0x07
     2bc:	28 17       	cp	r18, r24
     2be:	39 07       	cpc	r19, r25
     2c0:	20 f3       	brcs	.-56     	; 0x28a <I2CWrite+0x44>
			I2CStop();
			return EFALSE;
		}
	}
	
	I2CStop();
     2c2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
	
	return ETRUE;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
}
     2c8:	27 96       	adiw	r28, 0x07	; 7
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <I2CRead>:

/*******************************************************************************************************************/

TBool I2CRead(unsigned char aSlaveAddress, unsigned char * aBuffer, unsigned int aSize){
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	27 97       	sbiw	r28, 0x07	; 7
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	8b 83       	std	Y+3, r24	; 0x03
     2f0:	7d 83       	std	Y+5, r23	; 0x05
     2f2:	6c 83       	std	Y+4, r22	; 0x04
     2f4:	5f 83       	std	Y+7, r21	; 0x07
     2f6:	4e 83       	std	Y+6, r20	; 0x06
	unsigned int i;
	
	if(!I2CStart()){
     2f8:	0e 94 c7 01 	call	0x38e	; 0x38e <I2CStart>
     2fc:	88 23       	and	r24, r24
     2fe:	11 f4       	brne	.+4      	; 0x304 <I2CRead+0x2a>
		return EFALSE;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	3c c0       	rjmp	.+120    	; 0x37c <I2CRead+0xa2>
	}
	
	if(!I2CSendAddress(aSlaveAddress | TW_READ)){
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	81 60       	ori	r24, 0x01	; 1
     308:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2CSendAddress>
     30c:	88 23       	and	r24, r24
     30e:	21 f4       	brne	.+8      	; 0x318 <I2CRead+0x3e>
		I2CStop();
     310:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
		return EFALSE;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	32 c0       	rjmp	.+100    	; 0x37c <I2CRead+0xa2>
	}
	
	for(i = 0; i < aSize - 1; i++){
     318:	1a 82       	std	Y+2, r1	; 0x02
     31a:	19 82       	std	Y+1, r1	; 0x01
     31c:	13 c0       	rjmp	.+38     	; 0x344 <I2CRead+0x6a>
		if(!I2CReadByte(&aBuffer[i])){
     31e:	2c 81       	ldd	r18, Y+4	; 0x04
     320:	3d 81       	ldd	r19, Y+5	; 0x05
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <I2CReadByte>
     32e:	88 23       	and	r24, r24
     330:	21 f4       	brne	.+8      	; 0x33a <I2CRead+0x60>
			I2CStop();
     332:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
			return EFALSE;
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	21 c0       	rjmp	.+66     	; 0x37c <I2CRead+0xa2>
	if(!I2CSendAddress(aSlaveAddress | TW_READ)){
		I2CStop();
		return EFALSE;
	}
	
	for(i = 0; i < aSize - 1; i++){
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	8e 81       	ldd	r24, Y+6	; 0x06
     346:	9f 81       	ldd	r25, Y+7	; 0x07
     348:	9c 01       	movw	r18, r24
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	31 09       	sbc	r19, r1
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	82 17       	cp	r24, r18
     354:	93 07       	cpc	r25, r19
     356:	18 f3       	brcs	.-58     	; 0x31e <I2CRead+0x44>
			I2CStop();
			return EFALSE;
		}
	}
	
	if (!I2CReadLastByte(&aBuffer[aSize - 1])) {
     358:	8e 81       	ldd	r24, Y+6	; 0x06
     35a:	9f 81       	ldd	r25, Y+7	; 0x07
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	2c 81       	ldd	r18, Y+4	; 0x04
     360:	3d 81       	ldd	r19, Y+5	; 0x05
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
     366:	0e 94 90 02 	call	0x520	; 0x520 <I2CReadLastByte>
     36a:	88 23       	and	r24, r24
     36c:	21 f4       	brne	.+8      	; 0x376 <I2CRead+0x9c>
		I2CStop();
     36e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
		return EFALSE;
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	03 c0       	rjmp	.+6      	; 0x37c <I2CRead+0xa2>
	}
	
	I2CStop();
     376:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
	
	return ETRUE;
     37a:	81 e0       	ldi	r24, 0x01	; 1
}
     37c:	27 96       	adiw	r28, 0x07	; 7
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <I2CStart>:

/*******************************************************************************************************************/

static TBool I2CStart(void){
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     396:	8c eb       	ldi	r24, 0xBC	; 188
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	24 ea       	ldi	r18, 0xA4	; 164
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
	
	while(!(TWCR & (1 << TWINT)));
     3a0:	00 00       	nop
     3a2:	8c eb       	ldi	r24, 0xBC	; 188
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	88 23       	and	r24, r24
     3ac:	d4 f7       	brge	.-12     	; 0x3a2 <I2CStart+0x14>
	
	if((TWSR & TW_STATUS_MASK) != TW_START && (TWSR & TW_STATUS_MASK) != TW_REP_START){
     3ae:	89 eb       	ldi	r24, 0xB9	; 185
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	88 2f       	mov	r24, r24
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	88 7f       	andi	r24, 0xF8	; 248
     3bc:	99 27       	eor	r25, r25
     3be:	08 97       	sbiw	r24, 0x08	; 8
     3c0:	61 f0       	breq	.+24     	; 0x3da <I2CStart+0x4c>
     3c2:	89 eb       	ldi	r24, 0xB9	; 185
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 81       	ld	r24, Z
     3ca:	88 2f       	mov	r24, r24
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	88 7f       	andi	r24, 0xF8	; 248
     3d0:	99 27       	eor	r25, r25
     3d2:	40 97       	sbiw	r24, 0x10	; 16
     3d4:	11 f0       	breq	.+4      	; 0x3da <I2CStart+0x4c>
		return EFALSE;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <I2CStart+0x4e>
	}
	
	return ETRUE;
     3da:	81 e0       	ldi	r24, 0x01	; 1
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <I2CStop>:

/*******************************************************************************************************************/

static void I2CStop(void){
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     3ea:	8c eb       	ldi	r24, 0xBC	; 188
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	24 e9       	ldi	r18, 0x94	; 148
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
}
     3f4:	00 00       	nop
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <I2CSendAddress>:

/*******************************************************************************************************************/

static TBool I2CSendAddress(unsigned char aAddress) {
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	89 83       	std	Y+1, r24	; 0x01
	TWDR = aAddress;
     408:	8b eb       	ldi	r24, 0xBB	; 187
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	29 81       	ldd	r18, Y+1	; 0x01
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18

	TWCR = (1 << TWINT) | (1 << TWEN);
     412:	8c eb       	ldi	r24, 0xBC	; 188
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	24 e8       	ldi	r18, 0x84	; 132
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18

	while (!(TWCR & (1 << TWINT)));
     41c:	00 00       	nop
     41e:	8c eb       	ldi	r24, 0xBC	; 188
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	88 23       	and	r24, r24
     428:	d4 f7       	brge	.-12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

	if (aAddress & TW_READ) {
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	81 70       	andi	r24, 0x01	; 1
     432:	99 27       	eor	r25, r25
     434:	89 2b       	or	r24, r25
     436:	69 f0       	breq	.+26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		if ((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
     438:	89 eb       	ldi	r24, 0xB9	; 185
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	88 7f       	andi	r24, 0xF8	; 248
     446:	99 27       	eor	r25, r25
     448:	80 34       	cpi	r24, 0x40	; 64
     44a:	91 05       	cpc	r25, r1
     44c:	71 f0       	breq	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		return EFALSE;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0d c0       	rjmp	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		} else {
		if ((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)
     452:	89 eb       	ldi	r24, 0xB9	; 185
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	80 81       	ld	r24, Z
     45a:	88 2f       	mov	r24, r24
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	88 7f       	andi	r24, 0xF8	; 248
     460:	99 27       	eor	r25, r25
     462:	48 97       	sbiw	r24, 0x18	; 24
     464:	11 f0       	breq	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		return EFALSE;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	01 c0       	rjmp	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}

	return ETRUE;
     46a:	81 e0       	ldi	r24, 0x01	; 1
}
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <I2CSendByte>:

/*******************************************************************************************************************/

static TBool I2CSendByte(unsigned char aByte){
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
	TWDR = aByte;
     480:	8b eb       	ldi	r24, 0xBB	; 187
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	29 81       	ldd	r18, Y+1	; 0x01
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
	
	TWCR = (1 << TWINT) | (1 << TWEN);
     48a:	8c eb       	ldi	r24, 0xBC	; 188
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	24 e8       	ldi	r18, 0x84	; 132
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
	
	while(!(TWCR & (1 << TWINT)));
     494:	00 00       	nop
     496:	8c eb       	ldi	r24, 0xBC	; 188
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	88 23       	and	r24, r24
     4a0:	d4 f7       	brge	.-12     	; 0x496 <I2CSendByte+0x22>
	
	if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK){
     4a2:	89 eb       	ldi	r24, 0xB9	; 185
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	88 7f       	andi	r24, 0xF8	; 248
     4b0:	99 27       	eor	r25, r25
     4b2:	88 97       	sbiw	r24, 0x28	; 40
     4b4:	11 f0       	breq	.+4      	; 0x4ba <I2CSendByte+0x46>
		return EFALSE;
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <I2CSendByte+0x48>
	}
	
	return ETRUE;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
}
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <I2CReadByte>:

/*******************************************************************************************************************/

static TBool I2CReadByte(unsigned char * aBuffer){
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <I2CReadByte+0x6>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     4d2:	8c eb       	ldi	r24, 0xBC	; 188
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	24 ec       	ldi	r18, 0xC4	; 196
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
	
	while(!(TWCR & (1 << TWINT)));
     4dc:	00 00       	nop
     4de:	8c eb       	ldi	r24, 0xBC	; 188
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	fc 01       	movw	r30, r24
     4e4:	80 81       	ld	r24, Z
     4e6:	88 23       	and	r24, r24
     4e8:	d4 f7       	brge	.-12     	; 0x4de <I2CReadByte+0x1a>
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK){
     4ea:	89 eb       	ldi	r24, 0xB9	; 185
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	88 7f       	andi	r24, 0xF8	; 248
     4f8:	99 27       	eor	r25, r25
     4fa:	80 35       	cpi	r24, 0x50	; 80
     4fc:	91 05       	cpc	r25, r1
     4fe:	11 f0       	breq	.+4      	; 0x504 <I2CReadByte+0x40>
		return EFALSE;
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	09 c0       	rjmp	.+18     	; 0x516 <I2CReadByte+0x52>
	}
	
	*aBuffer = TWDR;
     504:	8b eb       	ldi	r24, 0xBB	; 187
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	20 81       	ld	r18, Z
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	
	return ETRUE;
     514:	81 e0       	ldi	r24, 0x01	; 1
}
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <I2CReadLastByte>:

/*******************************************************************************************************************/

static TBool I2CReadLastByte(unsigned char * aBuffer){
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <I2CReadLastByte+0x6>
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	9a 83       	std	Y+2, r25	; 0x02
     52c:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWINT) | (1 << TWEN);
     52e:	8c eb       	ldi	r24, 0xBC	; 188
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	24 e8       	ldi	r18, 0x84	; 132
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	
	while(!(TWCR & (1 << TWINT)));
     538:	00 00       	nop
     53a:	8c eb       	ldi	r24, 0xBC	; 188
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	fc 01       	movw	r30, r24
     540:	80 81       	ld	r24, Z
     542:	88 23       	and	r24, r24
     544:	d4 f7       	brge	.-12     	; 0x53a <I2CReadLastByte+0x1a>
	
	if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK){
     546:	89 eb       	ldi	r24, 0xB9	; 185
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	99 27       	eor	r25, r25
     556:	88 35       	cpi	r24, 0x58	; 88
     558:	91 05       	cpc	r25, r1
     55a:	11 f0       	breq	.+4      	; 0x560 <I2CReadLastByte+0x40>
		return EFALSE;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	09 c0       	rjmp	.+18     	; 0x572 <I2CReadLastByte+0x52>
	}
	
	*aBuffer = TWDR;
     560:	8b eb       	ldi	r24, 0xBB	; 187
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	20 81       	ld	r18, Z
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
	
	return ETRUE;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <initLog>:

TLogger Logger;

/*******************************************************************************************************************/

void initLog(void) {
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	memset(&Logger, 0, sizeof(Logger));
     584:	44 e0       	ldi	r20, 0x04	; 4
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	8a ec       	ldi	r24, 0xCA	; 202
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 88 0a 	call	0x1510	; 0x1510 <memset>
}
     594:	00 00       	nop
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <setLogFunction>:

/*******************************************************************************************************************/

void setLogFunction(TLoggerFunction aFunction, void* aUserData) {
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <setLogFunction+0x6>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <setLogFunction+0x8>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	7c 83       	std	Y+4, r23	; 0x04
     5ae:	6b 83       	std	Y+3, r22	; 0x03
	Logger.Function = aFunction;
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <Logger+0x1>
     5b8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <Logger>
	Logger.UserData = aUserData;
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <Logger+0x3>
     5c4:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Logger+0x2>
}
     5c8:	00 00       	nop
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <LogEvent_>:

/*******************************************************************************************************************/

void LogEvent_(const char* aFileName, const char* aFunctionName, unsigned int aLineNo, TLogLevel aLogLevel, const char* aMessage) {
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	60 97       	sbiw	r28, 0x10	; 16
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	99 87       	std	Y+9, r25	; 0x09
     5f2:	88 87       	std	Y+8, r24	; 0x08
     5f4:	7b 87       	std	Y+11, r23	; 0x0b
     5f6:	6a 87       	std	Y+10, r22	; 0x0a
     5f8:	5d 87       	std	Y+13, r21	; 0x0d
     5fa:	4c 87       	std	Y+12, r20	; 0x0c
     5fc:	2e 87       	std	Y+14, r18	; 0x0e
     5fe:	18 8b       	std	Y+16, r17	; 0x10
     600:	0f 87       	std	Y+15, r16	; 0x0f
	TLogEvent logEvent;

	if (!Logger.Function) {
     602:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <Logger>
     606:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <Logger+0x1>
     60a:	89 2b       	or	r24, r25
     60c:	61 f1       	breq	.+88     	; 0x666 <LogEvent_+0x8e>
		return;
	}

	memset(&logEvent, 0, sizeof(logEvent));
     60e:	47 e0       	ldi	r20, 0x07	; 7
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 88 0a 	call	0x1510	; 0x1510 <memset>

	logEvent.fileName = aFileName;
     61e:	88 85       	ldd	r24, Y+8	; 0x08
     620:	99 85       	ldd	r25, Y+9	; 0x09
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	89 83       	std	Y+1, r24	; 0x01
	logEvent.functionName = aFunctionName;
     626:	8a 85       	ldd	r24, Y+10	; 0x0a
     628:	9b 85       	ldd	r25, Y+11	; 0x0b
     62a:	9c 83       	std	Y+4, r25	; 0x04
     62c:	8b 83       	std	Y+3, r24	; 0x03
	logEvent.lineNo = aLineNo;
     62e:	8c 85       	ldd	r24, Y+12	; 0x0c
     630:	9d 85       	ldd	r25, Y+13	; 0x0d
     632:	9e 83       	std	Y+6, r25	; 0x06
     634:	8d 83       	std	Y+5, r24	; 0x05
	logEvent.logLevel = aLogLevel;
     636:	8e 85       	ldd	r24, Y+14	; 0x0e
     638:	8f 83       	std	Y+7, r24	; 0x07

	if (Logger.Function) {
     63a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <Logger>
     63e:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <Logger+0x1>
     642:	89 2b       	or	r24, r25
     644:	89 f0       	breq	.+34     	; 0x668 <LogEvent_+0x90>
		Logger.Function(&logEvent, Logger.UserData, aMessage);
     646:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <Logger>
     64a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <Logger+0x1>
     64e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Logger+0x2>
     652:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <Logger+0x3>
     656:	4f 85       	ldd	r20, Y+15	; 0x0f
     658:	58 89       	ldd	r21, Y+16	; 0x10
     65a:	bc 01       	movw	r22, r24
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	f9 01       	movw	r30, r18
     662:	09 95       	icall
     664:	01 c0       	rjmp	.+2      	; 0x668 <LogEvent_+0x90>

void LogEvent_(const char* aFileName, const char* aFunctionName, unsigned int aLineNo, TLogLevel aLogLevel, const char* aMessage) {
	TLogEvent logEvent;

	if (!Logger.Function) {
		return;
     666:	00 00       	nop
	logEvent.logLevel = aLogLevel;

	if (Logger.Function) {
		Logger.Function(&logEvent, Logger.UserData, aMessage);
	}
}
     668:	60 96       	adiw	r28, 0x10	; 16
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <RingBufferCreate>:
	unsigned char size;
};

/*******************************************************************************************************************/

TRingBuffer RingBufferCreate(unsigned char aSize) {
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <RingBufferCreate+0x6>
     684:	1f 92       	push	r1
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	8b 83       	std	Y+3, r24	; 0x03
	TRingBuffer ringBuffer;

	ringBuffer = (TRingBuffer)calloc(1, sizeof(struct RingBufferStruct));
     68c:	65 e0       	ldi	r22, 0x05	; 5
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 4b 09 	call	0x1296	; 0x1296 <calloc>
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01

	if (!ringBuffer)
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	89 2b       	or	r24, r25
     6a2:	19 f4       	brne	.+6      	; 0x6aa <RingBufferCreate+0x2c>
	return NULL;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	20 c0       	rjmp	.+64     	; 0x6ea <RingBufferCreate+0x6c>

	ringBuffer->buffer = (unsigned char*)malloc(aSize);
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 67 09 	call	0x12ce	; 0x12ce <malloc>
     6b4:	9c 01       	movw	r18, r24
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	fc 01       	movw	r30, r24
     6bc:	33 83       	std	Z+3, r19	; 0x03
     6be:	22 83       	std	Z+2, r18	; 0x02

	if (!ringBuffer->buffer) {
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	fc 01       	movw	r30, r24
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	93 81       	ldd	r25, Z+3	; 0x03
     6ca:	89 2b       	or	r24, r25
     6cc:	39 f4       	brne	.+14     	; 0x6dc <RingBufferCreate+0x5e>
		RingBufferDestroy(ringBuffer);
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <RingBufferDestroy>
		return NULL;
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	07 c0       	rjmp	.+14     	; 0x6ea <RingBufferCreate+0x6c>
	}

	ringBuffer->size = aSize;
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	2b 81       	ldd	r18, Y+3	; 0x03
     6e2:	fc 01       	movw	r30, r24
     6e4:	24 83       	std	Z+4, r18	; 0x04

	return ringBuffer;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <RingBufferDestroy>:

/*******************************************************************************************************************/

void RingBufferDestroy(TRingBuffer aRingBuffer) {
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <RingBufferDestroy+0x6>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
	if (!aRingBuffer)
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	9a 81       	ldd	r25, Y+2	; 0x02
     708:	89 2b       	or	r24, r25
     70a:	99 f0       	breq	.+38     	; 0x732 <RingBufferDestroy+0x3c>
	return;

	if (aRingBuffer->buffer)
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	82 81       	ldd	r24, Z+2	; 0x02
     714:	93 81       	ldd	r25, Z+3	; 0x03
     716:	89 2b       	or	r24, r25
     718:	39 f0       	breq	.+14     	; 0x728 <RingBufferDestroy+0x32>
	free(aRingBuffer->buffer);
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	fc 01       	movw	r30, r24
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	93 81       	ldd	r25, Z+3	; 0x03
     724:	0e 94 ff 09 	call	0x13fe	; 0x13fe <free>

	free(aRingBuffer);
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <free>
     730:	01 c0       	rjmp	.+2      	; 0x734 <RingBufferDestroy+0x3e>

/*******************************************************************************************************************/

void RingBufferDestroy(TRingBuffer aRingBuffer) {
	if (!aRingBuffer)
	return;
     732:	00 00       	nop

	if (aRingBuffer->buffer)
	free(aRingBuffer->buffer);

	free(aRingBuffer);
}
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <RingBufferWrite>:

/*******************************************************************************************************************/

TBool RingBufferWrite(TRingBuffer aRingBuffer, unsigned char aByte) {
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	00 d0       	rcall	.+0      	; 0x744 <RingBufferWrite+0x6>
     744:	00 d0       	rcall	.+0      	; 0x746 <RingBufferWrite+0x8>
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	9b 83       	std	Y+3, r25	; 0x03
     74c:	8a 83       	std	Y+2, r24	; 0x02
     74e:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char writeIndex = aRingBuffer->writeIndex;
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	9b 81       	ldd	r25, Y+3	; 0x03
     754:	fc 01       	movw	r30, r24
     756:	81 81       	ldd	r24, Z+1	; 0x01
     758:	89 83       	std	Y+1, r24	; 0x01

	writeIndex++;
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	89 83       	std	Y+1, r24	; 0x01
	if (writeIndex >= aRingBuffer->size)
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	9b 81       	ldd	r25, Y+3	; 0x03
     764:	fc 01       	movw	r30, r24
     766:	94 81       	ldd	r25, Z+4	; 0x04
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	89 17       	cp	r24, r25
     76c:	48 f0       	brcs	.+18     	; 0x780 <RingBufferWrite+0x42>
	
	if (writeIndex == aRingBuffer->readIndex)
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	9b 81       	ldd	r25, Y+3	; 0x03
     772:	fc 01       	movw	r30, r24
     774:	90 81       	ld	r25, Z
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	98 17       	cp	r25, r24
     77a:	11 f4       	brne	.+4      	; 0x780 <RingBufferWrite+0x42>
	return EFALSE;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	16 c0       	rjmp	.+44     	; 0x7ac <RingBufferWrite+0x6e>

	aRingBuffer->buffer[aRingBuffer->writeIndex] = aByte;
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	9b 81       	ldd	r25, Y+3	; 0x03
     784:	fc 01       	movw	r30, r24
     786:	22 81       	ldd	r18, Z+2	; 0x02
     788:	33 81       	ldd	r19, Z+3	; 0x03
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	9b 81       	ldd	r25, Y+3	; 0x03
     78e:	fc 01       	movw	r30, r24
     790:	81 81       	ldd	r24, Z+1	; 0x01
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	82 0f       	add	r24, r18
     798:	93 1f       	adc	r25, r19
     79a:	2c 81       	ldd	r18, Y+4	; 0x04
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
	aRingBuffer->writeIndex = writeIndex;
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	9b 81       	ldd	r25, Y+3	; 0x03
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	fc 01       	movw	r30, r24
     7a8:	21 83       	std	Z+1, r18	; 0x01

	return ETRUE;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
}
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <RingBufferRead>:

/*******************************************************************************************************************/

TBool RingBufferRead(TRingBuffer aRingBuffer, unsigned char* aByte) {
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <RingBufferRead+0x6>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <RingBufferRead+0x8>
     7c2:	1f 92       	push	r1
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	9b 83       	std	Y+3, r25	; 0x03
     7ca:	8a 83       	std	Y+2, r24	; 0x02
     7cc:	7d 83       	std	Y+5, r23	; 0x05
     7ce:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char readIndex = aRingBuffer->readIndex;
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	9b 81       	ldd	r25, Y+3	; 0x03
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	89 83       	std	Y+1, r24	; 0x01

	if (readIndex == aRingBuffer->writeIndex)
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	9b 81       	ldd	r25, Y+3	; 0x03
     7de:	fc 01       	movw	r30, r24
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	98 17       	cp	r25, r24
     7e6:	11 f4       	brne	.+4      	; 0x7ec <RingBufferRead+0x32>
	return EFALSE;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	24 c0       	rjmp	.+72     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>

	readIndex++;
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	89 83       	std	Y+1, r24	; 0x01
	if (readIndex >= aRingBuffer->size)
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	9b 81       	ldd	r25, Y+3	; 0x03
     7f6:	fc 01       	movw	r30, r24
     7f8:	94 81       	ldd	r25, Z+4	; 0x04
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	89 17       	cp	r24, r25
     7fe:	08 f0       	brcs	.+2      	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
	readIndex = 0;
     800:	19 82       	std	Y+1, r1	; 0x01

	*aByte = aRingBuffer->buffer[aRingBuffer->readIndex];
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	fc 01       	movw	r30, r24
     808:	22 81       	ldd	r18, Z+2	; 0x02
     80a:	33 81       	ldd	r19, Z+3	; 0x03
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9b 81       	ldd	r25, Y+3	; 0x03
     810:	fc 01       	movw	r30, r24
     812:	80 81       	ld	r24, Z
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	fc 01       	movw	r30, r24
     81e:	20 81       	ld	r18, Z
     820:	8c 81       	ldd	r24, Y+4	; 0x04
     822:	9d 81       	ldd	r25, Y+5	; 0x05
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
	aRingBuffer->readIndex = readIndex;
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	29 81       	ldd	r18, Y+1	; 0x01
     82e:	fc 01       	movw	r30, r24
     830:	20 83       	st	Z, r18

	return ETRUE;
     832:	81 e0       	ldi	r24, 0x01	; 1
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <Rs232InitCon0>:
			}else{
			break;
		}
	}
	return i;
}
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	29 97       	sbiw	r28, 0x09	; 9
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	4c 83       	std	Y+4, r20	; 0x04
     862:	5d 83       	std	Y+5, r21	; 0x05
     864:	6e 83       	std	Y+6, r22	; 0x06
     866:	7f 83       	std	Y+7, r23	; 0x07
     868:	39 87       	std	Y+9, r19	; 0x09
     86a:	28 87       	std	Y+8, r18	; 0x08
     86c:	80 ec       	ldi	r24, 0xC0	; 192
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	10 82       	st	Z, r1
     874:	81 ec       	ldi	r24, 0xC1	; 193
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	fc 01       	movw	r30, r24
     87a:	10 82       	st	Z, r1
     87c:	82 ec       	ldi	r24, 0xC2	; 194
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	fc 01       	movw	r30, r24
     882:	10 82       	st	Z, r1
     884:	04 ec       	ldi	r16, 0xC4	; 196
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	88 85       	ldd	r24, Y+8	; 0x08
     88a:	99 85       	ldd	r25, Y+9	; 0x09
     88c:	fc 01       	movw	r30, r24
     88e:	42 81       	ldd	r20, Z+2	; 0x02
     890:	53 81       	ldd	r21, Z+3	; 0x03
     892:	8c 81       	ldd	r24, Y+4	; 0x04
     894:	9d 81       	ldd	r25, Y+5	; 0x05
     896:	ae 81       	ldd	r26, Y+6	; 0x06
     898:	bf 81       	ldd	r27, Y+7	; 0x07
     89a:	9e 01       	movw	r18, r28
     89c:	2f 5f       	subi	r18, 0xFF	; 255
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Rs232CalculateBaudrateRegisterValue>
     8a8:	f8 01       	movw	r30, r16
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	80 83       	st	Z, r24
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	88 23       	and	r24, r24
     8b2:	49 f0       	breq	.+18     	; 0x8c6 <Rs232InitCon0+0x82>
     8b4:	80 ec       	ldi	r24, 0xC0	; 192
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	20 ec       	ldi	r18, 0xC0	; 192
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	f9 01       	movw	r30, r18
     8be:	20 81       	ld	r18, Z
     8c0:	22 60       	ori	r18, 0x02	; 2
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	82 ec       	ldi	r24, 0xC2	; 194
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	22 ec       	ldi	r18, 0xC2	; 194
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	26 60       	ori	r18, 0x06	; 6
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
     8d8:	81 ec       	ldi	r24, 0xC1	; 193
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	21 ec       	ldi	r18, 0xC1	; 193
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	28 69       	ori	r18, 0x98	; 152
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
     8ea:	00 00       	nop
     8ec:	29 96       	adiw	r28, 0x09	; 9
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <Rs232InitCon1>:
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	29 97       	sbiw	r28, 0x09	; 9
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	9b 83       	std	Y+3, r25	; 0x03
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	4c 83       	std	Y+4, r20	; 0x04
     920:	5d 83       	std	Y+5, r21	; 0x05
     922:	6e 83       	std	Y+6, r22	; 0x06
     924:	7f 83       	std	Y+7, r23	; 0x07
     926:	39 87       	std	Y+9, r19	; 0x09
     928:	28 87       	std	Y+8, r18	; 0x08
     92a:	88 ec       	ldi	r24, 0xC8	; 200
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	10 82       	st	Z, r1
     932:	89 ec       	ldi	r24, 0xC9	; 201
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	10 82       	st	Z, r1
     93a:	8a ec       	ldi	r24, 0xCA	; 202
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	fc 01       	movw	r30, r24
     940:	10 82       	st	Z, r1
     942:	04 ec       	ldi	r16, 0xC4	; 196
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	88 85       	ldd	r24, Y+8	; 0x08
     948:	99 85       	ldd	r25, Y+9	; 0x09
     94a:	fc 01       	movw	r30, r24
     94c:	42 81       	ldd	r20, Z+2	; 0x02
     94e:	53 81       	ldd	r21, Z+3	; 0x03
     950:	8c 81       	ldd	r24, Y+4	; 0x04
     952:	9d 81       	ldd	r25, Y+5	; 0x05
     954:	ae 81       	ldd	r26, Y+6	; 0x06
     956:	bf 81       	ldd	r27, Y+7	; 0x07
     958:	9e 01       	movw	r18, r28
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	bc 01       	movw	r22, r24
     960:	cd 01       	movw	r24, r26
     962:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Rs232CalculateBaudrateRegisterValue>
     966:	f8 01       	movw	r30, r16
     968:	91 83       	std	Z+1, r25	; 0x01
     96a:	80 83       	st	Z, r24
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	88 23       	and	r24, r24
     970:	49 f0       	breq	.+18     	; 0x984 <Rs232InitCon1+0x82>
     972:	88 ec       	ldi	r24, 0xC8	; 200
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	28 ec       	ldi	r18, 0xC8	; 200
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	22 60       	ori	r18, 0x02	; 2
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	8a ec       	ldi	r24, 0xCA	; 202
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2a ec       	ldi	r18, 0xCA	; 202
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	20 81       	ld	r18, Z
     990:	26 60       	ori	r18, 0x06	; 6
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
     996:	89 ec       	ldi	r24, 0xC9	; 201
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	29 ec       	ldi	r18, 0xC9	; 201
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	28 69       	ori	r18, 0x98	; 152
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
     9a8:	00 00       	nop
     9aa:	29 96       	adiw	r28, 0x09	; 9
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <Rs232CalculateBaudrateRegisterValue>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	2a 97       	sbiw	r28, 0x0a	; 10
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	6b 83       	std	Y+3, r22	; 0x03
     9d6:	7c 83       	std	Y+4, r23	; 0x04
     9d8:	8d 83       	std	Y+5, r24	; 0x05
     9da:	9e 83       	std	Y+6, r25	; 0x06
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	4f 83       	std	Y+7, r20	; 0x07
     9e0:	3a 87       	std	Y+10, r19	; 0x0a
     9e2:	29 87       	std	Y+9, r18	; 0x09
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e8:	fc 01       	movw	r30, r24
     9ea:	10 82       	st	Z, r1
     9ec:	8f 81       	ldd	r24, Y+7	; 0x07
     9ee:	98 85       	ldd	r25, Y+8	; 0x08
     9f0:	cc 01       	movw	r24, r24
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	aa 1f       	adc	r26, r26
     9fc:	bb 1f       	adc	r27, r27
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	aa 1f       	adc	r26, r26
     a04:	bb 1f       	adc	r27, r27
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	aa 1f       	adc	r26, r26
     a0c:	bb 1f       	adc	r27, r27
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	9c 01       	movw	r18, r24
     a18:	ad 01       	movw	r20, r26
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	9c 81       	ldd	r25, Y+4	; 0x04
     a1e:	ad 81       	ldd	r26, Y+5	; 0x05
     a20:	be 81       	ldd	r27, Y+6	; 0x06
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	0e 94 0f 09 	call	0x121e	; 0x121e <__udivmodsi4>
     a2a:	da 01       	movw	r26, r20
     a2c:	c9 01       	movw	r24, r18
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	90 41       	sbci	r25, 0x10	; 16
     a3c:	58 f0       	brcs	.+22     	; 0xa54 <Rs232CalculateBaudrateRegisterValue+0x94>
     a3e:	89 85       	ldd	r24, Y+9	; 0x09
     a40:	9a 85       	ldd	r25, Y+10	; 0x0a
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	9a 83       	std	Y+2, r25	; 0x02
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	2a 96       	adiw	r28, 0x0a	; 10
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <Rs232Create>:
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	2b 97       	sbiw	r28, 0x0b	; 11
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	8b 83       	std	Y+3, r24	; 0x03
     a84:	4c 83       	std	Y+4, r20	; 0x04
     a86:	5d 83       	std	Y+5, r21	; 0x05
     a88:	6e 83       	std	Y+6, r22	; 0x06
     a8a:	7f 83       	std	Y+7, r23	; 0x07
     a8c:	08 87       	std	Y+8, r16	; 0x08
     a8e:	19 87       	std	Y+9, r17	; 0x09
     a90:	2a 87       	std	Y+10, r18	; 0x0a
     a92:	3b 87       	std	Y+11, r19	; 0x0b
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	18 f0       	brcs	.+6      	; 0xaa0 <Rs232Create+0x36>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	86 c0       	rjmp	.+268    	; 0xbac <Rs232Create+0x142>
     aa0:	65 e0       	ldi	r22, 0x05	; 5
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 4b 09 	call	0x1296	; 0x1296 <calloc>
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	89 2b       	or	r24, r25
     ab6:	19 f4       	brne	.+6      	; 0xabe <Rs232Create+0x54>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	77 c0       	rjmp	.+238    	; 0xbac <Rs232Create+0x142>
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	2b 81       	ldd	r18, Y+3	; 0x03
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 83       	st	Z, r18
     ac8:	88 85       	ldd	r24, Y+8	; 0x08
     aca:	0e 94 3f 03 	call	0x67e	; 0x67e <RingBufferCreate>
     ace:	9c 01       	movw	r18, r24
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	9a 81       	ldd	r25, Y+2	; 0x02
     ad4:	fc 01       	movw	r30, r24
     ad6:	32 83       	std	Z+2, r19	; 0x02
     ad8:	21 83       	std	Z+1, r18	; 0x01
     ada:	89 85       	ldd	r24, Y+9	; 0x09
     adc:	0e 94 3f 03 	call	0x67e	; 0x67e <RingBufferCreate>
     ae0:	9c 01       	movw	r18, r24
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	fc 01       	movw	r30, r24
     ae8:	34 83       	std	Z+4, r19	; 0x04
     aea:	23 83       	std	Z+3, r18	; 0x03
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	fc 01       	movw	r30, r24
     af2:	81 81       	ldd	r24, Z+1	; 0x01
     af4:	92 81       	ldd	r25, Z+2	; 0x02
     af6:	89 2b       	or	r24, r25
     af8:	39 f0       	breq	.+14     	; 0xb08 <Rs232Create+0x9e>
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	fc 01       	movw	r30, r24
     b00:	83 81       	ldd	r24, Z+3	; 0x03
     b02:	94 81       	ldd	r25, Z+4	; 0x04
     b04:	89 2b       	or	r24, r25
     b06:	39 f4       	brne	.+14     	; 0xb16 <Rs232Create+0xac>
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Rs232Destroy>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	4b c0       	rjmp	.+150    	; 0xbac <Rs232Create+0x142>
     b16:	f8 94       	cli
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	79 f0       	breq	.+30     	; 0xb40 <Rs232Create+0xd6>
     b22:	9e 01       	movw	r18, r28
     b24:	28 5f       	subi	r18, 0xF8	; 248
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	8c 81       	ldd	r24, Y+4	; 0x04
     b2a:	9d 81       	ldd	r25, Y+5	; 0x05
     b2c:	ae 81       	ldd	r26, Y+6	; 0x06
     b2e:	bf 81       	ldd	r27, Y+7	; 0x07
     b30:	e9 81       	ldd	r30, Y+1	; 0x01
     b32:	fa 81       	ldd	r31, Y+2	; 0x02
     b34:	ac 01       	movw	r20, r24
     b36:	bd 01       	movw	r22, r26
     b38:	cf 01       	movw	r24, r30
     b3a:	0e 94 22 04 	call	0x844	; 0x844 <Rs232InitCon0>
     b3e:	0f c0       	rjmp	.+30     	; 0xb5e <Rs232Create+0xf4>
     b40:	9e 01       	movw	r18, r28
     b42:	28 5f       	subi	r18, 0xF8	; 248
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	8c 81       	ldd	r24, Y+4	; 0x04
     b48:	9d 81       	ldd	r25, Y+5	; 0x05
     b4a:	ae 81       	ldd	r26, Y+6	; 0x06
     b4c:	bf 81       	ldd	r27, Y+7	; 0x07
     b4e:	e9 81       	ldd	r30, Y+1	; 0x01
     b50:	fa 81       	ldd	r31, Y+2	; 0x02
     b52:	ac 01       	movw	r20, r24
     b54:	bd 01       	movw	r22, r26
     b56:	cf 01       	movw	r24, r30
     b58:	0e 94 81 04 	call	0x902	; 0x902 <Rs232InitCon1>
     b5c:	00 00       	nop
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	8a 53       	subi	r24, 0x3A	; 58
     b6a:	9e 4f       	sbci	r25, 0xFE	; 254
     b6c:	fc 01       	movw	r30, r24
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	89 2b       	or	r24, r25
     b74:	61 f0       	breq	.+24     	; 0xb8e <Rs232Create+0x124>
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	88 2f       	mov	r24, r24
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	8a 53       	subi	r24, 0x3A	; 58
     b82:	9e 4f       	sbci	r25, 0xFE	; 254
     b84:	fc 01       	movw	r30, r24
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Rs232Destroy>
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	8a 53       	subi	r24, 0x3A	; 58
     b9a:	9e 4f       	sbci	r25, 0xFE	; 254
     b9c:	29 81       	ldd	r18, Y+1	; 0x01
     b9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ba0:	fc 01       	movw	r30, r24
     ba2:	31 83       	std	Z+1, r19	; 0x01
     ba4:	20 83       	st	Z, r18
     ba6:	78 94       	sei
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	2b 96       	adiw	r28, 0x0b	; 11
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <Rs232Destroy>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <Rs232Destroy+0x6>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	89 2b       	or	r24, r25
     bd6:	09 f4       	brne	.+2      	; 0xbda <Rs232Destroy+0x18>
     bd8:	49 c0       	rjmp	.+146    	; 0xc6c <Rs232Destroy+0xaa>
     bda:	f8 94       	cli
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
     be0:	fc 01       	movw	r30, r24
     be2:	81 81       	ldd	r24, Z+1	; 0x01
     be4:	92 81       	ldd	r25, Z+2	; 0x02
     be6:	89 2b       	or	r24, r25
     be8:	39 f0       	breq	.+14     	; 0xbf8 <Rs232Destroy+0x36>
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	fc 01       	movw	r30, r24
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	92 81       	ldd	r25, Z+2	; 0x02
     bf4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <RingBufferDestroy>
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	fc 01       	movw	r30, r24
     bfe:	83 81       	ldd	r24, Z+3	; 0x03
     c00:	94 81       	ldd	r25, Z+4	; 0x04
     c02:	89 2b       	or	r24, r25
     c04:	39 f0       	breq	.+14     	; 0xc14 <Rs232Destroy+0x52>
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	fc 01       	movw	r30, r24
     c0c:	83 81       	ldd	r24, Z+3	; 0x03
     c0e:	94 81       	ldd	r25, Z+4	; 0x04
     c10:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <RingBufferDestroy>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	fc 01       	movw	r30, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	91 05       	cpc	r25, r1
     c24:	51 f0       	breq	.+20     	; 0xc3a <Rs232Destroy+0x78>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	91 05       	cpc	r25, r1
     c2a:	61 f0       	breq	.+24     	; 0xc44 <Rs232Destroy+0x82>
     c2c:	89 2b       	or	r24, r25
     c2e:	59 f4       	brne	.+22     	; 0xc46 <Rs232Destroy+0x84>
     c30:	81 ec       	ldi	r24, 0xC1	; 193
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	fc 01       	movw	r30, r24
     c36:	10 82       	st	Z, r1
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <Rs232Destroy+0x84>
     c3a:	89 ec       	ldi	r24, 0xC9	; 201
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	fc 01       	movw	r30, r24
     c40:	10 82       	st	Z, r1
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <Rs232Destroy+0x84>
     c44:	00 00       	nop
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	8a 53       	subi	r24, 0x3A	; 58
     c58:	9e 4f       	sbci	r25, 0xFE	; 254
     c5a:	fc 01       	movw	r30, r24
     c5c:	11 82       	std	Z+1, r1	; 0x01
     c5e:	10 82       	st	Z, r1
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	0e 94 ff 09 	call	0x13fe	; 0x13fe <free>
     c68:	78 94       	sei
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <Rs232Destroy+0xac>
     c6c:	00 00       	nop
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <Rs232SendData>:
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <Rs232SendData+0x6>
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <Rs232SendData+0x8>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <Rs232SendData+0xa>
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	8a 83       	std	Y+2, r24	; 0x02
     c8a:	7d 83       	std	Y+5, r23	; 0x05
     c8c:	6c 83       	std	Y+4, r22	; 0x04
     c8e:	4e 83       	std	Y+6, r20	; 0x06
     c90:	19 82       	std	Y+1, r1	; 0x01
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <Rs232SendData+0x48>
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	2c 81       	ldd	r18, Y+4	; 0x04
     c9c:	3d 81       	ldd	r19, Y+5	; 0x05
     c9e:	82 0f       	add	r24, r18
     ca0:	93 1f       	adc	r25, r19
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 81       	ld	r18, Z
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	9b 81       	ldd	r25, Y+3	; 0x03
     caa:	fc 01       	movw	r30, r24
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	92 81       	ldd	r25, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	0e 94 9f 03 	call	0x73e	; 0x73e <RingBufferWrite>
     cb6:	88 23       	and	r24, r24
     cb8:	41 f0       	breq	.+16     	; 0xcca <Rs232SendData+0x52>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	99 81       	ldd	r25, Y+1	; 0x01
     cc2:	8e 81       	ldd	r24, Y+6	; 0x06
     cc4:	98 17       	cp	r25, r24
     cc6:	30 f3       	brcs	.-52     	; 0xc94 <Rs232SendData+0x1c>
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <Rs232SendData+0x54>
     cca:	00 00       	nop
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	88 23       	and	r24, r24
     cd0:	f9 f0       	breq	.+62     	; 0xd10 <Rs232SendData+0x98>
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	fc 01       	movw	r30, r24
     cd8:	80 81       	ld	r24, Z
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	19 f0       	breq	.+6      	; 0xce8 <Rs232SendData+0x70>
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	59 f0       	breq	.+22     	; 0xcfc <Rs232SendData+0x84>
     ce6:	14 c0       	rjmp	.+40     	; 0xd10 <Rs232SendData+0x98>
     ce8:	81 ec       	ldi	r24, 0xC1	; 193
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	21 ec       	ldi	r18, 0xC1	; 193
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	f9 01       	movw	r30, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	20 62       	ori	r18, 0x20	; 32
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <Rs232SendData+0x98>
     cfc:	89 ec       	ldi	r24, 0xC9	; 201
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	29 ec       	ldi	r18, 0xC9	; 201
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	20 62       	ori	r18, 0x20	; 32
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
     d0e:	00 00       	nop
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	26 96       	adiw	r28, 0x06	; 6
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <__vector_21>:

/*******************************************************************************************************************/

ISR(USART0_UDRE_vect){
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	1f 92       	push	r1
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if(RingBufferRead(Rs232[ERS232_NO_0]->SendBuffer, &data))
     d52:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
     d56:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x1>
     d5a:	fc 01       	movw	r30, r24
     d5c:	81 81       	ldd	r24, Z+1	; 0x01
     d5e:	92 81       	ldd	r25, Z+2	; 0x02
     d60:	9e 01       	movw	r18, r28
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	b9 01       	movw	r22, r18
     d68:	0e 94 dd 03 	call	0x7ba	; 0x7ba <RingBufferRead>
     d6c:	88 23       	and	r24, r24
     d6e:	31 f0       	breq	.+12     	; 0xd7c <__vector_21+0x58>
	UDR0 = data;
     d70:	86 ec       	ldi	r24, 0xC6	; 198
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	29 81       	ldd	r18, Y+1	; 0x01
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
	else
	//disable Interrupt
	UCSR0B &= ~(1 << UDRIE0);
}
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__vector_21+0x6a>
	
	if(RingBufferRead(Rs232[ERS232_NO_0]->SendBuffer, &data))
	UDR0 = data;
	else
	//disable Interrupt
	UCSR0B &= ~(1 << UDRIE0);
     d7c:	81 ec       	ldi	r24, 0xC1	; 193
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	21 ec       	ldi	r18, 0xC1	; 193
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	f9 01       	movw	r30, r18
     d86:	20 81       	ld	r18, Z
     d88:	2f 7d       	andi	r18, 0xDF	; 223
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
}
     d8e:	00 00       	nop
     d90:	0f 90       	pop	r0
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_29>:

ISR(USART1_UDRE_vect){
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	1f 92       	push	r1
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if(RingBufferRead(Rs232[ERS232_NO_1]->SendBuffer, &data))
     de8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end+0x2>
     dec:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__data_end+0x3>
     df0:	fc 01       	movw	r30, r24
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	92 81       	ldd	r25, Z+2	; 0x02
     df6:	9e 01       	movw	r18, r28
     df8:	2f 5f       	subi	r18, 0xFF	; 255
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	b9 01       	movw	r22, r18
     dfe:	0e 94 dd 03 	call	0x7ba	; 0x7ba <RingBufferRead>
     e02:	88 23       	and	r24, r24
     e04:	31 f0       	breq	.+12     	; 0xe12 <__vector_29+0x58>
		UDR1 = data;
     e06:	8e ec       	ldi	r24, 0xCE	; 206
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	29 81       	ldd	r18, Y+1	; 0x01
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
	else
		//disable Interrupt
		UCSR1B &= ~(1 << UDRIE1);
}
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <__vector_29+0x6a>
	
	if(RingBufferRead(Rs232[ERS232_NO_1]->SendBuffer, &data))
		UDR1 = data;
	else
		//disable Interrupt
		UCSR1B &= ~(1 << UDRIE1);
     e12:	89 ec       	ldi	r24, 0xC9	; 201
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	29 ec       	ldi	r18, 0xC9	; 201
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	f9 01       	movw	r30, r18
     e1c:	20 81       	ld	r18, Z
     e1e:	2f 7d       	andi	r18, 0xDF	; 223
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
}
     e24:	00 00       	nop
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_20>:

ISR(USART0_RX_vect){
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	RingBufferWrite(Rs232[ERS232_NO_0]->RecieveBuffer, UDR0);
     e7c:	86 ec       	ldi	r24, 0xC6	; 198
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	20 81       	ld	r18, Z
     e84:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
     e88:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x1>
     e8c:	fc 01       	movw	r30, r24
     e8e:	83 81       	ldd	r24, Z+3	; 0x03
     e90:	94 81       	ldd	r25, Z+4	; 0x04
     e92:	62 2f       	mov	r22, r18
     e94:	0e 94 9f 03 	call	0x73e	; 0x73e <RingBufferWrite>
}
     e98:	00 00       	nop
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <__vector_28>:

ISR(USART1_RX_vect){
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	RingBufferWrite(Rs232[ERS232_NO_1]->RecieveBuffer, UDR1);
     eee:	8e ec       	ldi	r24, 0xCE	; 206
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 81       	ld	r18, Z
     ef6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end+0x2>
     efa:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__data_end+0x3>
     efe:	fc 01       	movw	r30, r24
     f00:	83 81       	ldd	r24, Z+3	; 0x03
     f02:	94 81       	ldd	r25, Z+4	; 0x04
     f04:	62 2f       	mov	r22, r18
     f06:	0e 94 9f 03 	call	0x73e	; 0x73e <RingBufferWrite>
}
     f0a:	00 00       	nop
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <main>:
Parameters: - none

Description: initializes the program -> creates Logger and calls testI2C_RTC() function
**********************************************************************************************************************/

int main(void) {
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	00 d0       	rcall	.+0      	; 0xf3a <main+0x6>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	initLog();
     f3e:	0e 94 be 02 	call	0x57c	; 0x57c <initLog>
	setLogFunction(logFunc, NULL);
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 ed       	ldi	r24, 0xD0	; 208
     f48:	97 e0       	ldi	r25, 0x07	; 7
     f4a:	0e 94 ce 02 	call	0x59c	; 0x59c <setLogFunction>

	int result = 0;
     f4e:	1a 82       	std	Y+2, r1	; 0x02
     f50:	19 82       	std	Y+1, r1	; 0x01
	result = testI2C();
     f52:	0e 94 3d 08 	call	0x107a	; 0x107a <testI2C>
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01

	return result;
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <custom_printf>:

Description: custom function to replace default printf() function. Sends data for printing over Rs232 interface

**********************************************************************************************************************/

int custom_printf(char character, FILE* file) {
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <custom_printf+0x6>
     f6e:	1f 92       	push	r1
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	7b 83       	std	Y+3, r23	; 0x03
     f78:	6a 83       	std	Y+2, r22	; 0x02
	Rs232SendData((TRs232)globalRS232, (unsigned char*)&character, 1);
     f7a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <globalRS232>
     f7e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <globalRS232+0x1>
     f82:	41 e0       	ldi	r20, 0x01	; 1
     f84:	9e 01       	movw	r18, r28
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	b9 01       	movw	r22, r18
     f8c:	0e 94 3c 06 	call	0xc78	; 0xc78 <Rs232SendData>
	return 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <logFunc>:

**********************************************************************************************************************/

void logFunc(const TLogEvent* logEvent,
const void* userData,
const char* message) {
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	28 97       	sbiw	r28, 0x08	; 8
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	7e 83       	std	Y+6, r23	; 0x06
     fba:	6d 83       	std	Y+5, r22	; 0x05
     fbc:	58 87       	std	Y+8, r21	; 0x08
     fbe:	4f 83       	std	Y+7, r20	; 0x07
	char* tag;

	switch (logEvent->logLevel) {
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	fc 01       	movw	r30, r24
     fc6:	86 81       	ldd	r24, Z+6	; 0x06
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	79 f0       	breq	.+30     	; 0xff0 <logFunc+0x50>
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	91 05       	cpc	r25, r1
     fd6:	89 f0       	breq	.+34     	; 0xffa <logFunc+0x5a>
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	29 f4       	brne	.+10     	; 0xfe6 <logFunc+0x46>
		case LOG_LEVEL_DEBUG:
		tag = "DEBUG:";
     fdc:	8a e0       	ldi	r24, 0x0A	; 10
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
		break;
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>

		default:
		case LOG_LEVEL_INFO:
		tag = "INFO:";
     fe6:	81 e1       	ldi	r24, 0x11	; 17
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
		break;
     fee:	0a c0       	rjmp	.+20     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>

		case LOG_LEVEL_WARNING:
		tag = "WARNING:";
     ff0:	87 e1       	ldi	r24, 0x17	; 23
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
		break;
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>

		case LOG_LEVEL_ERROR:
		tag = "ERROR:";
     ffa:	80 e2       	ldi	r24, 0x20	; 32
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
		break;
    1002:	00 00       	nop
	}

	printf("%s File: %s\n Function: %s\n Line: %u\n Message: %s\n", tag, logEvent->fileName,
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	fc 01       	movw	r30, r24
    100a:	44 81       	ldd	r20, Z+4	; 0x04
    100c:	55 81       	ldd	r21, Z+5	; 0x05
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	fc 01       	movw	r30, r24
    1014:	22 81       	ldd	r18, Z+2	; 0x02
    1016:	33 81       	ldd	r19, Z+3	; 0x03
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	68 85       	ldd	r22, Y+8	; 0x08
    1024:	6f 93       	push	r22
    1026:	6f 81       	ldd	r22, Y+7	; 0x07
    1028:	6f 93       	push	r22
    102a:	65 2f       	mov	r22, r21
    102c:	6f 93       	push	r22
    102e:	4f 93       	push	r20
    1030:	43 2f       	mov	r20, r19
    1032:	4f 93       	push	r20
    1034:	2f 93       	push	r18
    1036:	29 2f       	mov	r18, r25
    1038:	2f 93       	push	r18
    103a:	8f 93       	push	r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	8f 93       	push	r24
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	8f 93       	push	r24
    1044:	87 e2       	ldi	r24, 0x27	; 39
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	89 2f       	mov	r24, r25
    104a:	8f 93       	push	r24
    104c:	87 e2       	ldi	r24, 0x27	; 39
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	8f 93       	push	r24
    1052:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <printf>
    1056:	8d b7       	in	r24, 0x3d	; 61
    1058:	9e b7       	in	r25, 0x3e	; 62
    105a:	0c 96       	adiw	r24, 0x0c	; 12
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
	logEvent->functionName, logEvent->lineNo, message);
}
    1066:	00 00       	nop
    1068:	28 96       	adiw	r28, 0x08	; 8
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <testI2C>:
Parameters: - none

Description: reads the elapsed on-time of the Real-Time-Clock via the i2c bus

**********************************************************************************************************************/
int testI2C(void) {
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	6e 97       	sbiw	r28, 0x1e	; 30
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
	TRs232Config config;
	
	//set config
	config.SendBufferSize = 200;
    1092:	88 ec       	ldi	r24, 0xC8	; 200
    1094:	89 83       	std	Y+1, r24	; 0x01
	config.RecieveBufferSize = 20;
    1096:	84 e1       	ldi	r24, 0x14	; 20
    1098:	8a 83       	std	Y+2, r24	; 0x02
	config.BaudRate = (unsigned int)57600;
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	91 ee       	ldi	r25, 0xE1	; 225
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
	globalRS232 = Rs232Create(ERS232_NO_0, F_CPU, config);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	ab 81       	ldd	r26, Y+3	; 0x03
    10a8:	bc 81       	ldd	r27, Y+4	; 0x04
    10aa:	8c 01       	movw	r16, r24
    10ac:	9d 01       	movw	r18, r26
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	54 e2       	ldi	r21, 0x24	; 36
    10b2:	64 ef       	ldi	r22, 0xF4	; 244
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0e 94 35 05 	call	0xa6a	; 0xa6a <Rs232Create>
    10bc:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <globalRS232+0x1>
    10c0:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <globalRS232>

	fdevopen(custom_printf, NULL);
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	84 eb       	ldi	r24, 0xB4	; 180
    10ca:	97 e0       	ldi	r25, 0x07	; 7
    10cc:	0e 94 8f 0a 	call	0x151e	; 0x151e <fdevopen>
	
	//prepares/initializes i2c communication
	if (!I2CInit(1000UL, F_CPU)) {			//Bitrate = 100000UL | ClkFreq (F_CPU) = 16000000UL
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	54 e2       	ldi	r21, 0x24	; 36
    10d4:	64 ef       	ldi	r22, 0xF4	; 244
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	88 ee       	ldi	r24, 0xE8	; 232
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	0e 94 9d 00 	call	0x13a	; 0x13a <I2CInit>
    10e0:	88 23       	and	r24, r24
    10e2:	91 f4       	brne	.+36     	; 0x1108 <__stack+0x9>
		LogError("Initialization failed...");
    10e4:	09 e5       	ldi	r16, 0x59	; 89
    10e6:	11 e0       	ldi	r17, 0x01	; 1
    10e8:	24 e0       	ldi	r18, 0x04	; 4
    10ea:	4b e6       	ldi	r20, 0x6B	; 107
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	6d eb       	ldi	r22, 0xBD	; 189
    10f0:	71 e0       	ldi	r23, 0x01	; 1
    10f2:	82 e7       	ldi	r24, 0x72	; 114
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LogEvent_>
		DelayMs(500);
    10fa:	84 ef       	ldi	r24, 0xF4	; 244
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
		return -1;
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	9f ef       	ldi	r25, 0xFF	; 255
    1106:	80 c0       	rjmp	.+256    	; 0x1208 <__stack+0x109>
	}
	DelayMs(500);
    1108:	84 ef       	ldi	r24, 0xF4	; 244
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>

	unsigned char wakeupSignal[1] = {1};
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char timeData[5];
	unsigned char timeString[20];

	while (1) {
		//wakes the RTC up
		if (!I2CWrite(ADDRESS_PCF8583_WRITE, wakeupSignal, 1)) {
    1114:	ce 01       	movw	r24, r28
    1116:	05 96       	adiw	r24, 0x05	; 5
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	bc 01       	movw	r22, r24
    111e:	80 ea       	ldi	r24, 0xA0	; 160
    1120:	0e 94 23 01 	call	0x246	; 0x246 <I2CWrite>
    1124:	88 23       	and	r24, r24
    1126:	79 f4       	brne	.+30     	; 0x1146 <__stack+0x47>
			LogError("Writing failed...");
    1128:	05 e8       	ldi	r16, 0x85	; 133
    112a:	11 e0       	ldi	r17, 0x01	; 1
    112c:	24 e0       	ldi	r18, 0x04	; 4
    112e:	48 e7       	ldi	r20, 0x78	; 120
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	6d eb       	ldi	r22, 0xBD	; 189
    1134:	71 e0       	ldi	r23, 0x01	; 1
    1136:	82 e7       	ldi	r24, 0x72	; 114
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LogEvent_>
			DelayMs(500);
    113e:	84 ef       	ldi	r24, 0xF4	; 244
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
		}
		DelayMs(500);
    1146:	84 ef       	ldi	r24, 0xF4	; 244
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
		//reads the time elapsed until now
		if (!I2CRead(ADDRESS_PCF8583_READ, timeData, 5)) {
    114e:	ce 01       	movw	r24, r28
    1150:	06 96       	adiw	r24, 0x06	; 6
    1152:	45 e0       	ldi	r20, 0x05	; 5
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	bc 01       	movw	r22, r24
    1158:	81 ea       	ldi	r24, 0xA1	; 161
    115a:	0e 94 6d 01 	call	0x2da	; 0x2da <I2CRead>
    115e:	88 23       	and	r24, r24
    1160:	79 f4       	brne	.+30     	; 0x1180 <__stack+0x81>
			LogError("Reading failed...");
    1162:	07 e9       	ldi	r16, 0x97	; 151
    1164:	11 e0       	ldi	r17, 0x01	; 1
    1166:	24 e0       	ldi	r18, 0x04	; 4
    1168:	4e e7       	ldi	r20, 0x7E	; 126
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	6d eb       	ldi	r22, 0xBD	; 189
    116e:	71 e0       	ldi	r23, 0x01	; 1
    1170:	82 e7       	ldi	r24, 0x72	; 114
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LogEvent_>
			DelayMs(500);
    1178:	84 ef       	ldi	r24, 0xF4	; 244
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
		}
		DelayMs(500);
    1180:	84 ef       	ldi	r24, 0xF4	; 244
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>

		sprintf((char*)timeString, "%02x:%02x:%02x.%02x", timeData[3], timeData[2],
		timeData[1], timeData[0]);
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
			LogError("Reading failed...");
			DelayMs(500);
		}
		DelayMs(500);

		sprintf((char*)timeString, "%02x:%02x:%02x.%02x", timeData[3], timeData[2],
    118a:	68 2f       	mov	r22, r24
    118c:	70 e0       	ldi	r23, 0x00	; 0
		timeData[1], timeData[0]);
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
			LogError("Reading failed...");
			DelayMs(500);
		}
		DelayMs(500);

		sprintf((char*)timeString, "%02x:%02x:%02x.%02x", timeData[3], timeData[2],
    1190:	48 2f       	mov	r20, r24
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	88 85       	ldd	r24, Y+8	; 0x08
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	e7 2f       	mov	r30, r23
    11a2:	ef 93       	push	r30
    11a4:	6f 93       	push	r22
    11a6:	65 2f       	mov	r22, r21
    11a8:	6f 93       	push	r22
    11aa:	4f 93       	push	r20
    11ac:	43 2f       	mov	r20, r19
    11ae:	4f 93       	push	r20
    11b0:	2f 93       	push	r18
    11b2:	29 2f       	mov	r18, r25
    11b4:	2f 93       	push	r18
    11b6:	8f 93       	push	r24
    11b8:	89 ea       	ldi	r24, 0xA9	; 169
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	89 2f       	mov	r24, r25
    11be:	8f 93       	push	r24
    11c0:	89 ea       	ldi	r24, 0xA9	; 169
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	8f 93       	push	r24
    11c6:	ce 01       	movw	r24, r28
    11c8:	0b 96       	adiw	r24, 0x0b	; 11
    11ca:	29 2f       	mov	r18, r25
    11cc:	2f 93       	push	r18
    11ce:	8f 93       	push	r24
    11d0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <sprintf>
    11d4:	8d b7       	in	r24, 0x3d	; 61
    11d6:	9e b7       	in	r25, 0x3e	; 62
    11d8:	0c 96       	adiw	r24, 0x0c	; 12
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
		timeData[1], timeData[0]);

		timeString[19] = '\0';		//	"\0" = end of string (EOS)
    11e4:	1e 8e       	std	Y+30, r1	; 0x1e

		LogInfo((const char*)timeString);
    11e6:	ce 01       	movw	r24, r28
    11e8:	0b 96       	adiw	r24, 0x0b	; 11
    11ea:	8c 01       	movw	r16, r24
    11ec:	22 e0       	ldi	r18, 0x02	; 2
    11ee:	48 e8       	ldi	r20, 0x88	; 136
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	6d eb       	ldi	r22, 0xBD	; 189
    11f4:	71 e0       	ldi	r23, 0x01	; 1
    11f6:	82 e7       	ldi	r24, 0x72	; 114
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LogEvent_>
		DelayMs(500);
    11fe:	84 ef       	ldi	r24, 0xF4	; 244
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
	}
    1206:	86 cf       	rjmp	.-244    	; 0x1114 <__stack+0x15>

	Rs232Destroy(globalRS232);

	return 0;
}
    1208:	6e 96       	adiw	r28, 0x1e	; 30
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <__udivmodsi4>:
    121e:	a1 e2       	ldi	r26, 0x21	; 33
    1220:	1a 2e       	mov	r1, r26
    1222:	aa 1b       	sub	r26, r26
    1224:	bb 1b       	sub	r27, r27
    1226:	fd 01       	movw	r30, r26
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <__udivmodsi4_ep>

0000122a <__udivmodsi4_loop>:
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	ee 1f       	adc	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	a2 17       	cp	r26, r18
    1234:	b3 07       	cpc	r27, r19
    1236:	e4 07       	cpc	r30, r20
    1238:	f5 07       	cpc	r31, r21
    123a:	20 f0       	brcs	.+8      	; 0x1244 <__udivmodsi4_ep>
    123c:	a2 1b       	sub	r26, r18
    123e:	b3 0b       	sbc	r27, r19
    1240:	e4 0b       	sbc	r30, r20
    1242:	f5 0b       	sbc	r31, r21

00001244 <__udivmodsi4_ep>:
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	1a 94       	dec	r1
    124e:	69 f7       	brne	.-38     	; 0x122a <__udivmodsi4_loop>
    1250:	60 95       	com	r22
    1252:	70 95       	com	r23
    1254:	80 95       	com	r24
    1256:	90 95       	com	r25
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	bd 01       	movw	r22, r26
    125e:	cf 01       	movw	r24, r30
    1260:	08 95       	ret

00001262 <__muluhisi3>:
    1262:	0e 94 3c 09 	call	0x1278	; 0x1278 <__umulhisi3>
    1266:	a5 9f       	mul	r26, r21
    1268:	90 0d       	add	r25, r0
    126a:	b4 9f       	mul	r27, r20
    126c:	90 0d       	add	r25, r0
    126e:	a4 9f       	mul	r26, r20
    1270:	80 0d       	add	r24, r0
    1272:	91 1d       	adc	r25, r1
    1274:	11 24       	eor	r1, r1
    1276:	08 95       	ret

00001278 <__umulhisi3>:
    1278:	a2 9f       	mul	r26, r18
    127a:	b0 01       	movw	r22, r0
    127c:	b3 9f       	mul	r27, r19
    127e:	c0 01       	movw	r24, r0
    1280:	a3 9f       	mul	r26, r19
    1282:	70 0d       	add	r23, r0
    1284:	81 1d       	adc	r24, r1
    1286:	11 24       	eor	r1, r1
    1288:	91 1d       	adc	r25, r1
    128a:	b2 9f       	mul	r27, r18
    128c:	70 0d       	add	r23, r0
    128e:	81 1d       	adc	r24, r1
    1290:	11 24       	eor	r1, r1
    1292:	91 1d       	adc	r25, r1
    1294:	08 95       	ret

00001296 <calloc>:
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	86 9f       	mul	r24, r22
    12a0:	80 01       	movw	r16, r0
    12a2:	87 9f       	mul	r24, r23
    12a4:	10 0d       	add	r17, r0
    12a6:	96 9f       	mul	r25, r22
    12a8:	10 0d       	add	r17, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	c8 01       	movw	r24, r16
    12ae:	0e 94 67 09 	call	0x12ce	; 0x12ce <malloc>
    12b2:	ec 01       	movw	r28, r24
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <calloc+0x2c>
    12b8:	a8 01       	movw	r20, r16
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 88 0a 	call	0x1510	; 0x1510 <memset>
    12c2:	ce 01       	movw	r24, r28
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <malloc>:
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	91 05       	cpc	r25, r1
    12da:	10 f4       	brcc	.+4      	; 0x12e0 <malloc+0x12>
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <__flp>
    12e4:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <__flp+0x1>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	a0 e0       	ldi	r26, 0x00	; 0
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	30 97       	sbiw	r30, 0x00	; 0
    12f2:	19 f1       	breq	.+70     	; 0x133a <malloc+0x6c>
    12f4:	40 81       	ld	r20, Z
    12f6:	51 81       	ldd	r21, Z+1	; 0x01
    12f8:	02 81       	ldd	r16, Z+2	; 0x02
    12fa:	13 81       	ldd	r17, Z+3	; 0x03
    12fc:	48 17       	cp	r20, r24
    12fe:	59 07       	cpc	r21, r25
    1300:	c8 f0       	brcs	.+50     	; 0x1334 <malloc+0x66>
    1302:	84 17       	cp	r24, r20
    1304:	95 07       	cpc	r25, r21
    1306:	69 f4       	brne	.+26     	; 0x1322 <malloc+0x54>
    1308:	10 97       	sbiw	r26, 0x00	; 0
    130a:	31 f0       	breq	.+12     	; 0x1318 <malloc+0x4a>
    130c:	12 96       	adiw	r26, 0x02	; 2
    130e:	0c 93       	st	X, r16
    1310:	12 97       	sbiw	r26, 0x02	; 2
    1312:	13 96       	adiw	r26, 0x03	; 3
    1314:	1c 93       	st	X, r17
    1316:	27 c0       	rjmp	.+78     	; 0x1366 <malloc+0x98>
    1318:	00 93 d2 01 	sts	0x01D2, r16	; 0x8001d2 <__flp>
    131c:	10 93 d3 01 	sts	0x01D3, r17	; 0x8001d3 <__flp+0x1>
    1320:	22 c0       	rjmp	.+68     	; 0x1366 <malloc+0x98>
    1322:	21 15       	cp	r18, r1
    1324:	31 05       	cpc	r19, r1
    1326:	19 f0       	breq	.+6      	; 0x132e <malloc+0x60>
    1328:	42 17       	cp	r20, r18
    132a:	53 07       	cpc	r21, r19
    132c:	18 f4       	brcc	.+6      	; 0x1334 <malloc+0x66>
    132e:	9a 01       	movw	r18, r20
    1330:	bd 01       	movw	r22, r26
    1332:	ef 01       	movw	r28, r30
    1334:	df 01       	movw	r26, r30
    1336:	f8 01       	movw	r30, r16
    1338:	db cf       	rjmp	.-74     	; 0x12f0 <malloc+0x22>
    133a:	21 15       	cp	r18, r1
    133c:	31 05       	cpc	r19, r1
    133e:	f9 f0       	breq	.+62     	; 0x137e <malloc+0xb0>
    1340:	28 1b       	sub	r18, r24
    1342:	39 0b       	sbc	r19, r25
    1344:	24 30       	cpi	r18, 0x04	; 4
    1346:	31 05       	cpc	r19, r1
    1348:	80 f4       	brcc	.+32     	; 0x136a <malloc+0x9c>
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	61 15       	cp	r22, r1
    1350:	71 05       	cpc	r23, r1
    1352:	21 f0       	breq	.+8      	; 0x135c <malloc+0x8e>
    1354:	fb 01       	movw	r30, r22
    1356:	93 83       	std	Z+3, r25	; 0x03
    1358:	82 83       	std	Z+2, r24	; 0x02
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <malloc+0x96>
    135c:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <__flp+0x1>
    1360:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__flp>
    1364:	fe 01       	movw	r30, r28
    1366:	32 96       	adiw	r30, 0x02	; 2
    1368:	44 c0       	rjmp	.+136    	; 0x13f2 <malloc+0x124>
    136a:	fe 01       	movw	r30, r28
    136c:	e2 0f       	add	r30, r18
    136e:	f3 1f       	adc	r31, r19
    1370:	81 93       	st	Z+, r24
    1372:	91 93       	st	Z+, r25
    1374:	22 50       	subi	r18, 0x02	; 2
    1376:	31 09       	sbc	r19, r1
    1378:	39 83       	std	Y+1, r19	; 0x01
    137a:	28 83       	st	Y, r18
    137c:	3a c0       	rjmp	.+116    	; 0x13f2 <malloc+0x124>
    137e:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <__brkval>
    1382:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <__brkval+0x1>
    1386:	23 2b       	or	r18, r19
    1388:	41 f4       	brne	.+16     	; 0x139a <malloc+0xcc>
    138a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    138e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1392:	30 93 d1 01 	sts	0x01D1, r19	; 0x8001d1 <__brkval+0x1>
    1396:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <__brkval>
    139a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    139e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    13a2:	21 15       	cp	r18, r1
    13a4:	31 05       	cpc	r19, r1
    13a6:	41 f4       	brne	.+16     	; 0x13b8 <malloc+0xea>
    13a8:	2d b7       	in	r18, 0x3d	; 61
    13aa:	3e b7       	in	r19, 0x3e	; 62
    13ac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13b0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13b4:	24 1b       	sub	r18, r20
    13b6:	35 0b       	sbc	r19, r21
    13b8:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <__brkval>
    13bc:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <__brkval+0x1>
    13c0:	e2 17       	cp	r30, r18
    13c2:	f3 07       	cpc	r31, r19
    13c4:	a0 f4       	brcc	.+40     	; 0x13ee <malloc+0x120>
    13c6:	2e 1b       	sub	r18, r30
    13c8:	3f 0b       	sbc	r19, r31
    13ca:	28 17       	cp	r18, r24
    13cc:	39 07       	cpc	r19, r25
    13ce:	78 f0       	brcs	.+30     	; 0x13ee <malloc+0x120>
    13d0:	ac 01       	movw	r20, r24
    13d2:	4e 5f       	subi	r20, 0xFE	; 254
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	24 17       	cp	r18, r20
    13d8:	35 07       	cpc	r19, r21
    13da:	48 f0       	brcs	.+18     	; 0x13ee <malloc+0x120>
    13dc:	4e 0f       	add	r20, r30
    13de:	5f 1f       	adc	r21, r31
    13e0:	50 93 d1 01 	sts	0x01D1, r21	; 0x8001d1 <__brkval+0x1>
    13e4:	40 93 d0 01 	sts	0x01D0, r20	; 0x8001d0 <__brkval>
    13e8:	81 93       	st	Z+, r24
    13ea:	91 93       	st	Z+, r25
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <malloc+0x124>
    13ee:	e0 e0       	ldi	r30, 0x00	; 0
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	cf 01       	movw	r24, r30
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

000013fe <free>:
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	09 f4       	brne	.+2      	; 0x1408 <free+0xa>
    1406:	81 c0       	rjmp	.+258    	; 0x150a <free+0x10c>
    1408:	fc 01       	movw	r30, r24
    140a:	32 97       	sbiw	r30, 0x02	; 2
    140c:	13 82       	std	Z+3, r1	; 0x03
    140e:	12 82       	std	Z+2, r1	; 0x02
    1410:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <__flp>
    1414:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <__flp+0x1>
    1418:	10 97       	sbiw	r26, 0x00	; 0
    141a:	81 f4       	brne	.+32     	; 0x143c <free+0x3e>
    141c:	20 81       	ld	r18, Z
    141e:	31 81       	ldd	r19, Z+1	; 0x01
    1420:	82 0f       	add	r24, r18
    1422:	93 1f       	adc	r25, r19
    1424:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <__brkval>
    1428:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <__brkval+0x1>
    142c:	28 17       	cp	r18, r24
    142e:	39 07       	cpc	r19, r25
    1430:	51 f5       	brne	.+84     	; 0x1486 <free+0x88>
    1432:	f0 93 d1 01 	sts	0x01D1, r31	; 0x8001d1 <__brkval+0x1>
    1436:	e0 93 d0 01 	sts	0x01D0, r30	; 0x8001d0 <__brkval>
    143a:	67 c0       	rjmp	.+206    	; 0x150a <free+0x10c>
    143c:	ed 01       	movw	r28, r26
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	ce 17       	cp	r28, r30
    1444:	df 07       	cpc	r29, r31
    1446:	40 f4       	brcc	.+16     	; 0x1458 <free+0x5a>
    1448:	4a 81       	ldd	r20, Y+2	; 0x02
    144a:	5b 81       	ldd	r21, Y+3	; 0x03
    144c:	9e 01       	movw	r18, r28
    144e:	41 15       	cp	r20, r1
    1450:	51 05       	cpc	r21, r1
    1452:	f1 f0       	breq	.+60     	; 0x1490 <free+0x92>
    1454:	ea 01       	movw	r28, r20
    1456:	f5 cf       	rjmp	.-22     	; 0x1442 <free+0x44>
    1458:	d3 83       	std	Z+3, r29	; 0x03
    145a:	c2 83       	std	Z+2, r28	; 0x02
    145c:	40 81       	ld	r20, Z
    145e:	51 81       	ldd	r21, Z+1	; 0x01
    1460:	84 0f       	add	r24, r20
    1462:	95 1f       	adc	r25, r21
    1464:	c8 17       	cp	r28, r24
    1466:	d9 07       	cpc	r29, r25
    1468:	59 f4       	brne	.+22     	; 0x1480 <free+0x82>
    146a:	88 81       	ld	r24, Y
    146c:	99 81       	ldd	r25, Y+1	; 0x01
    146e:	84 0f       	add	r24, r20
    1470:	95 1f       	adc	r25, r21
    1472:	02 96       	adiw	r24, 0x02	; 2
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	9b 81       	ldd	r25, Y+3	; 0x03
    147c:	93 83       	std	Z+3, r25	; 0x03
    147e:	82 83       	std	Z+2, r24	; 0x02
    1480:	21 15       	cp	r18, r1
    1482:	31 05       	cpc	r19, r1
    1484:	29 f4       	brne	.+10     	; 0x1490 <free+0x92>
    1486:	f0 93 d3 01 	sts	0x01D3, r31	; 0x8001d3 <__flp+0x1>
    148a:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <__flp>
    148e:	3d c0       	rjmp	.+122    	; 0x150a <free+0x10c>
    1490:	e9 01       	movw	r28, r18
    1492:	fb 83       	std	Y+3, r31	; 0x03
    1494:	ea 83       	std	Y+2, r30	; 0x02
    1496:	49 91       	ld	r20, Y+
    1498:	59 91       	ld	r21, Y+
    149a:	c4 0f       	add	r28, r20
    149c:	d5 1f       	adc	r29, r21
    149e:	ec 17       	cp	r30, r28
    14a0:	fd 07       	cpc	r31, r29
    14a2:	61 f4       	brne	.+24     	; 0x14bc <free+0xbe>
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	84 0f       	add	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	02 96       	adiw	r24, 0x02	; 2
    14ae:	e9 01       	movw	r28, r18
    14b0:	99 83       	std	Y+1, r25	; 0x01
    14b2:	88 83       	st	Y, r24
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	9b 83       	std	Y+3, r25	; 0x03
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	e0 e0       	ldi	r30, 0x00	; 0
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	12 96       	adiw	r26, 0x02	; 2
    14c2:	8d 91       	ld	r24, X+
    14c4:	9c 91       	ld	r25, X
    14c6:	13 97       	sbiw	r26, 0x03	; 3
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <free+0xd4>
    14cc:	fd 01       	movw	r30, r26
    14ce:	dc 01       	movw	r26, r24
    14d0:	f7 cf       	rjmp	.-18     	; 0x14c0 <free+0xc2>
    14d2:	8d 91       	ld	r24, X+
    14d4:	9c 91       	ld	r25, X
    14d6:	11 97       	sbiw	r26, 0x01	; 1
    14d8:	9d 01       	movw	r18, r26
    14da:	2e 5f       	subi	r18, 0xFE	; 254
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <__brkval>
    14e6:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <__brkval+0x1>
    14ea:	28 17       	cp	r18, r24
    14ec:	39 07       	cpc	r19, r25
    14ee:	69 f4       	brne	.+26     	; 0x150a <free+0x10c>
    14f0:	30 97       	sbiw	r30, 0x00	; 0
    14f2:	29 f4       	brne	.+10     	; 0x14fe <free+0x100>
    14f4:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <__flp+0x1>
    14f8:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__flp>
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <free+0x104>
    14fe:	13 82       	std	Z+3, r1	; 0x03
    1500:	12 82       	std	Z+2, r1	; 0x02
    1502:	b0 93 d1 01 	sts	0x01D1, r27	; 0x8001d1 <__brkval+0x1>
    1506:	a0 93 d0 01 	sts	0x01D0, r26	; 0x8001d0 <__brkval>
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <memset>:
    1510:	dc 01       	movw	r26, r24
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <memset+0x6>
    1514:	6d 93       	st	X+, r22
    1516:	41 50       	subi	r20, 0x01	; 1
    1518:	50 40       	sbci	r21, 0x00	; 0
    151a:	e0 f7       	brcc	.-8      	; 0x1514 <memset+0x4>
    151c:	08 95       	ret

0000151e <fdevopen>:
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	31 f4       	brne	.+12     	; 0x1536 <fdevopen+0x18>
    152a:	61 15       	cp	r22, r1
    152c:	71 05       	cpc	r23, r1
    152e:	19 f4       	brne	.+6      	; 0x1536 <fdevopen+0x18>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	3a c0       	rjmp	.+116    	; 0x15aa <fdevopen+0x8c>
    1536:	8b 01       	movw	r16, r22
    1538:	ec 01       	movw	r28, r24
    153a:	6e e0       	ldi	r22, 0x0E	; 14
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 4b 09 	call	0x1296	; 0x1296 <calloc>
    1546:	fc 01       	movw	r30, r24
    1548:	89 2b       	or	r24, r25
    154a:	91 f3       	breq	.-28     	; 0x1530 <fdevopen+0x12>
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	83 83       	std	Z+3, r24	; 0x03
    1550:	01 15       	cp	r16, r1
    1552:	11 05       	cpc	r17, r1
    1554:	71 f0       	breq	.+28     	; 0x1572 <fdevopen+0x54>
    1556:	13 87       	std	Z+11, r17	; 0x0b
    1558:	02 87       	std	Z+10, r16	; 0x0a
    155a:	81 e8       	ldi	r24, 0x81	; 129
    155c:	83 83       	std	Z+3, r24	; 0x03
    155e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__iob>
    1562:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__iob+0x1>
    1566:	89 2b       	or	r24, r25
    1568:	21 f4       	brne	.+8      	; 0x1572 <fdevopen+0x54>
    156a:	f0 93 d5 01 	sts	0x01D5, r31	; 0x8001d5 <__iob+0x1>
    156e:	e0 93 d4 01 	sts	0x01D4, r30	; 0x8001d4 <__iob>
    1572:	20 97       	sbiw	r28, 0x00	; 0
    1574:	c9 f0       	breq	.+50     	; 0x15a8 <fdevopen+0x8a>
    1576:	d1 87       	std	Z+9, r29	; 0x09
    1578:	c0 87       	std	Z+8, r28	; 0x08
    157a:	83 81       	ldd	r24, Z+3	; 0x03
    157c:	82 60       	ori	r24, 0x02	; 2
    157e:	83 83       	std	Z+3, r24	; 0x03
    1580:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__iob+0x2>
    1584:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__iob+0x3>
    1588:	89 2b       	or	r24, r25
    158a:	71 f4       	brne	.+28     	; 0x15a8 <fdevopen+0x8a>
    158c:	f0 93 d7 01 	sts	0x01D7, r31	; 0x8001d7 <__iob+0x3>
    1590:	e0 93 d6 01 	sts	0x01D6, r30	; 0x8001d6 <__iob+0x2>
    1594:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__iob+0x4>
    1598:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <__iob+0x5>
    159c:	89 2b       	or	r24, r25
    159e:	21 f4       	brne	.+8      	; 0x15a8 <fdevopen+0x8a>
    15a0:	f0 93 d9 01 	sts	0x01D9, r31	; 0x8001d9 <__iob+0x5>
    15a4:	e0 93 d8 01 	sts	0x01D8, r30	; 0x8001d8 <__iob+0x4>
    15a8:	cf 01       	movw	r24, r30
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <printf>:
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e0 ee       	ldi	r30, 0xE0	; 224
    15ba:	fa e0       	ldi	r31, 0x0A	; 10
    15bc:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__prologue_saves__+0x20>
    15c0:	ae 01       	movw	r20, r28
    15c2:	4b 5f       	subi	r20, 0xFB	; 251
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	fa 01       	movw	r30, r20
    15c8:	61 91       	ld	r22, Z+
    15ca:	71 91       	ld	r23, Z+
    15cc:	af 01       	movw	r20, r30
    15ce:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__iob+0x2>
    15d2:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__iob+0x3>
    15d6:	0e 94 12 0b 	call	0x1624	; 0x1624 <vfprintf>
    15da:	e2 e0       	ldi	r30, 0x02	; 2
    15dc:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__epilogue_restores__+0x20>

000015e0 <sprintf>:
    15e0:	ae e0       	ldi	r26, 0x0E	; 14
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 ef       	ldi	r30, 0xF6	; 246
    15e6:	fa e0       	ldi	r31, 0x0A	; 10
    15e8:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__prologue_saves__+0x1c>
    15ec:	0d 89       	ldd	r16, Y+21	; 0x15
    15ee:	1e 89       	ldd	r17, Y+22	; 0x16
    15f0:	86 e0       	ldi	r24, 0x06	; 6
    15f2:	8c 83       	std	Y+4, r24	; 0x04
    15f4:	1a 83       	std	Y+2, r17	; 0x02
    15f6:	09 83       	std	Y+1, r16	; 0x01
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f e7       	ldi	r25, 0x7F	; 127
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	ae 01       	movw	r20, r28
    1602:	47 5e       	subi	r20, 0xE7	; 231
    1604:	5f 4f       	sbci	r21, 0xFF	; 255
    1606:	6f 89       	ldd	r22, Y+23	; 0x17
    1608:	78 8d       	ldd	r23, Y+24	; 0x18
    160a:	ce 01       	movw	r24, r28
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	0e 94 12 0b 	call	0x1624	; 0x1624 <vfprintf>
    1612:	ef 81       	ldd	r30, Y+7	; 0x07
    1614:	f8 85       	ldd	r31, Y+8	; 0x08
    1616:	e0 0f       	add	r30, r16
    1618:	f1 1f       	adc	r31, r17
    161a:	10 82       	st	Z, r1
    161c:	2e 96       	adiw	r28, 0x0e	; 14
    161e:	e4 e0       	ldi	r30, 0x04	; 4
    1620:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <__epilogue_restores__+0x1c>

00001624 <vfprintf>:
    1624:	ab e0       	ldi	r26, 0x0B	; 11
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e1       	ldi	r30, 0x18	; 24
    162a:	fb e0       	ldi	r31, 0x0B	; 11
    162c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__prologue_saves__>
    1630:	6c 01       	movw	r12, r24
    1632:	7b 01       	movw	r14, r22
    1634:	8a 01       	movw	r16, r20
    1636:	fc 01       	movw	r30, r24
    1638:	17 82       	std	Z+7, r1	; 0x07
    163a:	16 82       	std	Z+6, r1	; 0x06
    163c:	83 81       	ldd	r24, Z+3	; 0x03
    163e:	81 ff       	sbrs	r24, 1
    1640:	cc c1       	rjmp	.+920    	; 0x19da <vfprintf+0x3b6>
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	3c 01       	movw	r6, r24
    1648:	f6 01       	movw	r30, r12
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	f7 01       	movw	r30, r14
    164e:	93 fd       	sbrc	r25, 3
    1650:	85 91       	lpm	r24, Z+
    1652:	93 ff       	sbrs	r25, 3
    1654:	81 91       	ld	r24, Z+
    1656:	7f 01       	movw	r14, r30
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <vfprintf+0x3a>
    165c:	ba c1       	rjmp	.+884    	; 0x19d2 <vfprintf+0x3ae>
    165e:	85 32       	cpi	r24, 0x25	; 37
    1660:	39 f4       	brne	.+14     	; 0x1670 <vfprintf+0x4c>
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	7f 01       	movw	r14, r30
    166c:	85 32       	cpi	r24, 0x25	; 37
    166e:	29 f4       	brne	.+10     	; 0x167a <vfprintf+0x56>
    1670:	b6 01       	movw	r22, r12
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    1678:	e7 cf       	rjmp	.-50     	; 0x1648 <vfprintf+0x24>
    167a:	91 2c       	mov	r9, r1
    167c:	21 2c       	mov	r2, r1
    167e:	31 2c       	mov	r3, r1
    1680:	ff e1       	ldi	r31, 0x1F	; 31
    1682:	f3 15       	cp	r31, r3
    1684:	d8 f0       	brcs	.+54     	; 0x16bc <vfprintf+0x98>
    1686:	8b 32       	cpi	r24, 0x2B	; 43
    1688:	79 f0       	breq	.+30     	; 0x16a8 <vfprintf+0x84>
    168a:	38 f4       	brcc	.+14     	; 0x169a <vfprintf+0x76>
    168c:	80 32       	cpi	r24, 0x20	; 32
    168e:	79 f0       	breq	.+30     	; 0x16ae <vfprintf+0x8a>
    1690:	83 32       	cpi	r24, 0x23	; 35
    1692:	a1 f4       	brne	.+40     	; 0x16bc <vfprintf+0x98>
    1694:	23 2d       	mov	r18, r3
    1696:	20 61       	ori	r18, 0x10	; 16
    1698:	1d c0       	rjmp	.+58     	; 0x16d4 <vfprintf+0xb0>
    169a:	8d 32       	cpi	r24, 0x2D	; 45
    169c:	61 f0       	breq	.+24     	; 0x16b6 <vfprintf+0x92>
    169e:	80 33       	cpi	r24, 0x30	; 48
    16a0:	69 f4       	brne	.+26     	; 0x16bc <vfprintf+0x98>
    16a2:	23 2d       	mov	r18, r3
    16a4:	21 60       	ori	r18, 0x01	; 1
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <vfprintf+0xb0>
    16a8:	83 2d       	mov	r24, r3
    16aa:	82 60       	ori	r24, 0x02	; 2
    16ac:	38 2e       	mov	r3, r24
    16ae:	e3 2d       	mov	r30, r3
    16b0:	e4 60       	ori	r30, 0x04	; 4
    16b2:	3e 2e       	mov	r3, r30
    16b4:	2a c0       	rjmp	.+84     	; 0x170a <vfprintf+0xe6>
    16b6:	f3 2d       	mov	r31, r3
    16b8:	f8 60       	ori	r31, 0x08	; 8
    16ba:	1d c0       	rjmp	.+58     	; 0x16f6 <vfprintf+0xd2>
    16bc:	37 fc       	sbrc	r3, 7
    16be:	2d c0       	rjmp	.+90     	; 0x171a <vfprintf+0xf6>
    16c0:	20 ed       	ldi	r18, 0xD0	; 208
    16c2:	28 0f       	add	r18, r24
    16c4:	2a 30       	cpi	r18, 0x0A	; 10
    16c6:	40 f0       	brcs	.+16     	; 0x16d8 <vfprintf+0xb4>
    16c8:	8e 32       	cpi	r24, 0x2E	; 46
    16ca:	b9 f4       	brne	.+46     	; 0x16fa <vfprintf+0xd6>
    16cc:	36 fc       	sbrc	r3, 6
    16ce:	81 c1       	rjmp	.+770    	; 0x19d2 <vfprintf+0x3ae>
    16d0:	23 2d       	mov	r18, r3
    16d2:	20 64       	ori	r18, 0x40	; 64
    16d4:	32 2e       	mov	r3, r18
    16d6:	19 c0       	rjmp	.+50     	; 0x170a <vfprintf+0xe6>
    16d8:	36 fe       	sbrs	r3, 6
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0xc4>
    16dc:	8a e0       	ldi	r24, 0x0A	; 10
    16de:	98 9e       	mul	r9, r24
    16e0:	20 0d       	add	r18, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	92 2e       	mov	r9, r18
    16e6:	11 c0       	rjmp	.+34     	; 0x170a <vfprintf+0xe6>
    16e8:	ea e0       	ldi	r30, 0x0A	; 10
    16ea:	2e 9e       	mul	r2, r30
    16ec:	20 0d       	add	r18, r0
    16ee:	11 24       	eor	r1, r1
    16f0:	22 2e       	mov	r2, r18
    16f2:	f3 2d       	mov	r31, r3
    16f4:	f0 62       	ori	r31, 0x20	; 32
    16f6:	3f 2e       	mov	r3, r31
    16f8:	08 c0       	rjmp	.+16     	; 0x170a <vfprintf+0xe6>
    16fa:	8c 36       	cpi	r24, 0x6C	; 108
    16fc:	21 f4       	brne	.+8      	; 0x1706 <vfprintf+0xe2>
    16fe:	83 2d       	mov	r24, r3
    1700:	80 68       	ori	r24, 0x80	; 128
    1702:	38 2e       	mov	r3, r24
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0xe6>
    1706:	88 36       	cpi	r24, 0x68	; 104
    1708:	41 f4       	brne	.+16     	; 0x171a <vfprintf+0xf6>
    170a:	f7 01       	movw	r30, r14
    170c:	93 fd       	sbrc	r25, 3
    170e:	85 91       	lpm	r24, Z+
    1710:	93 ff       	sbrs	r25, 3
    1712:	81 91       	ld	r24, Z+
    1714:	7f 01       	movw	r14, r30
    1716:	81 11       	cpse	r24, r1
    1718:	b3 cf       	rjmp	.-154    	; 0x1680 <vfprintf+0x5c>
    171a:	98 2f       	mov	r25, r24
    171c:	9f 7d       	andi	r25, 0xDF	; 223
    171e:	95 54       	subi	r25, 0x45	; 69
    1720:	93 30       	cpi	r25, 0x03	; 3
    1722:	28 f4       	brcc	.+10     	; 0x172e <vfprintf+0x10a>
    1724:	0c 5f       	subi	r16, 0xFC	; 252
    1726:	1f 4f       	sbci	r17, 0xFF	; 255
    1728:	9f e3       	ldi	r25, 0x3F	; 63
    172a:	99 83       	std	Y+1, r25	; 0x01
    172c:	0d c0       	rjmp	.+26     	; 0x1748 <vfprintf+0x124>
    172e:	83 36       	cpi	r24, 0x63	; 99
    1730:	31 f0       	breq	.+12     	; 0x173e <vfprintf+0x11a>
    1732:	83 37       	cpi	r24, 0x73	; 115
    1734:	71 f0       	breq	.+28     	; 0x1752 <vfprintf+0x12e>
    1736:	83 35       	cpi	r24, 0x53	; 83
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x118>
    173a:	59 c0       	rjmp	.+178    	; 0x17ee <vfprintf+0x1ca>
    173c:	21 c0       	rjmp	.+66     	; 0x1780 <vfprintf+0x15c>
    173e:	f8 01       	movw	r30, r16
    1740:	80 81       	ld	r24, Z
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	0e 5f       	subi	r16, 0xFE	; 254
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	88 24       	eor	r8, r8
    174a:	83 94       	inc	r8
    174c:	91 2c       	mov	r9, r1
    174e:	53 01       	movw	r10, r6
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <vfprintf+0x154>
    1752:	28 01       	movw	r4, r16
    1754:	f2 e0       	ldi	r31, 0x02	; 2
    1756:	4f 0e       	add	r4, r31
    1758:	51 1c       	adc	r5, r1
    175a:	f8 01       	movw	r30, r16
    175c:	a0 80       	ld	r10, Z
    175e:	b1 80       	ldd	r11, Z+1	; 0x01
    1760:	36 fe       	sbrs	r3, 6
    1762:	03 c0       	rjmp	.+6      	; 0x176a <vfprintf+0x146>
    1764:	69 2d       	mov	r22, r9
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <vfprintf+0x14a>
    176a:	6f ef       	ldi	r22, 0xFF	; 255
    176c:	7f ef       	ldi	r23, 0xFF	; 255
    176e:	c5 01       	movw	r24, r10
    1770:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <strnlen>
    1774:	4c 01       	movw	r8, r24
    1776:	82 01       	movw	r16, r4
    1778:	f3 2d       	mov	r31, r3
    177a:	ff 77       	andi	r31, 0x7F	; 127
    177c:	3f 2e       	mov	r3, r31
    177e:	16 c0       	rjmp	.+44     	; 0x17ac <vfprintf+0x188>
    1780:	28 01       	movw	r4, r16
    1782:	22 e0       	ldi	r18, 0x02	; 2
    1784:	42 0e       	add	r4, r18
    1786:	51 1c       	adc	r5, r1
    1788:	f8 01       	movw	r30, r16
    178a:	a0 80       	ld	r10, Z
    178c:	b1 80       	ldd	r11, Z+1	; 0x01
    178e:	36 fe       	sbrs	r3, 6
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <vfprintf+0x174>
    1792:	69 2d       	mov	r22, r9
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <vfprintf+0x178>
    1798:	6f ef       	ldi	r22, 0xFF	; 255
    179a:	7f ef       	ldi	r23, 0xFF	; 255
    179c:	c5 01       	movw	r24, r10
    179e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <strnlen_P>
    17a2:	4c 01       	movw	r8, r24
    17a4:	f3 2d       	mov	r31, r3
    17a6:	f0 68       	ori	r31, 0x80	; 128
    17a8:	3f 2e       	mov	r3, r31
    17aa:	82 01       	movw	r16, r4
    17ac:	33 fc       	sbrc	r3, 3
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <vfprintf+0x1c2>
    17b0:	82 2d       	mov	r24, r2
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	88 16       	cp	r8, r24
    17b6:	99 06       	cpc	r9, r25
    17b8:	b0 f4       	brcc	.+44     	; 0x17e6 <vfprintf+0x1c2>
    17ba:	b6 01       	movw	r22, r12
    17bc:	80 e2       	ldi	r24, 0x20	; 32
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    17c4:	2a 94       	dec	r2
    17c6:	f4 cf       	rjmp	.-24     	; 0x17b0 <vfprintf+0x18c>
    17c8:	f5 01       	movw	r30, r10
    17ca:	37 fc       	sbrc	r3, 7
    17cc:	85 91       	lpm	r24, Z+
    17ce:	37 fe       	sbrs	r3, 7
    17d0:	81 91       	ld	r24, Z+
    17d2:	5f 01       	movw	r10, r30
    17d4:	b6 01       	movw	r22, r12
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    17dc:	21 10       	cpse	r2, r1
    17de:	2a 94       	dec	r2
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	82 1a       	sub	r8, r18
    17e4:	91 08       	sbc	r9, r1
    17e6:	81 14       	cp	r8, r1
    17e8:	91 04       	cpc	r9, r1
    17ea:	71 f7       	brne	.-36     	; 0x17c8 <vfprintf+0x1a4>
    17ec:	e8 c0       	rjmp	.+464    	; 0x19be <vfprintf+0x39a>
    17ee:	84 36       	cpi	r24, 0x64	; 100
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <vfprintf+0x1d2>
    17f2:	89 36       	cpi	r24, 0x69	; 105
    17f4:	41 f5       	brne	.+80     	; 0x1846 <vfprintf+0x222>
    17f6:	f8 01       	movw	r30, r16
    17f8:	37 fe       	sbrs	r3, 7
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <vfprintf+0x1e6>
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	0c 5f       	subi	r16, 0xFC	; 252
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	08 c0       	rjmp	.+16     	; 0x181a <vfprintf+0x1f6>
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	07 2e       	mov	r0, r23
    1810:	00 0c       	add	r0, r0
    1812:	88 0b       	sbc	r24, r24
    1814:	99 0b       	sbc	r25, r25
    1816:	0e 5f       	subi	r16, 0xFE	; 254
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	f3 2d       	mov	r31, r3
    181c:	ff 76       	andi	r31, 0x6F	; 111
    181e:	3f 2e       	mov	r3, r31
    1820:	97 ff       	sbrs	r25, 7
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <vfprintf+0x212>
    1824:	90 95       	com	r25
    1826:	80 95       	com	r24
    1828:	70 95       	com	r23
    182a:	61 95       	neg	r22
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	8f 4f       	sbci	r24, 0xFF	; 255
    1830:	9f 4f       	sbci	r25, 0xFF	; 255
    1832:	f0 68       	ori	r31, 0x80	; 128
    1834:	3f 2e       	mov	r3, r31
    1836:	2a e0       	ldi	r18, 0x0A	; 10
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	a3 01       	movw	r20, r6
    183c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__ultoa_invert>
    1840:	88 2e       	mov	r8, r24
    1842:	86 18       	sub	r8, r6
    1844:	45 c0       	rjmp	.+138    	; 0x18d0 <vfprintf+0x2ac>
    1846:	85 37       	cpi	r24, 0x75	; 117
    1848:	31 f4       	brne	.+12     	; 0x1856 <vfprintf+0x232>
    184a:	23 2d       	mov	r18, r3
    184c:	2f 7e       	andi	r18, 0xEF	; 239
    184e:	b2 2e       	mov	r11, r18
    1850:	2a e0       	ldi	r18, 0x0A	; 10
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	25 c0       	rjmp	.+74     	; 0x18a0 <vfprintf+0x27c>
    1856:	93 2d       	mov	r25, r3
    1858:	99 7f       	andi	r25, 0xF9	; 249
    185a:	b9 2e       	mov	r11, r25
    185c:	8f 36       	cpi	r24, 0x6F	; 111
    185e:	c1 f0       	breq	.+48     	; 0x1890 <vfprintf+0x26c>
    1860:	18 f4       	brcc	.+6      	; 0x1868 <vfprintf+0x244>
    1862:	88 35       	cpi	r24, 0x58	; 88
    1864:	79 f0       	breq	.+30     	; 0x1884 <vfprintf+0x260>
    1866:	b5 c0       	rjmp	.+362    	; 0x19d2 <vfprintf+0x3ae>
    1868:	80 37       	cpi	r24, 0x70	; 112
    186a:	19 f0       	breq	.+6      	; 0x1872 <vfprintf+0x24e>
    186c:	88 37       	cpi	r24, 0x78	; 120
    186e:	21 f0       	breq	.+8      	; 0x1878 <vfprintf+0x254>
    1870:	b0 c0       	rjmp	.+352    	; 0x19d2 <vfprintf+0x3ae>
    1872:	e9 2f       	mov	r30, r25
    1874:	e0 61       	ori	r30, 0x10	; 16
    1876:	be 2e       	mov	r11, r30
    1878:	b4 fe       	sbrs	r11, 4
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <vfprintf+0x272>
    187c:	fb 2d       	mov	r31, r11
    187e:	f4 60       	ori	r31, 0x04	; 4
    1880:	bf 2e       	mov	r11, r31
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x272>
    1884:	34 fe       	sbrs	r3, 4
    1886:	0a c0       	rjmp	.+20     	; 0x189c <vfprintf+0x278>
    1888:	29 2f       	mov	r18, r25
    188a:	26 60       	ori	r18, 0x06	; 6
    188c:	b2 2e       	mov	r11, r18
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0x278>
    1890:	28 e0       	ldi	r18, 0x08	; 8
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x27c>
    1896:	20 e1       	ldi	r18, 0x10	; 16
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x27c>
    189c:	20 e1       	ldi	r18, 0x10	; 16
    189e:	32 e0       	ldi	r19, 0x02	; 2
    18a0:	f8 01       	movw	r30, r16
    18a2:	b7 fe       	sbrs	r11, 7
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <vfprintf+0x290>
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	0c 5f       	subi	r16, 0xFC	; 252
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <vfprintf+0x29c>
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 5f       	subi	r16, 0xFE	; 254
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	a3 01       	movw	r20, r6
    18c2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__ultoa_invert>
    18c6:	88 2e       	mov	r8, r24
    18c8:	86 18       	sub	r8, r6
    18ca:	fb 2d       	mov	r31, r11
    18cc:	ff 77       	andi	r31, 0x7F	; 127
    18ce:	3f 2e       	mov	r3, r31
    18d0:	36 fe       	sbrs	r3, 6
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <vfprintf+0x2ca>
    18d4:	23 2d       	mov	r18, r3
    18d6:	2e 7f       	andi	r18, 0xFE	; 254
    18d8:	a2 2e       	mov	r10, r18
    18da:	89 14       	cp	r8, r9
    18dc:	58 f4       	brcc	.+22     	; 0x18f4 <vfprintf+0x2d0>
    18de:	34 fe       	sbrs	r3, 4
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <vfprintf+0x2d4>
    18e2:	32 fc       	sbrc	r3, 2
    18e4:	09 c0       	rjmp	.+18     	; 0x18f8 <vfprintf+0x2d4>
    18e6:	83 2d       	mov	r24, r3
    18e8:	8e 7e       	andi	r24, 0xEE	; 238
    18ea:	a8 2e       	mov	r10, r24
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <vfprintf+0x2d4>
    18ee:	b8 2c       	mov	r11, r8
    18f0:	a3 2c       	mov	r10, r3
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <vfprintf+0x2d6>
    18f4:	b8 2c       	mov	r11, r8
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <vfprintf+0x2d6>
    18f8:	b9 2c       	mov	r11, r9
    18fa:	a4 fe       	sbrs	r10, 4
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <vfprintf+0x2f8>
    18fe:	fe 01       	movw	r30, r28
    1900:	e8 0d       	add	r30, r8
    1902:	f1 1d       	adc	r31, r1
    1904:	80 81       	ld	r24, Z
    1906:	80 33       	cpi	r24, 0x30	; 48
    1908:	21 f4       	brne	.+8      	; 0x1912 <vfprintf+0x2ee>
    190a:	9a 2d       	mov	r25, r10
    190c:	99 7e       	andi	r25, 0xE9	; 233
    190e:	a9 2e       	mov	r10, r25
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <vfprintf+0x300>
    1912:	a2 fe       	sbrs	r10, 2
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <vfprintf+0x2fe>
    1916:	b3 94       	inc	r11
    1918:	b3 94       	inc	r11
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <vfprintf+0x300>
    191c:	8a 2d       	mov	r24, r10
    191e:	86 78       	andi	r24, 0x86	; 134
    1920:	09 f0       	breq	.+2      	; 0x1924 <vfprintf+0x300>
    1922:	b3 94       	inc	r11
    1924:	a3 fc       	sbrc	r10, 3
    1926:	11 c0       	rjmp	.+34     	; 0x194a <vfprintf+0x326>
    1928:	a0 fe       	sbrs	r10, 0
    192a:	06 c0       	rjmp	.+12     	; 0x1938 <vfprintf+0x314>
    192c:	b2 14       	cp	r11, r2
    192e:	88 f4       	brcc	.+34     	; 0x1952 <vfprintf+0x32e>
    1930:	28 0c       	add	r2, r8
    1932:	92 2c       	mov	r9, r2
    1934:	9b 18       	sub	r9, r11
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <vfprintf+0x330>
    1938:	b2 14       	cp	r11, r2
    193a:	60 f4       	brcc	.+24     	; 0x1954 <vfprintf+0x330>
    193c:	b6 01       	movw	r22, r12
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    1946:	b3 94       	inc	r11
    1948:	f7 cf       	rjmp	.-18     	; 0x1938 <vfprintf+0x314>
    194a:	b2 14       	cp	r11, r2
    194c:	18 f4       	brcc	.+6      	; 0x1954 <vfprintf+0x330>
    194e:	2b 18       	sub	r2, r11
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x332>
    1952:	98 2c       	mov	r9, r8
    1954:	21 2c       	mov	r2, r1
    1956:	a4 fe       	sbrs	r10, 4
    1958:	10 c0       	rjmp	.+32     	; 0x197a <vfprintf+0x356>
    195a:	b6 01       	movw	r22, r12
    195c:	80 e3       	ldi	r24, 0x30	; 48
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    1964:	a2 fe       	sbrs	r10, 2
    1966:	17 c0       	rjmp	.+46     	; 0x1996 <vfprintf+0x372>
    1968:	a1 fc       	sbrc	r10, 1
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <vfprintf+0x34e>
    196c:	88 e7       	ldi	r24, 0x78	; 120
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <vfprintf+0x352>
    1972:	88 e5       	ldi	r24, 0x58	; 88
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	b6 01       	movw	r22, r12
    1978:	0c c0       	rjmp	.+24     	; 0x1992 <vfprintf+0x36e>
    197a:	8a 2d       	mov	r24, r10
    197c:	86 78       	andi	r24, 0x86	; 134
    197e:	59 f0       	breq	.+22     	; 0x1996 <vfprintf+0x372>
    1980:	a1 fe       	sbrs	r10, 1
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <vfprintf+0x364>
    1984:	8b e2       	ldi	r24, 0x2B	; 43
    1986:	01 c0       	rjmp	.+2      	; 0x198a <vfprintf+0x366>
    1988:	80 e2       	ldi	r24, 0x20	; 32
    198a:	a7 fc       	sbrc	r10, 7
    198c:	8d e2       	ldi	r24, 0x2D	; 45
    198e:	b6 01       	movw	r22, r12
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    1996:	89 14       	cp	r8, r9
    1998:	38 f4       	brcc	.+14     	; 0x19a8 <vfprintf+0x384>
    199a:	b6 01       	movw	r22, r12
    199c:	80 e3       	ldi	r24, 0x30	; 48
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    19a4:	9a 94       	dec	r9
    19a6:	f7 cf       	rjmp	.-18     	; 0x1996 <vfprintf+0x372>
    19a8:	8a 94       	dec	r8
    19aa:	f3 01       	movw	r30, r6
    19ac:	e8 0d       	add	r30, r8
    19ae:	f1 1d       	adc	r31, r1
    19b0:	80 81       	ld	r24, Z
    19b2:	b6 01       	movw	r22, r12
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    19ba:	81 10       	cpse	r8, r1
    19bc:	f5 cf       	rjmp	.-22     	; 0x19a8 <vfprintf+0x384>
    19be:	22 20       	and	r2, r2
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <vfprintf+0x3a0>
    19c2:	42 ce       	rjmp	.-892    	; 0x1648 <vfprintf+0x24>
    19c4:	b6 01       	movw	r22, r12
    19c6:	80 e2       	ldi	r24, 0x20	; 32
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <fputc>
    19ce:	2a 94       	dec	r2
    19d0:	f6 cf       	rjmp	.-20     	; 0x19be <vfprintf+0x39a>
    19d2:	f6 01       	movw	r30, r12
    19d4:	86 81       	ldd	r24, Z+6	; 0x06
    19d6:	97 81       	ldd	r25, Z+7	; 0x07
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <vfprintf+0x3ba>
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	2b 96       	adiw	r28, 0x0b	; 11
    19e0:	e2 e1       	ldi	r30, 0x12	; 18
    19e2:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__epilogue_restores__>

000019e6 <strnlen_P>:
    19e6:	fc 01       	movw	r30, r24
    19e8:	05 90       	lpm	r0, Z+
    19ea:	61 50       	subi	r22, 0x01	; 1
    19ec:	70 40       	sbci	r23, 0x00	; 0
    19ee:	01 10       	cpse	r0, r1
    19f0:	d8 f7       	brcc	.-10     	; 0x19e8 <strnlen_P+0x2>
    19f2:	80 95       	com	r24
    19f4:	90 95       	com	r25
    19f6:	8e 0f       	add	r24, r30
    19f8:	9f 1f       	adc	r25, r31
    19fa:	08 95       	ret

000019fc <strnlen>:
    19fc:	fc 01       	movw	r30, r24
    19fe:	61 50       	subi	r22, 0x01	; 1
    1a00:	70 40       	sbci	r23, 0x00	; 0
    1a02:	01 90       	ld	r0, Z+
    1a04:	01 10       	cpse	r0, r1
    1a06:	d8 f7       	brcc	.-10     	; 0x19fe <strnlen+0x2>
    1a08:	80 95       	com	r24
    1a0a:	90 95       	com	r25
    1a0c:	8e 0f       	add	r24, r30
    1a0e:	9f 1f       	adc	r25, r31
    1a10:	08 95       	ret

00001a12 <fputc>:
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	23 81       	ldd	r18, Z+3	; 0x03
    1a1e:	21 fd       	sbrc	r18, 1
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <fputc+0x16>
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	2c c0       	rjmp	.+88     	; 0x1a80 <fputc+0x6e>
    1a28:	22 ff       	sbrs	r18, 2
    1a2a:	16 c0       	rjmp	.+44     	; 0x1a58 <fputc+0x46>
    1a2c:	46 81       	ldd	r20, Z+6	; 0x06
    1a2e:	57 81       	ldd	r21, Z+7	; 0x07
    1a30:	24 81       	ldd	r18, Z+4	; 0x04
    1a32:	35 81       	ldd	r19, Z+5	; 0x05
    1a34:	42 17       	cp	r20, r18
    1a36:	53 07       	cpc	r21, r19
    1a38:	44 f4       	brge	.+16     	; 0x1a4a <fputc+0x38>
    1a3a:	a0 81       	ld	r26, Z
    1a3c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a3e:	9d 01       	movw	r18, r26
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	31 83       	std	Z+1, r19	; 0x01
    1a46:	20 83       	st	Z, r18
    1a48:	8c 93       	st	X, r24
    1a4a:	26 81       	ldd	r18, Z+6	; 0x06
    1a4c:	37 81       	ldd	r19, Z+7	; 0x07
    1a4e:	2f 5f       	subi	r18, 0xFF	; 255
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	37 83       	std	Z+7, r19	; 0x07
    1a54:	26 83       	std	Z+6, r18	; 0x06
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <fputc+0x6e>
    1a58:	8b 01       	movw	r16, r22
    1a5a:	ec 01       	movw	r28, r24
    1a5c:	fb 01       	movw	r30, r22
    1a5e:	00 84       	ldd	r0, Z+8	; 0x08
    1a60:	f1 85       	ldd	r31, Z+9	; 0x09
    1a62:	e0 2d       	mov	r30, r0
    1a64:	09 95       	icall
    1a66:	89 2b       	or	r24, r25
    1a68:	e1 f6       	brne	.-72     	; 0x1a22 <fputc+0x10>
    1a6a:	d8 01       	movw	r26, r16
    1a6c:	16 96       	adiw	r26, 0x06	; 6
    1a6e:	8d 91       	ld	r24, X+
    1a70:	9c 91       	ld	r25, X
    1a72:	17 97       	sbiw	r26, 0x07	; 7
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	17 96       	adiw	r26, 0x07	; 7
    1a78:	9c 93       	st	X, r25
    1a7a:	8e 93       	st	-X, r24
    1a7c:	16 97       	sbiw	r26, 0x06	; 6
    1a7e:	ce 01       	movw	r24, r28
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <__ultoa_invert>:
    1a8a:	fa 01       	movw	r30, r20
    1a8c:	aa 27       	eor	r26, r26
    1a8e:	28 30       	cpi	r18, 0x08	; 8
    1a90:	51 f1       	breq	.+84     	; 0x1ae6 <__ultoa_invert+0x5c>
    1a92:	20 31       	cpi	r18, 0x10	; 16
    1a94:	81 f1       	breq	.+96     	; 0x1af6 <__ultoa_invert+0x6c>
    1a96:	e8 94       	clt
    1a98:	6f 93       	push	r22
    1a9a:	6e 7f       	andi	r22, 0xFE	; 254
    1a9c:	6e 5f       	subi	r22, 0xFE	; 254
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	af 4f       	sbci	r26, 0xFF	; 255
    1aa6:	b1 e0       	ldi	r27, 0x01	; 1
    1aa8:	3e d0       	rcall	.+124    	; 0x1b26 <__ultoa_invert+0x9c>
    1aaa:	b4 e0       	ldi	r27, 0x04	; 4
    1aac:	3c d0       	rcall	.+120    	; 0x1b26 <__ultoa_invert+0x9c>
    1aae:	67 0f       	add	r22, r23
    1ab0:	78 1f       	adc	r23, r24
    1ab2:	89 1f       	adc	r24, r25
    1ab4:	9a 1f       	adc	r25, r26
    1ab6:	a1 1d       	adc	r26, r1
    1ab8:	68 0f       	add	r22, r24
    1aba:	79 1f       	adc	r23, r25
    1abc:	8a 1f       	adc	r24, r26
    1abe:	91 1d       	adc	r25, r1
    1ac0:	a1 1d       	adc	r26, r1
    1ac2:	6a 0f       	add	r22, r26
    1ac4:	71 1d       	adc	r23, r1
    1ac6:	81 1d       	adc	r24, r1
    1ac8:	91 1d       	adc	r25, r1
    1aca:	a1 1d       	adc	r26, r1
    1acc:	20 d0       	rcall	.+64     	; 0x1b0e <__ultoa_invert+0x84>
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <__ultoa_invert+0x48>
    1ad0:	68 94       	set
    1ad2:	3f 91       	pop	r19
    1ad4:	2a e0       	ldi	r18, 0x0A	; 10
    1ad6:	26 9f       	mul	r18, r22
    1ad8:	11 24       	eor	r1, r1
    1ada:	30 19       	sub	r19, r0
    1adc:	30 5d       	subi	r19, 0xD0	; 208
    1ade:	31 93       	st	Z+, r19
    1ae0:	de f6       	brtc	.-74     	; 0x1a98 <__ultoa_invert+0xe>
    1ae2:	cf 01       	movw	r24, r30
    1ae4:	08 95       	ret
    1ae6:	46 2f       	mov	r20, r22
    1ae8:	47 70       	andi	r20, 0x07	; 7
    1aea:	40 5d       	subi	r20, 0xD0	; 208
    1aec:	41 93       	st	Z+, r20
    1aee:	b3 e0       	ldi	r27, 0x03	; 3
    1af0:	0f d0       	rcall	.+30     	; 0x1b10 <__ultoa_invert+0x86>
    1af2:	c9 f7       	brne	.-14     	; 0x1ae6 <__ultoa_invert+0x5c>
    1af4:	f6 cf       	rjmp	.-20     	; 0x1ae2 <__ultoa_invert+0x58>
    1af6:	46 2f       	mov	r20, r22
    1af8:	4f 70       	andi	r20, 0x0F	; 15
    1afa:	40 5d       	subi	r20, 0xD0	; 208
    1afc:	4a 33       	cpi	r20, 0x3A	; 58
    1afe:	18 f0       	brcs	.+6      	; 0x1b06 <__ultoa_invert+0x7c>
    1b00:	49 5d       	subi	r20, 0xD9	; 217
    1b02:	31 fd       	sbrc	r19, 1
    1b04:	40 52       	subi	r20, 0x20	; 32
    1b06:	41 93       	st	Z+, r20
    1b08:	02 d0       	rcall	.+4      	; 0x1b0e <__ultoa_invert+0x84>
    1b0a:	a9 f7       	brne	.-22     	; 0x1af6 <__ultoa_invert+0x6c>
    1b0c:	ea cf       	rjmp	.-44     	; 0x1ae2 <__ultoa_invert+0x58>
    1b0e:	b4 e0       	ldi	r27, 0x04	; 4
    1b10:	a6 95       	lsr	r26
    1b12:	97 95       	ror	r25
    1b14:	87 95       	ror	r24
    1b16:	77 95       	ror	r23
    1b18:	67 95       	ror	r22
    1b1a:	ba 95       	dec	r27
    1b1c:	c9 f7       	brne	.-14     	; 0x1b10 <__ultoa_invert+0x86>
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 05       	cpc	r22, r1
    1b22:	71 05       	cpc	r23, r1
    1b24:	08 95       	ret
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	0a 2e       	mov	r0, r26
    1b2c:	06 94       	lsr	r0
    1b2e:	57 95       	ror	r21
    1b30:	47 95       	ror	r20
    1b32:	37 95       	ror	r19
    1b34:	27 95       	ror	r18
    1b36:	ba 95       	dec	r27
    1b38:	c9 f7       	brne	.-14     	; 0x1b2c <__ultoa_invert+0xa2>
    1b3a:	62 0f       	add	r22, r18
    1b3c:	73 1f       	adc	r23, r19
    1b3e:	84 1f       	adc	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	a0 1d       	adc	r26, r0
    1b44:	08 95       	ret

00001b46 <__prologue_saves__>:
    1b46:	2f 92       	push	r2
    1b48:	3f 92       	push	r3
    1b4a:	4f 92       	push	r4
    1b4c:	5f 92       	push	r5
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	ca 1b       	sub	r28, r26
    1b70:	db 0b       	sbc	r29, r27
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	09 94       	ijmp

00001b7e <__epilogue_restores__>:
    1b7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b80:	39 88       	ldd	r3, Y+17	; 0x11
    1b82:	48 88       	ldd	r4, Y+16	; 0x10
    1b84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b90:	b9 84       	ldd	r11, Y+9	; 0x09
    1b92:	c8 84       	ldd	r12, Y+8	; 0x08
    1b94:	df 80       	ldd	r13, Y+7	; 0x07
    1b96:	ee 80       	ldd	r14, Y+6	; 0x06
    1b98:	fd 80       	ldd	r15, Y+5	; 0x05
    1b9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1ba0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba2:	ce 0f       	add	r28, r30
    1ba4:	d1 1d       	adc	r29, r1
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	ed 01       	movw	r28, r26
    1bb2:	08 95       	ret

00001bb4 <_exit>:
    1bb4:	f8 94       	cli

00001bb6 <__stop_program>:
    1bb6:	ff cf       	rjmp	.-2      	; 0x1bb6 <__stop_program>
