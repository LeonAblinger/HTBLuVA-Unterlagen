
I2C_RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00001b74  00001c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001d2  008001d2  00001cda  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a2  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d52  00000000  00000000  000035ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d07  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00005014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093e  00000000  00000000  00005624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c90  00000000  00000000  00005f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006bf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_20>
      54:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_28>
      74:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e7       	ldi	r30, 0x74	; 116
      90:	fb e1       	ldi	r31, 0x1B	; 27
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 3d       	cpi	r26, 0xD2	; 210
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a2 ed       	ldi	r26, 0xD2	; 210
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 3e       	cpi	r26, 0xE6	; 230
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 be 02 	call	0x57c	; 0x57c <main>
      b2:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <DelayMs>:

#ifndef DEBUG
#include <util/delay.h>
#endif

void DelayMs(unsigned int aDelayMs){
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	28 97       	sbiw	r28, 0x08	; 8
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
      ce:	98 87       	std	Y+8, r25	; 0x08
      d0:	8f 83       	std	Y+7, r24	; 0x07
	#ifdef DEBUG
	volatile unsigned long counter;
	volatile unsigned int help;
	for(counter = 0; counter < aDelayMs * 150UL; counter++) help++;
      d2:	19 82       	std	Y+1, r1	; 0x01
      d4:	1a 82       	std	Y+2, r1	; 0x02
      d6:	1b 82       	std	Y+3, r1	; 0x03
      d8:	1c 82       	std	Y+4, r1	; 0x04
      da:	10 c0       	rjmp	.+32     	; 0xfc <DelayMs+0x42>
      dc:	8d 81       	ldd	r24, Y+5	; 0x05
      de:	9e 81       	ldd	r25, Y+6	; 0x06
      e0:	01 96       	adiw	r24, 0x01	; 1
      e2:	9e 83       	std	Y+6, r25	; 0x06
      e4:	8d 83       	std	Y+5, r24	; 0x05
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	9a 81       	ldd	r25, Y+2	; 0x02
      ea:	ab 81       	ldd	r26, Y+3	; 0x03
      ec:	bc 81       	ldd	r27, Y+4	; 0x04
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	a1 1d       	adc	r26, r1
      f2:	b1 1d       	adc	r27, r1
      f4:	89 83       	std	Y+1, r24	; 0x01
      f6:	9a 83       	std	Y+2, r25	; 0x02
      f8:	ab 83       	std	Y+3, r26	; 0x03
      fa:	bc 83       	std	Y+4, r27	; 0x04
      fc:	8f 81       	ldd	r24, Y+7	; 0x07
      fe:	98 85       	ldd	r25, Y+8	; 0x08
     100:	9c 01       	movw	r18, r24
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	86 e9       	ldi	r24, 0x96	; 150
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	dc 01       	movw	r26, r24
     10c:	0e 94 0f 09 	call	0x121e	; 0x121e <__muluhisi3>
     110:	9b 01       	movw	r18, r22
     112:	ac 01       	movw	r20, r24
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	9a 81       	ldd	r25, Y+2	; 0x02
     118:	ab 81       	ldd	r26, Y+3	; 0x03
     11a:	bc 81       	ldd	r27, Y+4	; 0x04
     11c:	82 17       	cp	r24, r18
     11e:	93 07       	cpc	r25, r19
     120:	a4 07       	cpc	r26, r20
     122:	b5 07       	cpc	r27, r21
     124:	d8 f2       	brcs	.-74     	; 0xdc <DelayMs+0x22>
	#else
	_delay_ms(aDelayMs);
	#endif
}
     126:	00 00       	nop
     128:	28 96       	adiw	r28, 0x08	; 8
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	de bf       	out	0x3e, r29	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	cd bf       	out	0x3d, r28	; 61
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <I2CInit>:
    - aBitrate: defines the Bitrate to send the data with
    - aClkFrequency: defines the Frequency wuth whih the Clk-Bus is running
************************************************************************/


TBool I2CInit(unsigned int aBitrate, unsigned long aClkFrequency){
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	2b 97       	sbiw	r28, 0x0b	; 11
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	9f 83       	std	Y+7, r25	; 0x07
     150:	8e 83       	std	Y+6, r24	; 0x06
     152:	48 87       	std	Y+8, r20	; 0x08
     154:	59 87       	std	Y+9, r21	; 0x09
     156:	6a 87       	std	Y+10, r22	; 0x0a
     158:	7b 87       	std	Y+11, r23	; 0x0b
	unsigned long tmp;
	
	//unsigned long twbr;
	//unsigned int twps;
	
	for(tws = 0; tws < sizeof(I2CPrescalerValues); tws++){
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	5a c0       	rjmp	.+180    	; 0x212 <I2CInit+0xd8>
		tmp =  ((aClkFrequency/aBitrate)-16)/(2*I2CPrescalerValues[tws]); //(aClkFrequency/(16 + 2 * TWBR * I2CPrescalerValues[tws]));
     15e:	8e 81       	ldd	r24, Y+6	; 0x06
     160:	9f 81       	ldd	r25, Y+7	; 0x07
     162:	9c 01       	movw	r18, r24
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	88 85       	ldd	r24, Y+8	; 0x08
     16a:	99 85       	ldd	r25, Y+9	; 0x09
     16c:	aa 85       	ldd	r26, Y+10	; 0x0a
     16e:	bb 85       	ldd	r27, Y+11	; 0x0b
     170:	bc 01       	movw	r22, r24
     172:	cd 01       	movw	r24, r26
     174:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodsi4>
     178:	da 01       	movw	r26, r20
     17a:	c9 01       	movw	r24, r18
     17c:	40 97       	sbiw	r24, 0x10	; 16
     17e:	a1 09       	sbc	r26, r1
     180:	b1 09       	sbc	r27, r1
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	22 2f       	mov	r18, r18
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	2a 5f       	subi	r18, 0xFA	; 250
     18a:	3e 4f       	sbci	r19, 0xFE	; 254
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	22 2f       	mov	r18, r18
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	22 0f       	add	r18, r18
     196:	33 1f       	adc	r19, r19
     198:	03 2e       	mov	r0, r19
     19a:	00 0c       	add	r0, r0
     19c:	44 0b       	sbc	r20, r20
     19e:	55 0b       	sbc	r21, r21
     1a0:	bc 01       	movw	r22, r24
     1a2:	cd 01       	movw	r24, r26
     1a4:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodsi4>
     1a8:	da 01       	movw	r26, r20
     1aa:	c9 01       	movw	r24, r18
     1ac:	8a 83       	std	Y+2, r24	; 0x02
     1ae:	9b 83       	std	Y+3, r25	; 0x03
     1b0:	ac 83       	std	Y+4, r26	; 0x04
     1b2:	bd 83       	std	Y+5, r27	; 0x05
		
		if(tmp < 256){
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	ac 81       	ldd	r26, Y+4	; 0x04
     1ba:	bd 81       	ldd	r27, Y+5	; 0x05
     1bc:	8f 3f       	cpi	r24, 0xFF	; 255
     1be:	91 05       	cpc	r25, r1
     1c0:	a1 05       	cpc	r26, r1
     1c2:	b1 05       	cpc	r27, r1
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <I2CInit+0x8e>
     1c6:	10 f5       	brcc	.+68     	; 0x20c <I2CInit+0xd2>
			PORTC |= (1 << PORTC0) | (1 << PORTC1);
     1c8:	88 e2       	ldi	r24, 0x28	; 40
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	28 e2       	ldi	r18, 0x28	; 40
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	20 81       	ld	r18, Z
     1d4:	23 60       	ori	r18, 0x03	; 3
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
			DDRC &= ~(1 << DDC0) & ~(1 << DDC1);
     1da:	87 e2       	ldi	r24, 0x27	; 39
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	27 e2       	ldi	r18, 0x27	; 39
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f9 01       	movw	r30, r18
     1e4:	20 81       	ld	r18, Z
     1e6:	2c 7f       	andi	r18, 0xFC	; 252
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
			TWSR |= (tmp <<TWPS0);
     1ec:	89 eb       	ldi	r24, 0xB9	; 185
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	29 eb       	ldi	r18, 0xB9	; 185
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	f9 01       	movw	r30, r18
     1f6:	30 81       	ld	r19, Z
     1f8:	2a 81       	ldd	r18, Y+2	; 0x02
     1fa:	23 2b       	or	r18, r19
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
			TWBR = aBitrate;
     200:	88 eb       	ldi	r24, 0xB8	; 184
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2e 81       	ldd	r18, Y+6	; 0x06
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
			break;
     20a:	07 c0       	rjmp	.+14     	; 0x21a <I2CInit+0xe0>
	unsigned long tmp;
	
	//unsigned long twbr;
	//unsigned int twps;
	
	for(tws = 0; tws < sizeof(I2CPrescalerValues); tws++){
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	84 30       	cpi	r24, 0x04	; 4
     216:	08 f4       	brcc	.+2      	; 0x21a <I2CInit+0xe0>
     218:	a2 cf       	rjmp	.-188    	; 0x15e <I2CInit+0x24>
			TWBR = aBitrate;
			break;
		}
	}
	
	if(tmp >= 256){
     21a:	8a 81       	ldd	r24, Y+2	; 0x02
     21c:	9b 81       	ldd	r25, Y+3	; 0x03
     21e:	ac 81       	ldd	r26, Y+4	; 0x04
     220:	bd 81       	ldd	r27, Y+5	; 0x05
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	91 05       	cpc	r25, r1
     226:	a1 05       	cpc	r26, r1
     228:	b1 05       	cpc	r27, r1
     22a:	19 f0       	breq	.+6      	; 0x232 <I2CInit+0xf8>
     22c:	10 f0       	brcs	.+4      	; 0x232 <I2CInit+0xf8>
		return EFALSE;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	01 c0       	rjmp	.+2      	; 0x234 <I2CInit+0xfa>
	}
	
	return ETRUE;
     232:	81 e0       	ldi	r24, 0x01	; 1
}
     234:	2b 96       	adiw	r28, 0x0b	; 11
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <I2CWrite>:
    - aSlaveAddress: Address of the slave we want to communicate with
    - aBuffer: the data we want to write on the Data bus
    - aSize: Size of the amount of Bytes we want to write
************************************************************************/

TBool I2CWrite(unsigned char aSlaveAddress, unsigned char * aBuffer, unsigned int aSize){
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	27 97       	sbiw	r28, 0x07	; 7
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	8b 83       	std	Y+3, r24	; 0x03
     25c:	7d 83       	std	Y+5, r23	; 0x05
     25e:	6c 83       	std	Y+4, r22	; 0x04
     260:	5f 83       	std	Y+7, r21	; 0x07
     262:	4e 83       	std	Y+6, r20	; 0x06
  
  unsigned int i;
  
  if(!I2CStart()){
     264:	0e 94 c7 01 	call	0x38e	; 0x38e <I2CStart>
     268:	88 23       	and	r24, r24
     26a:	11 f4       	brne	.+4      	; 0x270 <I2CWrite+0x2a>
    return EFALSE;
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	2c c0       	rjmp	.+88     	; 0x2c8 <I2CWrite+0x82>
  }
  
  if(!I2CSendAddress(aSlaveAddress & TW_WRITE)){
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	8e 7f       	andi	r24, 0xFE	; 254
     274:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2CSendAddress>
     278:	88 23       	and	r24, r24
     27a:	21 f4       	brne	.+8      	; 0x284 <I2CWrite+0x3e>
    I2CStop();
     27c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
    return EFALSE;
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	22 c0       	rjmp	.+68     	; 0x2c8 <I2CWrite+0x82>
  }
  
  for(i = 0; i < aSize; i++){
     284:	1a 82       	std	Y+2, r1	; 0x02
     286:	19 82       	std	Y+1, r1	; 0x01
     288:	15 c0       	rjmp	.+42     	; 0x2b4 <I2CWrite+0x6e>
		
    if(!I2CSendByte(aBuffer[i])){
     28a:	2c 81       	ldd	r18, Y+4	; 0x04
     28c:	3d 81       	ldd	r19, Y+5	; 0x05
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	0e 94 3a 02 	call	0x474	; 0x474 <I2CSendByte>
     29e:	88 23       	and	r24, r24
     2a0:	21 f4       	brne	.+8      	; 0x2aa <I2CWrite+0x64>
      I2CStop();
     2a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
      return EFALSE;
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <I2CWrite+0x82>
  if(!I2CSendAddress(aSlaveAddress & TW_WRITE)){
    I2CStop();
    return EFALSE;
  }
  
  for(i = 0; i < aSize; i++){
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	9a 83       	std	Y+2, r25	; 0x02
     2b2:	89 83       	std	Y+1, r24	; 0x01
     2b4:	29 81       	ldd	r18, Y+1	; 0x01
     2b6:	3a 81       	ldd	r19, Y+2	; 0x02
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	9f 81       	ldd	r25, Y+7	; 0x07
     2bc:	28 17       	cp	r18, r24
     2be:	39 07       	cpc	r19, r25
     2c0:	20 f3       	brcs	.-56     	; 0x28a <I2CWrite+0x44>
      I2CStop();
      return EFALSE;
    }
  }
  
  I2CStop();
     2c2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
  
  return ETRUE;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
}
     2c8:	27 96       	adiw	r28, 0x07	; 7
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <I2CRead>:
    - aSlaveAddress: Address of the slave we want to communicate with
    - aBuffer: the data we want to read from the Data bus
    - aSize: Size of the amount of Bytes we want to read
************************************************************************/

TBool I2CRead(unsigned char aSlaveAddress, unsigned char * aBuffer, unsigned int aSize){
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	27 97       	sbiw	r28, 0x07	; 7
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	8b 83       	std	Y+3, r24	; 0x03
     2f0:	7d 83       	std	Y+5, r23	; 0x05
     2f2:	6c 83       	std	Y+4, r22	; 0x04
     2f4:	5f 83       	std	Y+7, r21	; 0x07
     2f6:	4e 83       	std	Y+6, r20	; 0x06
  unsigned int i;
  
  if(!I2CStart()){
     2f8:	0e 94 c7 01 	call	0x38e	; 0x38e <I2CStart>
     2fc:	88 23       	and	r24, r24
     2fe:	11 f4       	brne	.+4      	; 0x304 <I2CRead+0x2a>
    return EFALSE;
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	3c c0       	rjmp	.+120    	; 0x37c <I2CRead+0xa2>
  }
  
  if(!I2CSendAddress(aSlaveAddress | TW_READ)){
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	81 60       	ori	r24, 0x01	; 1
     308:	0e 94 fe 01 	call	0x3fc	; 0x3fc <I2CSendAddress>
     30c:	88 23       	and	r24, r24
     30e:	21 f4       	brne	.+8      	; 0x318 <I2CRead+0x3e>
    I2CStop();
     310:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
    return EFALSE;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	32 c0       	rjmp	.+100    	; 0x37c <I2CRead+0xa2>
  }
  
  for(i = 0; i < aSize - 1; i++){
     318:	1a 82       	std	Y+2, r1	; 0x02
     31a:	19 82       	std	Y+1, r1	; 0x01
     31c:	13 c0       	rjmp	.+38     	; 0x344 <I2CRead+0x6a>
    if(!I2CReadByte(&aBuffer[i])){
     31e:	2c 81       	ldd	r18, Y+4	; 0x04
     320:	3d 81       	ldd	r19, Y+5	; 0x05
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <I2CReadByte>
     32e:	88 23       	and	r24, r24
     330:	21 f4       	brne	.+8      	; 0x33a <I2CRead+0x60>
      I2CStop();
     332:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
      return EFALSE;
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	21 c0       	rjmp	.+66     	; 0x37c <I2CRead+0xa2>
  if(!I2CSendAddress(aSlaveAddress | TW_READ)){
    I2CStop();
    return EFALSE;
  }
  
  for(i = 0; i < aSize - 1; i++){
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	9a 81       	ldd	r25, Y+2	; 0x02
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	8e 81       	ldd	r24, Y+6	; 0x06
     346:	9f 81       	ldd	r25, Y+7	; 0x07
     348:	9c 01       	movw	r18, r24
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	31 09       	sbc	r19, r1
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	82 17       	cp	r24, r18
     354:	93 07       	cpc	r25, r19
     356:	18 f3       	brcs	.-58     	; 0x31e <I2CRead+0x44>
      I2CStop();
      return EFALSE;
    }
  }
	
	if (!I2CReadLastByte(&aBuffer[aSize - 1])) {
     358:	8e 81       	ldd	r24, Y+6	; 0x06
     35a:	9f 81       	ldd	r25, Y+7	; 0x07
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	2c 81       	ldd	r18, Y+4	; 0x04
     360:	3d 81       	ldd	r19, Y+5	; 0x05
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
     366:	0e 94 90 02 	call	0x520	; 0x520 <I2CReadLastByte>
     36a:	88 23       	and	r24, r24
     36c:	21 f4       	brne	.+8      	; 0x376 <I2CRead+0x9c>
		I2CStop();
     36e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
		return EFALSE;
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	03 c0       	rjmp	.+6      	; 0x37c <I2CRead+0xa2>
	}
  
  I2CStop();
     376:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2CStop>
  
  return ETRUE;
     37a:	81 e0       	ldi	r24, 0x01	; 1
}
     37c:	27 96       	adiw	r28, 0x07	; 7
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <I2CStart>:
    Starts the data-transfer for write and read operations
  Parameters:
    - none
************************************************************************/

static TBool I2CStart(void){
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     396:	8c eb       	ldi	r24, 0xBC	; 188
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	24 ea       	ldi	r18, 0xA4	; 164
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
  
  while(!(TWCR & (1 << TWINT)));
     3a0:	00 00       	nop
     3a2:	8c eb       	ldi	r24, 0xBC	; 188
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	88 23       	and	r24, r24
     3ac:	d4 f7       	brge	.-12     	; 0x3a2 <I2CStart+0x14>
  if((TWSR & TW_STATUS_MASK) != TW_START && (TWSR & TW_STATUS_MASK) != TW_REP_START){
     3ae:	89 eb       	ldi	r24, 0xB9	; 185
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	88 2f       	mov	r24, r24
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	88 7f       	andi	r24, 0xF8	; 248
     3bc:	99 27       	eor	r25, r25
     3be:	08 97       	sbiw	r24, 0x08	; 8
     3c0:	61 f0       	breq	.+24     	; 0x3da <I2CStart+0x4c>
     3c2:	89 eb       	ldi	r24, 0xB9	; 185
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 81       	ld	r24, Z
     3ca:	88 2f       	mov	r24, r24
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	88 7f       	andi	r24, 0xF8	; 248
     3d0:	99 27       	eor	r25, r25
     3d2:	40 97       	sbiw	r24, 0x10	; 16
     3d4:	11 f0       	breq	.+4      	; 0x3da <I2CStart+0x4c>
    return EFALSE;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <I2CStart+0x4e>
  }
  
  return ETRUE;
     3da:	81 e0       	ldi	r24, 0x01	; 1
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <I2CStop>:

static void I2CStop(void){
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     3ea:	8c eb       	ldi	r24, 0xBC	; 188
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	24 e9       	ldi	r18, 0x94	; 148
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
}
     3f4:	00 00       	nop
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <I2CSendAddress>:
    Sends the Address to the Data bus
  Parameters:
    - aAdress: the Address you want to write onto the Data bus
************************************************************************/

static TBool I2CSendAddress(unsigned char aAddress) {
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	89 83       	std	Y+1, r24	; 0x01
	TWDR = aAddress;
     408:	8b eb       	ldi	r24, 0xBB	; 187
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	29 81       	ldd	r18, Y+1	; 0x01
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18

	TWCR = (1 << TWINT) | (1 << TWEN);
     412:	8c eb       	ldi	r24, 0xBC	; 188
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	24 e8       	ldi	r18, 0x84	; 132
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18

	while (!(TWCR & (1 << TWINT)))
     41c:	00 00       	nop
     41e:	8c eb       	ldi	r24, 0xBC	; 188
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	88 23       	and	r24, r24
     428:	d4 f7       	brge	.-12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	;

	// Check wether Slave successfully acknoweledged
	if (aAddress & TW_READ) {
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	81 70       	andi	r24, 0x01	; 1
     432:	99 27       	eor	r25, r25
     434:	89 2b       	or	r24, r25
     436:	69 f0       	breq	.+26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		// Check for Master RECEIVE Slave Acknowledge
		if ((TWSR & TW_STATUS_MASK) != TW_MR_SLA_ACK)
     438:	89 eb       	ldi	r24, 0xB9	; 185
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	88 7f       	andi	r24, 0xF8	; 248
     446:	99 27       	eor	r25, r25
     448:	80 34       	cpi	r24, 0x40	; 64
     44a:	91 05       	cpc	r25, r1
     44c:	71 f0       	breq	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		return EFALSE;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0d c0       	rjmp	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		} else {
		// Check for Master TRANSMIT Slave Acknowledge
		if ((TWSR & TW_STATUS_MASK) != TW_MT_SLA_ACK)
     452:	89 eb       	ldi	r24, 0xB9	; 185
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	80 81       	ld	r24, Z
     45a:	88 2f       	mov	r24, r24
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	88 7f       	andi	r24, 0xF8	; 248
     460:	99 27       	eor	r25, r25
     462:	48 97       	sbiw	r24, 0x18	; 24
     464:	11 f0       	breq	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		return EFALSE;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	01 c0       	rjmp	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}

	return ETRUE;
     46a:	81 e0       	ldi	r24, 0x01	; 1
}
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <I2CSendByte>:
    Send a Byte to the selected Address
  Parameters:
    - aByte: the Byte you want to write onto the Data bus
************************************************************************/

static TBool I2CSendByte(unsigned char aByte){
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
  TWDR = aByte;
     480:	8b eb       	ldi	r24, 0xBB	; 187
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	29 81       	ldd	r18, Y+1	; 0x01
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
  
  TWCR = (1 << TWINT) | (1 << TWEN);
     48a:	8c eb       	ldi	r24, 0xBC	; 188
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	24 e8       	ldi	r18, 0x84	; 132
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
  
  while(!(TWCR & (1 << TWINT)));
     494:	00 00       	nop
     496:	8c eb       	ldi	r24, 0xBC	; 188
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	88 23       	and	r24, r24
     4a0:	d4 f7       	brge	.-12     	; 0x496 <I2CSendByte+0x22>
  
  if((TWSR & TW_STATUS_MASK) != TW_MT_DATA_ACK){
     4a2:	89 eb       	ldi	r24, 0xB9	; 185
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	88 7f       	andi	r24, 0xF8	; 248
     4b0:	99 27       	eor	r25, r25
     4b2:	88 97       	sbiw	r24, 0x28	; 40
     4b4:	11 f0       	breq	.+4      	; 0x4ba <I2CSendByte+0x46>
    return EFALSE;
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <I2CSendByte+0x48>
  }
  
  return ETRUE;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
}
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <I2CReadByte>:
    Reads a Byte from the DATA bus
  Parameters:
    - aBuffer: the buffer where the read bytes are stored in
************************************************************************/

static TBool I2CReadByte(unsigned char * aBuffer){
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <I2CReadByte+0x6>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01
   
   TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     4d2:	8c eb       	ldi	r24, 0xBC	; 188
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	24 ec       	ldi	r18, 0xC4	; 196
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
   
   while(!(TWCR & (1 << TWINT)));
     4dc:	00 00       	nop
     4de:	8c eb       	ldi	r24, 0xBC	; 188
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	fc 01       	movw	r30, r24
     4e4:	80 81       	ld	r24, Z
     4e6:	88 23       	and	r24, r24
     4e8:	d4 f7       	brge	.-12     	; 0x4de <I2CReadByte+0x1a>
  
  
   if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_ACK){
     4ea:	89 eb       	ldi	r24, 0xB9	; 185
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	88 7f       	andi	r24, 0xF8	; 248
     4f8:	99 27       	eor	r25, r25
     4fa:	80 35       	cpi	r24, 0x50	; 80
     4fc:	91 05       	cpc	r25, r1
     4fe:	11 f0       	breq	.+4      	; 0x504 <I2CReadByte+0x40>
     return EFALSE;
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	09 c0       	rjmp	.+18     	; 0x516 <I2CReadByte+0x52>
   }
   
   *aBuffer = TWDR;
     504:	8b eb       	ldi	r24, 0xBB	; 187
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	20 81       	ld	r18, Z
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
  
  return ETRUE;
     514:	81 e0       	ldi	r24, 0x01	; 1
}
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <I2CReadLastByte>:

static TBool I2CReadLastByte(unsigned char * aBuffer){
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <I2CReadLastByte+0x6>
     526:	cd b7       	in	r28, 0x3d	; 61
     528:	de b7       	in	r29, 0x3e	; 62
     52a:	9a 83       	std	Y+2, r25	; 0x02
     52c:	89 83       	std	Y+1, r24	; 0x01
  TWCR = (1 << TWINT) | (1 << TWEN);
     52e:	8c eb       	ldi	r24, 0xBC	; 188
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	24 e8       	ldi	r18, 0x84	; 132
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
  
  while(!(TWCR & (1 << TWINT)));
     538:	00 00       	nop
     53a:	8c eb       	ldi	r24, 0xBC	; 188
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	fc 01       	movw	r30, r24
     540:	80 81       	ld	r24, Z
     542:	88 23       	and	r24, r24
     544:	d4 f7       	brge	.-12     	; 0x53a <I2CReadLastByte+0x1a>
  
  if((TWSR & TW_STATUS_MASK) != TW_MR_DATA_NACK){
     546:	89 eb       	ldi	r24, 0xB9	; 185
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	99 27       	eor	r25, r25
     556:	88 35       	cpi	r24, 0x58	; 88
     558:	91 05       	cpc	r25, r1
     55a:	11 f0       	breq	.+4      	; 0x560 <I2CReadLastByte+0x40>
    return EFALSE;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	09 c0       	rjmp	.+18     	; 0x572 <I2CReadLastByte+0x52>
  }
  
  *aBuffer = TWDR;
     560:	8b eb       	ldi	r24, 0xBB	; 187
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	20 81       	ld	r18, Z
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
  
  return ETRUE;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <main>:
Parameters: - none

Description: initializes the program -> creates Logger and calls testI2C_RTC() function
**********************************************************************************************************************/

int main(void) {
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
		
  LogInit();
     584:	0e 94 11 04 	call	0x822	; 0x822 <LogInit>
  LogSetLogFunction(logFunc, NULL);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	81 eb       	ldi	r24, 0xB1	; 177
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	0e 94 21 04 	call	0x842	; 0x842 <LogSetLogFunction>

  testI2C_RTC();
     594:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <testI2C_RTC>

  return 0;
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <testI2C_RTC>:
Parameters: - none

Description: reads the elapsed on-time of the Real-Time-Clock via the i2c bus

**********************************************************************************************************************/
void testI2C_RTC(void) {
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	6e 97       	sbiw	r28, 0x1e	; 30
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
  TRs232Config config;
	unsigned char wakeupSignal[1] = {1};
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char timeData[5];
	unsigned char timeString[20];
	
	//set config options
  config.SendBufferSize = 250;
     5be:	8a ef       	ldi	r24, 0xFA	; 250
     5c0:	89 83       	std	Y+1, r24	; 0x01
  config.RecieveBufferSize = 10;
     5c2:	8a e0       	ldi	r24, 0x0A	; 10
     5c4:	8a 83       	std	Y+2, r24	; 0x02
  config.BaudRate = (unsigned int) 19200;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	9b e4       	ldi	r25, 0x4B	; 75
     5ca:	9c 83       	std	Y+4, r25	; 0x04
     5cc:	8b 83       	std	Y+3, r24	; 0x03
	
  globalRS232 = Rs232Create(ERS232_NO_0, F_CPU, config);
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	ab 81       	ldd	r26, Y+3	; 0x03
     5d4:	bc 81       	ldd	r27, Y+4	; 0x04
     5d6:	8c 01       	movw	r16, r24
     5d8:	9d 01       	movw	r18, r26
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	54 e2       	ldi	r21, 0x24	; 36
     5de:	64 ef       	ldi	r22, 0xF4	; 244
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 88 06 	call	0xd10	; 0xd10 <Rs232Create>
     5e8:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <globalRS232+0x1>
     5ec:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <globalRS232>

  fdevopen(custom_printf, NULL);
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	85 e9       	ldi	r24, 0x95	; 149
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	0e 94 6d 0a 	call	0x14da	; 0x14da <fdevopen>
	
	//prepares/initializes i2c communication
  if (!I2CInit(100000UL, F_CPU)) {		//Bitrate = 100000UL | ClkFreq (F_CPU) = 16000000UL
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	54 e2       	ldi	r21, 0x24	; 36
     600:	64 ef       	ldi	r22, 0xF4	; 244
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	80 ea       	ldi	r24, 0xA0	; 160
     606:	96 e8       	ldi	r25, 0x86	; 134
     608:	0e 94 9d 00 	call	0x13a	; 0x13a <I2CInit>
     60c:	88 23       	and	r24, r24
     60e:	81 f4       	brne	.+32     	; 0x630 <testI2C_RTC+0x8e>
    LogError("I2C initialization failed");
     610:	0a e0       	ldi	r16, 0x0A	; 10
     612:	11 e0       	ldi	r17, 0x01	; 1
     614:	24 e0       	ldi	r18, 0x04	; 4
     616:	4b e3       	ldi	r20, 0x3B	; 59
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	66 ec       	ldi	r22, 0xC6	; 198
     61c:	71 e0       	ldi	r23, 0x01	; 1
     61e:	84 e2       	ldi	r24, 0x24	; 36
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 3f 04 	call	0x87e	; 0x87e <LogEvent_>
    DelayMs(1500);
     626:	8c ed       	ldi	r24, 0xDC	; 220
     628:	95 e0       	ldi	r25, 0x05	; 5
     62a:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
     62e:	72 c0       	rjmp	.+228    	; 0x714 <testI2C_RTC+0x172>
  

  while (1) {
		
		//wakes the RTC up
    if (!I2CWrite(PCF8583_ADDRESS_WRITE, wakeupSignal, 1)) {
     630:	ce 01       	movw	r24, r28
     632:	05 96       	adiw	r24, 0x05	; 5
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	bc 01       	movw	r22, r24
     63a:	80 ea       	ldi	r24, 0xA0	; 160
     63c:	0e 94 23 01 	call	0x246	; 0x246 <I2CWrite>
     640:	88 23       	and	r24, r24
     642:	79 f4       	brne	.+30     	; 0x662 <testI2C_RTC+0xc0>
      LogError("Wakeup failed");
     644:	03 e4       	ldi	r16, 0x43	; 67
     646:	11 e0       	ldi	r17, 0x01	; 1
     648:	24 e0       	ldi	r18, 0x04	; 4
     64a:	45 e4       	ldi	r20, 0x45	; 69
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	66 ec       	ldi	r22, 0xC6	; 198
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	84 e2       	ldi	r24, 0x24	; 36
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 3f 04 	call	0x87e	; 0x87e <LogEvent_>
      DelayMs(1500);
     65a:	8c ed       	ldi	r24, 0xDC	; 220
     65c:	95 e0       	ldi	r25, 0x05	; 5
     65e:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
    }
		
		//reads the time elapsed until now
    if (!I2CRead(PCF8583_ADDRESS_READ, timeData, 5)) {
     662:	ce 01       	movw	r24, r28
     664:	06 96       	adiw	r24, 0x06	; 6
     666:	45 e0       	ldi	r20, 0x05	; 5
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	bc 01       	movw	r22, r24
     66c:	81 ea       	ldi	r24, 0xA1	; 161
     66e:	0e 94 6d 01 	call	0x2da	; 0x2da <I2CRead>
     672:	88 23       	and	r24, r24
     674:	79 f4       	brne	.+30     	; 0x694 <testI2C_RTC+0xf2>
      LogError("Reading failed");
     676:	01 e5       	ldi	r16, 0x51	; 81
     678:	11 e0       	ldi	r17, 0x01	; 1
     67a:	24 e0       	ldi	r18, 0x04	; 4
     67c:	4b e4       	ldi	r20, 0x4B	; 75
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	66 ec       	ldi	r22, 0xC6	; 198
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	84 e2       	ldi	r24, 0x24	; 36
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 3f 04 	call	0x87e	; 0x87e <LogEvent_>
      DelayMs(1500);
     68c:	8c ed       	ldi	r24, 0xDC	; 220
     68e:	95 e0       	ldi	r25, 0x05	; 5
     690:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
    }

    sprintf((char*)timeString, "Time: %02x:%02x:%02x.%02x", timeData[3], timeData[2], timeData[1], timeData[0]);
     694:	8e 81       	ldd	r24, Y+6	; 0x06
     696:	68 2f       	mov	r22, r24
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	8f 81       	ldd	r24, Y+7	; 0x07
     69c:	48 2f       	mov	r20, r24
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	88 85       	ldd	r24, Y+8	; 0x08
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	89 85       	ldd	r24, Y+9	; 0x09
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	e7 2f       	mov	r30, r23
     6ae:	ef 93       	push	r30
     6b0:	6f 93       	push	r22
     6b2:	65 2f       	mov	r22, r21
     6b4:	6f 93       	push	r22
     6b6:	4f 93       	push	r20
     6b8:	43 2f       	mov	r20, r19
     6ba:	4f 93       	push	r20
     6bc:	2f 93       	push	r18
     6be:	29 2f       	mov	r18, r25
     6c0:	2f 93       	push	r18
     6c2:	8f 93       	push	r24
     6c4:	80 e6       	ldi	r24, 0x60	; 96
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	89 2f       	mov	r24, r25
     6ca:	8f 93       	push	r24
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	8f 93       	push	r24
     6d2:	ce 01       	movw	r24, r28
     6d4:	0b 96       	adiw	r24, 0x0b	; 11
     6d6:	29 2f       	mov	r18, r25
     6d8:	2f 93       	push	r18
     6da:	8f 93       	push	r24
     6dc:	0e 94 ce 0a 	call	0x159c	; 0x159c <sprintf>
     6e0:	8d b7       	in	r24, 0x3d	; 61
     6e2:	9e b7       	in	r25, 0x3e	; 62
     6e4:	0c 96       	adiw	r24, 0x0c	; 12
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
    timeString[19] = '\0';	//	"\0" = end of string (EOS)
     6f0:	1e 8e       	std	Y+30, r1	; 0x1e

    LogInfo((const char*)timeString);
     6f2:	ce 01       	movw	r24, r28
     6f4:	0b 96       	adiw	r24, 0x0b	; 11
     6f6:	8c 01       	movw	r16, r24
     6f8:	22 e0       	ldi	r18, 0x02	; 2
     6fa:	42 e5       	ldi	r20, 0x52	; 82
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	66 ec       	ldi	r22, 0xC6	; 198
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	84 e2       	ldi	r24, 0x24	; 36
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 3f 04 	call	0x87e	; 0x87e <LogEvent_>
    DelayMs(1500);
     70a:	8c ed       	ldi	r24, 0xDC	; 220
     70c:	95 e0       	ldi	r25, 0x05	; 5
     70e:	0e 94 5d 00 	call	0xba	; 0xba <DelayMs>
  }
     712:	8e cf       	rjmp	.-228    	; 0x630 <testI2C_RTC+0x8e>

  Rs232Destroy(globalRS232);
}
     714:	6e 96       	adiw	r28, 0x1e	; 30
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <custom_printf>:

Description: custom function to replace default printf() function. Sends data for printing over Rs232 interface

**********************************************************************************************************************/

int custom_printf(char character, FILE* file) {
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <custom_printf+0x6>
     730:	1f 92       	push	r1
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	7b 83       	std	Y+3, r23	; 0x03
     73a:	6a 83       	std	Y+2, r22	; 0x02
	Rs232SendData((TRs232)globalRS232, (unsigned char*)&character, 1);
     73c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <globalRS232>
     740:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <globalRS232+0x1>
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	9e 01       	movw	r18, r28
     748:	2f 5f       	subi	r18, 0xFF	; 255
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	b9 01       	movw	r22, r18
     74e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Rs232SendData>
	return 1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
}
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <logFunc>:

Description: reads the elapsed on-time of the Real-Time-Clock via the i2c bus

**********************************************************************************************************************/

void logFunc(const TLogEvent* logEvent, const char* message) {
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <logFunc+0x6>
     768:	00 d0       	rcall	.+0      	; 0x76a <logFunc+0x8>
     76a:	00 d0       	rcall	.+0      	; 0x76c <logFunc+0xa>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	9c 83       	std	Y+4, r25	; 0x04
     772:	8b 83       	std	Y+3, r24	; 0x03
     774:	7e 83       	std	Y+6, r23	; 0x06
     776:	6d 83       	std	Y+5, r22	; 0x05
  char* loglevel;

  switch (logEvent->LogLevel) {
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	fc 01       	movw	r30, r24
     77e:	86 81       	ldd	r24, Z+6	; 0x06
     780:	88 2f       	mov	r24, r24
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	91 05       	cpc	r25, r1
     788:	79 f0       	breq	.+30     	; 0x7a8 <logFunc+0x46>
     78a:	84 30       	cpi	r24, 0x04	; 4
     78c:	91 05       	cpc	r25, r1
     78e:	89 f0       	breq	.+34     	; 0x7b2 <logFunc+0x50>
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	29 f4       	brne	.+10     	; 0x79e <logFunc+0x3c>
    case LOG_LEVEL_DEBUG:
      loglevel = "DEBUG:\n";
     794:	8a e7       	ldi	r24, 0x7A	; 122
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	89 83       	std	Y+1, r24	; 0x01
      break;
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <logFunc+0x5a>

    default:
    case LOG_LEVEL_INFO:
      loglevel = "INFO:\n";
     79e:	82 e8       	ldi	r24, 0x82	; 130
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
      break;
     7a6:	0a c0       	rjmp	.+20     	; 0x7bc <logFunc+0x5a>

    case LOG_LEVEL_WARNING:
      loglevel = "WARNING:\n";
     7a8:	89 e8       	ldi	r24, 0x89	; 137
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	9a 83       	std	Y+2, r25	; 0x02
     7ae:	89 83       	std	Y+1, r24	; 0x01
      break;
     7b0:	05 c0       	rjmp	.+10     	; 0x7bc <logFunc+0x5a>

    case LOG_LEVEL_ERROR:
      loglevel = "ERROR:\n";
     7b2:	83 e9       	ldi	r24, 0x93	; 147
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	89 83       	std	Y+1, r24	; 0x01
      break;
     7ba:	00 00       	nop
  }

  printf("result: %s File: %s Line: %u Message: %s  ",loglevel, logEvent->FileName, logEvent->LineNo, message);
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	9c 81       	ldd	r25, Y+4	; 0x04
     7c0:	fc 01       	movw	r30, r24
     7c2:	24 81       	ldd	r18, Z+4	; 0x04
     7c4:	35 81       	ldd	r19, Z+5	; 0x05
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	4e 81       	ldd	r20, Y+6	; 0x06
     7d2:	4f 93       	push	r20
     7d4:	4d 81       	ldd	r20, Y+5	; 0x05
     7d6:	4f 93       	push	r20
     7d8:	43 2f       	mov	r20, r19
     7da:	4f 93       	push	r20
     7dc:	2f 93       	push	r18
     7de:	29 2f       	mov	r18, r25
     7e0:	2f 93       	push	r18
     7e2:	8f 93       	push	r24
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	8f 93       	push	r24
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	8f 93       	push	r24
     7ec:	8b e9       	ldi	r24, 0x9B	; 155
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	89 2f       	mov	r24, r25
     7f2:	8f 93       	push	r24
     7f4:	8b e9       	ldi	r24, 0x9B	; 155
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	8f 93       	push	r24
     7fa:	0e 94 b8 0a 	call	0x1570	; 0x1570 <printf>
     7fe:	8d b7       	in	r24, 0x3d	; 61
     800:	9e b7       	in	r25, 0x3e	; 62
     802:	0a 96       	adiw	r24, 0x0a	; 10
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	00 00       	nop
     810:	26 96       	adiw	r28, 0x06	; 6
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <LogInit>:
Function: LogInit

Parameters: none
**********************************************************************************/

void LogInit(void) {		//initialize Logger
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	memset(&Logger, 0, sizeof(Logger));
     82a:	44 e0       	ldi	r20, 0x04	; 4
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	88 ed       	ldi	r24, 0xD8	; 216
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 66 0a 	call	0x14cc	; 0x14cc <memset>
}
     83a:	00 00       	nop
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <LogSetLogFunction>:

Parameters: - aFunction -> a Logger function
						- aUserData -> custom user data
**********************************************************************************/

void LogSetLogFunction(TLoggerFunction aFunction, void* aUserData) {
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <LogSetLogFunction+0x6>
     848:	00 d0       	rcall	.+0      	; 0x84a <LogSetLogFunction+0x8>
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	7c 83       	std	Y+4, r23	; 0x04
     854:	6b 83       	std	Y+3, r22	; 0x03
	Logger.Function = aFunction;
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <Logger+0x1>
     85e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <Logger>
	Logger.UserData = aUserData;
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	9c 81       	ldd	r25, Y+4	; 0x04
     866:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <Logger+0x3>
     86a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <Logger+0x2>
}
     86e:	00 00       	nop
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <LogEvent_>:
						- aLineNo				-> Number of the Line where the Logger gets called
						- aLogLevel			-> ERROR / INFO / WARNING / DEBUG
						- aMessage			-> custom message from user
**********************************************************************************/

void LogEvent_(const char* aFileName, const char* aFunctionName, unsigned int aLineNo, TLogLevel aLogLevel, const char* aMessage) {
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	60 97       	sbiw	r28, 0x10	; 16
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	99 87       	std	Y+9, r25	; 0x09
     898:	88 87       	std	Y+8, r24	; 0x08
     89a:	7b 87       	std	Y+11, r23	; 0x0b
     89c:	6a 87       	std	Y+10, r22	; 0x0a
     89e:	5d 87       	std	Y+13, r21	; 0x0d
     8a0:	4c 87       	std	Y+12, r20	; 0x0c
     8a2:	2e 87       	std	Y+14, r18	; 0x0e
     8a4:	18 8b       	std	Y+16, r17	; 0x10
     8a6:	0f 87       	std	Y+15, r16	; 0x0f
	TLogEvent logEvent;

	if (!Logger.Function) {
     8a8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <Logger>
     8ac:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <Logger+0x1>
     8b0:	89 2b       	or	r24, r25
     8b2:	61 f1       	breq	.+88     	; 0x90c <LogEvent_+0x8e>
		return;
	}

	memset(&logEvent, 0, sizeof(logEvent));
     8b4:	47 e0       	ldi	r20, 0x07	; 7
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <memset>

	logEvent.FileName = aFileName;
     8c4:	88 85       	ldd	r24, Y+8	; 0x08
     8c6:	99 85       	ldd	r25, Y+9	; 0x09
     8c8:	9a 83       	std	Y+2, r25	; 0x02
     8ca:	89 83       	std	Y+1, r24	; 0x01
	logEvent.FunctionName = aFunctionName;
     8cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8ce:	9b 85       	ldd	r25, Y+11	; 0x0b
     8d0:	9c 83       	std	Y+4, r25	; 0x04
     8d2:	8b 83       	std	Y+3, r24	; 0x03
	logEvent.LineNo = aLineNo;
     8d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8d6:	9d 85       	ldd	r25, Y+13	; 0x0d
     8d8:	9e 83       	std	Y+6, r25	; 0x06
     8da:	8d 83       	std	Y+5, r24	; 0x05
	logEvent.LogLevel = aLogLevel;
     8dc:	8e 85       	ldd	r24, Y+14	; 0x0e
     8de:	8f 83       	std	Y+7, r24	; 0x07

	if (Logger.Function) {
     8e0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <Logger>
     8e4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <Logger+0x1>
     8e8:	89 2b       	or	r24, r25
     8ea:	89 f0       	breq	.+34     	; 0x90e <LogEvent_+0x90>
		Logger.Function(&logEvent, Logger.UserData, aMessage);
     8ec:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <Logger>
     8f0:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <Logger+0x1>
     8f4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Logger+0x2>
     8f8:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <Logger+0x3>
     8fc:	4f 85       	ldd	r20, Y+15	; 0x0f
     8fe:	58 89       	ldd	r21, Y+16	; 0x10
     900:	bc 01       	movw	r22, r24
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	f9 01       	movw	r30, r18
     908:	09 95       	icall
     90a:	01 c0       	rjmp	.+2      	; 0x90e <LogEvent_+0x90>

void LogEvent_(const char* aFileName, const char* aFunctionName, unsigned int aLineNo, TLogLevel aLogLevel, const char* aMessage) {
	TLogEvent logEvent;

	if (!Logger.Function) {
		return;
     90c:	00 00       	nop
	logEvent.LogLevel = aLogLevel;

	if (Logger.Function) {
		Logger.Function(&logEvent, Logger.UserData, aMessage);
	}
}
     90e:	60 96       	adiw	r28, 0x10	; 16
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <RingBufferCreate>:
  unsigned char writeIndex;  // Index of the write position
  unsigned char* buffer;     // Buffer for data content
  unsigned char size;        // Buffersize
};

TRingBuffer RingBufferCreate(unsigned char aSize) {
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <RingBufferCreate+0x6>
     92a:	1f 92       	push	r1
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	8b 83       	std	Y+3, r24	; 0x03
  TRingBuffer ringBuffer;

  ringBuffer = (TRingBuffer)calloc(1, sizeof(struct RingBufferStruct));
     932:	65 e0       	ldi	r22, 0x05	; 5
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 29 09 	call	0x1252	; 0x1252 <calloc>
     93e:	9a 83       	std	Y+2, r25	; 0x02
     940:	89 83       	std	Y+1, r24	; 0x01

  if (!ringBuffer)
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	89 2b       	or	r24, r25
     948:	19 f4       	brne	.+6      	; 0x950 <RingBufferCreate+0x2c>
    return NULL;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	20 c0       	rjmp	.+64     	; 0x990 <RingBufferCreate+0x6c>

  ringBuffer->buffer = (unsigned char*)malloc(aSize);
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 45 09 	call	0x128a	; 0x128a <malloc>
     95a:	9c 01       	movw	r18, r24
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	fc 01       	movw	r30, r24
     962:	33 83       	std	Z+3, r19	; 0x03
     964:	22 83       	std	Z+2, r18	; 0x02

  if (!ringBuffer->buffer) {
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	fc 01       	movw	r30, r24
     96c:	82 81       	ldd	r24, Z+2	; 0x02
     96e:	93 81       	ldd	r25, Z+3	; 0x03
     970:	89 2b       	or	r24, r25
     972:	39 f4       	brne	.+14     	; 0x982 <RingBufferCreate+0x5e>
    RingBufferDestroy(ringBuffer);
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	0e 94 ce 04 	call	0x99c	; 0x99c <RingBufferDestroy>
    return NULL;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	07 c0       	rjmp	.+14     	; 0x990 <RingBufferCreate+0x6c>
  }

  ringBuffer->size = aSize;
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	2b 81       	ldd	r18, Y+3	; 0x03
     988:	fc 01       	movw	r30, r24
     98a:	24 83       	std	Z+4, r18	; 0x04

  return ringBuffer;
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <RingBufferDestroy>:

void RingBufferDestroy(TRingBuffer aRingBuffer) {
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <RingBufferDestroy+0x6>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
  if (!aRingBuffer)
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	89 2b       	or	r24, r25
     9b0:	99 f0       	breq	.+38     	; 0x9d8 <RingBufferDestroy+0x3c>
    return;

  if (aRingBuffer->buffer)
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	fc 01       	movw	r30, r24
     9b8:	82 81       	ldd	r24, Z+2	; 0x02
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2b       	or	r24, r25
     9be:	39 f0       	breq	.+14     	; 0x9ce <RingBufferDestroy+0x32>
    free(aRingBuffer->buffer);
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	fc 01       	movw	r30, r24
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	0e 94 dd 09 	call	0x13ba	; 0x13ba <free>

  free(aRingBuffer);
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <free>
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <RingBufferDestroy+0x3e>
  return ringBuffer;
}

void RingBufferDestroy(TRingBuffer aRingBuffer) {
  if (!aRingBuffer)
    return;
     9d8:	00 00       	nop

  if (aRingBuffer->buffer)
    free(aRingBuffer->buffer);

  free(aRingBuffer);
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <RingBufferWrite>:

TBool RingBufferWrite(TRingBuffer aRingBuffer, unsigned char aByte) {
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <RingBufferWrite+0x6>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <RingBufferWrite+0x8>
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	9b 83       	std	Y+3, r25	; 0x03
     9f2:	8a 83       	std	Y+2, r24	; 0x02
     9f4:	6c 83       	std	Y+4, r22	; 0x04
  unsigned char writeIndex = aRingBuffer->writeIndex;
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	9b 81       	ldd	r25, Y+3	; 0x03
     9fa:	fc 01       	movw	r30, r24
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
     9fe:	89 83       	std	Y+1, r24	; 0x01

  writeIndex++;
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	89 83       	std	Y+1, r24	; 0x01
  if (writeIndex >= aRingBuffer->size)
     a06:	8a 81       	ldd	r24, Y+2	; 0x02
     a08:	9b 81       	ldd	r25, Y+3	; 0x03
     a0a:	fc 01       	movw	r30, r24
     a0c:	94 81       	ldd	r25, Z+4	; 0x04
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	89 17       	cp	r24, r25
     a12:	48 f0       	brcs	.+18     	; 0xa26 <RingBufferWrite+0x42>
   
  if (writeIndex == aRingBuffer->readIndex)
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	fc 01       	movw	r30, r24
     a1a:	90 81       	ld	r25, Z
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	98 17       	cp	r25, r24
     a20:	11 f4       	brne	.+4      	; 0xa26 <RingBufferWrite+0x42>
    return EFALSE;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	16 c0       	rjmp	.+44     	; 0xa52 <RingBufferWrite+0x6e>

  aRingBuffer->buffer[aRingBuffer->writeIndex] = aByte;
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	fc 01       	movw	r30, r24
     a2c:	22 81       	ldd	r18, Z+2	; 0x02
     a2e:	33 81       	ldd	r19, Z+3	; 0x03
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	9b 81       	ldd	r25, Y+3	; 0x03
     a34:	fc 01       	movw	r30, r24
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	2c 81       	ldd	r18, Y+4	; 0x04
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
  aRingBuffer->writeIndex = writeIndex;
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	9b 81       	ldd	r25, Y+3	; 0x03
     a4a:	29 81       	ldd	r18, Y+1	; 0x01
     a4c:	fc 01       	movw	r30, r24
     a4e:	21 83       	std	Z+1, r18	; 0x01

  return ETRUE;
     a50:	81 e0       	ldi	r24, 0x01	; 1
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <RingBufferRead>:

TBool RingBufferRead(TRingBuffer aRingBuffer, unsigned char* aByte) {
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <RingBufferRead+0x6>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <RingBufferRead+0x8>
     a68:	1f 92       	push	r1
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	9b 83       	std	Y+3, r25	; 0x03
     a70:	8a 83       	std	Y+2, r24	; 0x02
     a72:	7d 83       	std	Y+5, r23	; 0x05
     a74:	6c 83       	std	Y+4, r22	; 0x04
  unsigned char readIndex = aRingBuffer->readIndex;
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	9b 81       	ldd	r25, Y+3	; 0x03
     a7a:	fc 01       	movw	r30, r24
     a7c:	80 81       	ld	r24, Z
     a7e:	89 83       	std	Y+1, r24	; 0x01

  if (readIndex == aRingBuffer->writeIndex)
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	9b 81       	ldd	r25, Y+3	; 0x03
     a84:	fc 01       	movw	r30, r24
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	98 17       	cp	r25, r24
     a8c:	11 f4       	brne	.+4      	; 0xa92 <RingBufferRead+0x32>
    return EFALSE;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	24 c0       	rjmp	.+72     	; 0xada <RingBufferRead+0x7a>

  readIndex++;
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	8f 5f       	subi	r24, 0xFF	; 255
     a96:	89 83       	std	Y+1, r24	; 0x01
  if (readIndex >= aRingBuffer->size)
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	9b 81       	ldd	r25, Y+3	; 0x03
     a9c:	fc 01       	movw	r30, r24
     a9e:	94 81       	ldd	r25, Z+4	; 0x04
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	89 17       	cp	r24, r25
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <RingBufferRead+0x48>
    readIndex = 0;
     aa6:	19 82       	std	Y+1, r1	; 0x01

  *aByte = aRingBuffer->buffer[aRingBuffer->readIndex];
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	9b 81       	ldd	r25, Y+3	; 0x03
     aac:	fc 01       	movw	r30, r24
     aae:	22 81       	ldd	r18, Z+2	; 0x02
     ab0:	33 81       	ldd	r19, Z+3	; 0x03
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	9b 81       	ldd	r25, Y+3	; 0x03
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	88 2f       	mov	r24, r24
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	fc 01       	movw	r30, r24
     ac4:	20 81       	ld	r18, Z
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	9d 81       	ldd	r25, Y+5	; 0x05
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
  aRingBuffer->readIndex = readIndex;
     ace:	8a 81       	ldd	r24, Y+2	; 0x02
     ad0:	9b 81       	ldd	r25, Y+3	; 0x03
     ad2:	29 81       	ldd	r18, Y+1	; 0x01
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18

  return ETRUE;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
}
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <Rs232InitCon0>:
		}else{
			break;
		}
	}
	return i;
}
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	29 97       	sbiw	r28, 0x09	; 9
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	9b 83       	std	Y+3, r25	; 0x03
     b04:	8a 83       	std	Y+2, r24	; 0x02
     b06:	4c 83       	std	Y+4, r20	; 0x04
     b08:	5d 83       	std	Y+5, r21	; 0x05
     b0a:	6e 83       	std	Y+6, r22	; 0x06
     b0c:	7f 83       	std	Y+7, r23	; 0x07
     b0e:	39 87       	std	Y+9, r19	; 0x09
     b10:	28 87       	std	Y+8, r18	; 0x08
     b12:	80 ec       	ldi	r24, 0xC0	; 192
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	fc 01       	movw	r30, r24
     b18:	10 82       	st	Z, r1
     b1a:	81 ec       	ldi	r24, 0xC1	; 193
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	10 82       	st	Z, r1
     b22:	82 ec       	ldi	r24, 0xC2	; 194
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	fc 01       	movw	r30, r24
     b28:	10 82       	st	Z, r1
     b2a:	04 ec       	ldi	r16, 0xC4	; 196
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	88 85       	ldd	r24, Y+8	; 0x08
     b30:	99 85       	ldd	r25, Y+9	; 0x09
     b32:	fc 01       	movw	r30, r24
     b34:	42 81       	ldd	r20, Z+2	; 0x02
     b36:	53 81       	ldd	r21, Z+3	; 0x03
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	9d 81       	ldd	r25, Y+5	; 0x05
     b3c:	ae 81       	ldd	r26, Y+6	; 0x06
     b3e:	bf 81       	ldd	r27, Y+7	; 0x07
     b40:	9e 01       	movw	r18, r28
     b42:	2f 5f       	subi	r18, 0xFF	; 255
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	bc 01       	movw	r22, r24
     b48:	cd 01       	movw	r24, r26
     b4a:	0e 94 33 06 	call	0xc66	; 0xc66 <Rs232CalculateBaudrateRegisterValue>
     b4e:	f8 01       	movw	r30, r16
     b50:	91 83       	std	Z+1, r25	; 0x01
     b52:	80 83       	st	Z, r24
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	88 23       	and	r24, r24
     b58:	49 f0       	breq	.+18     	; 0xb6c <Rs232InitCon0+0x82>
     b5a:	80 ec       	ldi	r24, 0xC0	; 192
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	20 ec       	ldi	r18, 0xC0	; 192
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	f9 01       	movw	r30, r18
     b64:	20 81       	ld	r18, Z
     b66:	22 60       	ori	r18, 0x02	; 2
     b68:	fc 01       	movw	r30, r24
     b6a:	20 83       	st	Z, r18
     b6c:	82 ec       	ldi	r24, 0xC2	; 194
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	22 ec       	ldi	r18, 0xC2	; 194
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	f9 01       	movw	r30, r18
     b76:	20 81       	ld	r18, Z
     b78:	26 60       	ori	r18, 0x06	; 6
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
     b7e:	81 ec       	ldi	r24, 0xC1	; 193
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	21 ec       	ldi	r18, 0xC1	; 193
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	f9 01       	movw	r30, r18
     b88:	20 81       	ld	r18, Z
     b8a:	28 69       	ori	r18, 0x98	; 152
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
     b90:	00 00       	nop
     b92:	29 96       	adiw	r28, 0x09	; 9
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <Rs232InitCon1>:
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	29 97       	sbiw	r28, 0x09	; 9
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	9b 83       	std	Y+3, r25	; 0x03
     bc2:	8a 83       	std	Y+2, r24	; 0x02
     bc4:	4c 83       	std	Y+4, r20	; 0x04
     bc6:	5d 83       	std	Y+5, r21	; 0x05
     bc8:	6e 83       	std	Y+6, r22	; 0x06
     bca:	7f 83       	std	Y+7, r23	; 0x07
     bcc:	39 87       	std	Y+9, r19	; 0x09
     bce:	28 87       	std	Y+8, r18	; 0x08
     bd0:	88 ec       	ldi	r24, 0xC8	; 200
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	fc 01       	movw	r30, r24
     bd6:	10 82       	st	Z, r1
     bd8:	89 ec       	ldi	r24, 0xC9	; 201
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	fc 01       	movw	r30, r24
     bde:	10 82       	st	Z, r1
     be0:	8a ec       	ldi	r24, 0xCA	; 202
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	fc 01       	movw	r30, r24
     be6:	10 82       	st	Z, r1
     be8:	04 ec       	ldi	r16, 0xC4	; 196
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	88 85       	ldd	r24, Y+8	; 0x08
     bee:	99 85       	ldd	r25, Y+9	; 0x09
     bf0:	fc 01       	movw	r30, r24
     bf2:	42 81       	ldd	r20, Z+2	; 0x02
     bf4:	53 81       	ldd	r21, Z+3	; 0x03
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	9d 81       	ldd	r25, Y+5	; 0x05
     bfa:	ae 81       	ldd	r26, Y+6	; 0x06
     bfc:	bf 81       	ldd	r27, Y+7	; 0x07
     bfe:	9e 01       	movw	r18, r28
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 33 06 	call	0xc66	; 0xc66 <Rs232CalculateBaudrateRegisterValue>
     c0c:	f8 01       	movw	r30, r16
     c0e:	91 83       	std	Z+1, r25	; 0x01
     c10:	80 83       	st	Z, r24
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	88 23       	and	r24, r24
     c16:	49 f0       	breq	.+18     	; 0xc2a <Rs232InitCon1+0x82>
     c18:	88 ec       	ldi	r24, 0xC8	; 200
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	28 ec       	ldi	r18, 0xC8	; 200
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	f9 01       	movw	r30, r18
     c22:	20 81       	ld	r18, Z
     c24:	22 60       	ori	r18, 0x02	; 2
     c26:	fc 01       	movw	r30, r24
     c28:	20 83       	st	Z, r18
     c2a:	8a ec       	ldi	r24, 0xCA	; 202
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	2a ec       	ldi	r18, 0xCA	; 202
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	f9 01       	movw	r30, r18
     c34:	20 81       	ld	r18, Z
     c36:	26 60       	ori	r18, 0x06	; 6
     c38:	fc 01       	movw	r30, r24
     c3a:	20 83       	st	Z, r18
     c3c:	89 ec       	ldi	r24, 0xC9	; 201
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	29 ec       	ldi	r18, 0xC9	; 201
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	f9 01       	movw	r30, r18
     c46:	20 81       	ld	r18, Z
     c48:	28 69       	ori	r18, 0x98	; 152
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
     c4e:	00 00       	nop
     c50:	29 96       	adiw	r28, 0x09	; 9
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <Rs232CalculateBaudrateRegisterValue>:
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	2a 97       	sbiw	r28, 0x0a	; 10
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	6b 83       	std	Y+3, r22	; 0x03
     c7c:	7c 83       	std	Y+4, r23	; 0x04
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	58 87       	std	Y+8, r21	; 0x08
     c84:	4f 83       	std	Y+7, r20	; 0x07
     c86:	3a 87       	std	Y+10, r19	; 0x0a
     c88:	29 87       	std	Y+9, r18	; 0x09
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	fc 01       	movw	r30, r24
     c90:	10 82       	st	Z, r1
     c92:	8f 81       	ldd	r24, Y+7	; 0x07
     c94:	98 85       	ldd	r25, Y+8	; 0x08
     c96:	cc 01       	movw	r24, r24
     c98:	a0 e0       	ldi	r26, 0x00	; 0
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	aa 1f       	adc	r26, r26
     ca2:	bb 1f       	adc	r27, r27
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	aa 1f       	adc	r26, r26
     caa:	bb 1f       	adc	r27, r27
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	aa 1f       	adc	r26, r26
     cb2:	bb 1f       	adc	r27, r27
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	aa 1f       	adc	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	9c 01       	movw	r18, r24
     cbe:	ad 01       	movw	r20, r26
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	ad 81       	ldd	r26, Y+5	; 0x05
     cc6:	be 81       	ldd	r27, Y+6	; 0x06
     cc8:	bc 01       	movw	r22, r24
     cca:	cd 01       	movw	r24, r26
     ccc:	0e 94 ed 08 	call	0x11da	; 0x11da <__udivmodsi4>
     cd0:	da 01       	movw	r26, r20
     cd2:	c9 01       	movw	r24, r18
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	90 41       	sbci	r25, 0x10	; 16
     ce2:	58 f0       	brcs	.+22     	; 0xcfa <Rs232CalculateBaudrateRegisterValue+0x94>
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	2a 96       	adiw	r28, 0x0a	; 10
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <Rs232Create>:
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	2b 97       	sbiw	r28, 0x0b	; 11
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	8b 83       	std	Y+3, r24	; 0x03
     d2a:	4c 83       	std	Y+4, r20	; 0x04
     d2c:	5d 83       	std	Y+5, r21	; 0x05
     d2e:	6e 83       	std	Y+6, r22	; 0x06
     d30:	7f 83       	std	Y+7, r23	; 0x07
     d32:	08 87       	std	Y+8, r16	; 0x08
     d34:	19 87       	std	Y+9, r17	; 0x09
     d36:	2a 87       	std	Y+10, r18	; 0x0a
     d38:	3b 87       	std	Y+11, r19	; 0x0b
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	18 f0       	brcs	.+6      	; 0xd46 <Rs232Create+0x36>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	86 c0       	rjmp	.+268    	; 0xe52 <Rs232Create+0x142>
     d46:	65 e0       	ldi	r22, 0x05	; 5
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 29 09 	call	0x1252	; 0x1252 <calloc>
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	89 2b       	or	r24, r25
     d5c:	19 f4       	brne	.+6      	; 0xd64 <Rs232Create+0x54>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	77 c0       	rjmp	.+238    	; 0xe52 <Rs232Create+0x142>
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
     d6e:	88 85       	ldd	r24, Y+8	; 0x08
     d70:	0e 94 92 04 	call	0x924	; 0x924 <RingBufferCreate>
     d74:	9c 01       	movw	r18, r24
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	fc 01       	movw	r30, r24
     d7c:	32 83       	std	Z+2, r19	; 0x02
     d7e:	21 83       	std	Z+1, r18	; 0x01
     d80:	89 85       	ldd	r24, Y+9	; 0x09
     d82:	0e 94 92 04 	call	0x924	; 0x924 <RingBufferCreate>
     d86:	9c 01       	movw	r18, r24
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	fc 01       	movw	r30, r24
     d8e:	34 83       	std	Z+4, r19	; 0x04
     d90:	23 83       	std	Z+3, r18	; 0x03
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	fc 01       	movw	r30, r24
     d98:	81 81       	ldd	r24, Z+1	; 0x01
     d9a:	92 81       	ldd	r25, Z+2	; 0x02
     d9c:	89 2b       	or	r24, r25
     d9e:	39 f0       	breq	.+14     	; 0xdae <Rs232Create+0x9e>
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	fc 01       	movw	r30, r24
     da6:	83 81       	ldd	r24, Z+3	; 0x03
     da8:	94 81       	ldd	r25, Z+4	; 0x04
     daa:	89 2b       	or	r24, r25
     dac:	39 f4       	brne	.+14     	; 0xdbc <Rs232Create+0xac>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	0e 94 34 07 	call	0xe68	; 0xe68 <Rs232Destroy>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	4b c0       	rjmp	.+150    	; 0xe52 <Rs232Create+0x142>
     dbc:	f8 94       	cli
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	79 f0       	breq	.+30     	; 0xde6 <Rs232Create+0xd6>
     dc8:	9e 01       	movw	r18, r28
     dca:	28 5f       	subi	r18, 0xF8	; 248
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	ae 81       	ldd	r26, Y+6	; 0x06
     dd4:	bf 81       	ldd	r27, Y+7	; 0x07
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	ac 01       	movw	r20, r24
     ddc:	bd 01       	movw	r22, r26
     dde:	cf 01       	movw	r24, r30
     de0:	0e 94 75 05 	call	0xaea	; 0xaea <Rs232InitCon0>
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <Rs232Create+0xf4>
     de6:	9e 01       	movw	r18, r28
     de8:	28 5f       	subi	r18, 0xF8	; 248
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	ae 81       	ldd	r26, Y+6	; 0x06
     df2:	bf 81       	ldd	r27, Y+7	; 0x07
     df4:	e9 81       	ldd	r30, Y+1	; 0x01
     df6:	fa 81       	ldd	r31, Y+2	; 0x02
     df8:	ac 01       	movw	r20, r24
     dfa:	bd 01       	movw	r22, r26
     dfc:	cf 01       	movw	r24, r30
     dfe:	0e 94 d4 05 	call	0xba8	; 0xba8 <Rs232InitCon1>
     e02:	00 00       	nop
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	8e 52       	subi	r24, 0x2E	; 46
     e10:	9e 4f       	sbci	r25, 0xFE	; 254
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	89 2b       	or	r24, r25
     e1a:	61 f0       	breq	.+24     	; 0xe34 <Rs232Create+0x124>
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	8e 52       	subi	r24, 0x2E	; 46
     e28:	9e 4f       	sbci	r25, 0xFE	; 254
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	0e 94 34 07 	call	0xe68	; 0xe68 <Rs232Destroy>
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	8e 52       	subi	r24, 0x2E	; 46
     e40:	9e 4f       	sbci	r25, 0xFE	; 254
     e42:	29 81       	ldd	r18, Y+1	; 0x01
     e44:	3a 81       	ldd	r19, Y+2	; 0x02
     e46:	fc 01       	movw	r30, r24
     e48:	31 83       	std	Z+1, r19	; 0x01
     e4a:	20 83       	st	Z, r18
     e4c:	78 94       	sei
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	2b 96       	adiw	r28, 0x0b	; 11
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <Rs232Destroy>:
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <Rs232Destroy+0x6>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	89 2b       	or	r24, r25
     e7c:	09 f4       	brne	.+2      	; 0xe80 <Rs232Destroy+0x18>
     e7e:	49 c0       	rjmp	.+146    	; 0xf12 <Rs232Destroy+0xaa>
     e80:	f8 94       	cli
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	fc 01       	movw	r30, r24
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	92 81       	ldd	r25, Z+2	; 0x02
     e8c:	89 2b       	or	r24, r25
     e8e:	39 f0       	breq	.+14     	; 0xe9e <Rs232Destroy+0x36>
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	fc 01       	movw	r30, r24
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	92 81       	ldd	r25, Z+2	; 0x02
     e9a:	0e 94 ce 04 	call	0x99c	; 0x99c <RingBufferDestroy>
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	fc 01       	movw	r30, r24
     ea4:	83 81       	ldd	r24, Z+3	; 0x03
     ea6:	94 81       	ldd	r25, Z+4	; 0x04
     ea8:	89 2b       	or	r24, r25
     eaa:	39 f0       	breq	.+14     	; 0xeba <Rs232Destroy+0x52>
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	83 81       	ldd	r24, Z+3	; 0x03
     eb4:	94 81       	ldd	r25, Z+4	; 0x04
     eb6:	0e 94 ce 04 	call	0x99c	; 0x99c <RingBufferDestroy>
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	fc 01       	movw	r30, r24
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	51 f0       	breq	.+20     	; 0xee0 <Rs232Destroy+0x78>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 05       	cpc	r25, r1
     ed0:	61 f0       	breq	.+24     	; 0xeea <Rs232Destroy+0x82>
     ed2:	89 2b       	or	r24, r25
     ed4:	59 f4       	brne	.+22     	; 0xeec <Rs232Destroy+0x84>
     ed6:	81 ec       	ldi	r24, 0xC1	; 193
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	10 82       	st	Z, r1
     ede:	06 c0       	rjmp	.+12     	; 0xeec <Rs232Destroy+0x84>
     ee0:	89 ec       	ldi	r24, 0xC9	; 201
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	10 82       	st	Z, r1
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <Rs232Destroy+0x84>
     eea:	00 00       	nop
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	8e 52       	subi	r24, 0x2E	; 46
     efe:	9e 4f       	sbci	r25, 0xFE	; 254
     f00:	fc 01       	movw	r30, r24
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <free>
     f0e:	78 94       	sei
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <Rs232Destroy+0xac>
     f12:	00 00       	nop
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <Rs232SendData>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 d0       	rcall	.+0      	; 0xf24 <Rs232SendData+0x6>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <Rs232SendData+0x8>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <Rs232SendData+0xa>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9b 83       	std	Y+3, r25	; 0x03
     f2e:	8a 83       	std	Y+2, r24	; 0x02
     f30:	7d 83       	std	Y+5, r23	; 0x05
     f32:	6c 83       	std	Y+4, r22	; 0x04
     f34:	4e 83       	std	Y+6, r20	; 0x06
     f36:	19 82       	std	Y+1, r1	; 0x01
     f38:	16 c0       	rjmp	.+44     	; 0xf66 <Rs232SendData+0x48>
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	fc 01       	movw	r30, r24
     f4a:	20 81       	ld	r18, Z
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	fc 01       	movw	r30, r24
     f52:	81 81       	ldd	r24, Z+1	; 0x01
     f54:	92 81       	ldd	r25, Z+2	; 0x02
     f56:	62 2f       	mov	r22, r18
     f58:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <RingBufferWrite>
     f5c:	88 23       	and	r24, r24
     f5e:	41 f0       	breq	.+16     	; 0xf70 <Rs232SendData+0x52>
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	99 81       	ldd	r25, Y+1	; 0x01
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
     f6a:	98 17       	cp	r25, r24
     f6c:	30 f3       	brcs	.-52     	; 0xf3a <Rs232SendData+0x1c>
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <Rs232SendData+0x54>
     f70:	00 00       	nop
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	88 23       	and	r24, r24
     f76:	f9 f0       	breq	.+62     	; 0xfb6 <Rs232SendData+0x98>
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	fc 01       	movw	r30, r24
     f7e:	80 81       	ld	r24, Z
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	19 f0       	breq	.+6      	; 0xf8e <Rs232SendData+0x70>
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	59 f0       	breq	.+22     	; 0xfa2 <Rs232SendData+0x84>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <Rs232SendData+0x98>
     f8e:	81 ec       	ldi	r24, 0xC1	; 193
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	21 ec       	ldi	r18, 0xC1	; 193
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	20 62       	ori	r18, 0x20	; 32
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <Rs232SendData+0x98>
     fa2:	89 ec       	ldi	r24, 0xC9	; 201
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	29 ec       	ldi	r18, 0xC9	; 201
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	f9 01       	movw	r30, r18
     fac:	20 81       	ld	r18, Z
     fae:	20 62       	ori	r18, 0x20	; 32
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
     fb4:	00 00       	nop
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	26 96       	adiw	r28, 0x06	; 6
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <__vector_21>:


ISR(USART0_UDRE_vect){
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	1f 92       	push	r1
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if(RingBufferRead(Rs232[ERS232_NO_0]->SendBuffer, &data))
     ff8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     ffc:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__data_end+0x1>
    1000:	fc 01       	movw	r30, r24
    1002:	81 81       	ldd	r24, Z+1	; 0x01
    1004:	92 81       	ldd	r25, Z+2	; 0x02
    1006:	9e 01       	movw	r18, r28
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	b9 01       	movw	r22, r18
    100e:	0e 94 30 05 	call	0xa60	; 0xa60 <RingBufferRead>
    1012:	88 23       	and	r24, r24
    1014:	31 f0       	breq	.+12     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
		UDR0 = data;
    1016:	86 ec       	ldi	r24, 0xC6	; 198
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	29 81       	ldd	r18, Y+1	; 0x01
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
	else
		//disable Interrupt
		UCSR0B &= ~(1 << UDRIE0);
}
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
	
	if(RingBufferRead(Rs232[ERS232_NO_0]->SendBuffer, &data))
		UDR0 = data;
	else
		//disable Interrupt
		UCSR0B &= ~(1 << UDRIE0);
    1022:	81 ec       	ldi	r24, 0xC1	; 193
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	21 ec       	ldi	r18, 0xC1	; 193
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	2f 7d       	andi	r18, 0xDF	; 223
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
}
    1034:	00 00       	nop
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <__vector_29>:

ISR(USART1_UDRE_vect){
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	2f 93       	push	r18
    106e:	3f 93       	push	r19
    1070:	4f 93       	push	r20
    1072:	5f 93       	push	r21
    1074:	6f 93       	push	r22
    1076:	7f 93       	push	r23
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	af 93       	push	r26
    107e:	bf 93       	push	r27
    1080:	ef 93       	push	r30
    1082:	ff 93       	push	r31
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	1f 92       	push	r1
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	if(RingBufferRead(Rs232[ERS232_NO_1]->SendBuffer, &data)){
    108e:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end+0x2>
    1092:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x3>
    1096:	fc 01       	movw	r30, r24
    1098:	81 81       	ldd	r24, Z+1	; 0x01
    109a:	92 81       	ldd	r25, Z+2	; 0x02
    109c:	9e 01       	movw	r18, r28
    109e:	2f 5f       	subi	r18, 0xFF	; 255
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	b9 01       	movw	r22, r18
    10a4:	0e 94 30 05 	call	0xa60	; 0xa60 <RingBufferRead>
    10a8:	88 23       	and	r24, r24
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <__vector_29+0x58>
		UDR1 = data;	
    10ac:	8e ec       	ldi	r24, 0xCE	; 206
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	29 81       	ldd	r18, Y+1	; 0x01
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 83       	st	Z, r18
	}else{
		//disable Interrupt
		UCSR1B &= ~(1 << UDRIE1);
	}
}
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <__vector_29+0x6a>
	
	if(RingBufferRead(Rs232[ERS232_NO_1]->SendBuffer, &data)){
		UDR1 = data;	
	}else{
		//disable Interrupt
		UCSR1B &= ~(1 << UDRIE1);
    10b8:	89 ec       	ldi	r24, 0xC9	; 201
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	29 ec       	ldi	r18, 0xC9	; 201
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	2f 7d       	andi	r18, 0xDF	; 223
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
	}
}
    10ca:	00 00       	nop
    10cc:	0f 90       	pop	r0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <__vector_20>:

ISR(USART0_RX_vect){
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	RingBufferWrite(Rs232[ERS232_NO_0]->RecieveBuffer, UDR0);
    1122:	86 ec       	ldi	r24, 0xC6	; 198
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	fc 01       	movw	r30, r24
    1128:	20 81       	ld	r18, Z
    112a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
    112e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__data_end+0x1>
    1132:	fc 01       	movw	r30, r24
    1134:	83 81       	ldd	r24, Z+3	; 0x03
    1136:	94 81       	ldd	r25, Z+4	; 0x04
    1138:	62 2f       	mov	r22, r18
    113a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <RingBufferWrite>
}
    113e:	00 00       	nop
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <__vector_28>:

ISR(USART1_RX_vect){
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	RingBufferWrite(Rs232[ERS232_NO_1]->RecieveBuffer, UDR1);
    1194:	8e ec       	ldi	r24, 0xCE	; 206
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	fc 01       	movw	r30, r24
    119a:	20 81       	ld	r18, Z
    119c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end+0x2>
    11a0:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <__data_end+0x3>
    11a4:	fc 01       	movw	r30, r24
    11a6:	83 81       	ldd	r24, Z+3	; 0x03
    11a8:	94 81       	ldd	r25, Z+4	; 0x04
    11aa:	62 2f       	mov	r22, r18
    11ac:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <RingBufferWrite>
    11b0:	00 00       	nop
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f005f>
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__udivmodsi4>:
    11da:	a1 e2       	ldi	r26, 0x21	; 33
    11dc:	1a 2e       	mov	r1, r26
    11de:	aa 1b       	sub	r26, r26
    11e0:	bb 1b       	sub	r27, r27
    11e2:	fd 01       	movw	r30, r26
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <__udivmodsi4_ep>

000011e6 <__udivmodsi4_loop>:
    11e6:	aa 1f       	adc	r26, r26
    11e8:	bb 1f       	adc	r27, r27
    11ea:	ee 1f       	adc	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	a2 17       	cp	r26, r18
    11f0:	b3 07       	cpc	r27, r19
    11f2:	e4 07       	cpc	r30, r20
    11f4:	f5 07       	cpc	r31, r21
    11f6:	20 f0       	brcs	.+8      	; 0x1200 <__udivmodsi4_ep>
    11f8:	a2 1b       	sub	r26, r18
    11fa:	b3 0b       	sbc	r27, r19
    11fc:	e4 0b       	sbc	r30, r20
    11fe:	f5 0b       	sbc	r31, r21

00001200 <__udivmodsi4_ep>:
    1200:	66 1f       	adc	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	1a 94       	dec	r1
    120a:	69 f7       	brne	.-38     	; 0x11e6 <__udivmodsi4_loop>
    120c:	60 95       	com	r22
    120e:	70 95       	com	r23
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	bd 01       	movw	r22, r26
    121a:	cf 01       	movw	r24, r30
    121c:	08 95       	ret

0000121e <__muluhisi3>:
    121e:	0e 94 1a 09 	call	0x1234	; 0x1234 <__umulhisi3>
    1222:	a5 9f       	mul	r26, r21
    1224:	90 0d       	add	r25, r0
    1226:	b4 9f       	mul	r27, r20
    1228:	90 0d       	add	r25, r0
    122a:	a4 9f       	mul	r26, r20
    122c:	80 0d       	add	r24, r0
    122e:	91 1d       	adc	r25, r1
    1230:	11 24       	eor	r1, r1
    1232:	08 95       	ret

00001234 <__umulhisi3>:
    1234:	a2 9f       	mul	r26, r18
    1236:	b0 01       	movw	r22, r0
    1238:	b3 9f       	mul	r27, r19
    123a:	c0 01       	movw	r24, r0
    123c:	a3 9f       	mul	r26, r19
    123e:	70 0d       	add	r23, r0
    1240:	81 1d       	adc	r24, r1
    1242:	11 24       	eor	r1, r1
    1244:	91 1d       	adc	r25, r1
    1246:	b2 9f       	mul	r27, r18
    1248:	70 0d       	add	r23, r0
    124a:	81 1d       	adc	r24, r1
    124c:	11 24       	eor	r1, r1
    124e:	91 1d       	adc	r25, r1
    1250:	08 95       	ret

00001252 <calloc>:
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	86 9f       	mul	r24, r22
    125c:	80 01       	movw	r16, r0
    125e:	87 9f       	mul	r24, r23
    1260:	10 0d       	add	r17, r0
    1262:	96 9f       	mul	r25, r22
    1264:	10 0d       	add	r17, r0
    1266:	11 24       	eor	r1, r1
    1268:	c8 01       	movw	r24, r16
    126a:	0e 94 45 09 	call	0x128a	; 0x128a <malloc>
    126e:	ec 01       	movw	r28, r24
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	29 f0       	breq	.+10     	; 0x127e <calloc+0x2c>
    1274:	a8 01       	movw	r20, r16
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <memset>
    127e:	ce 01       	movw	r24, r28
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <malloc>:
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	10 f4       	brcc	.+4      	; 0x129c <malloc+0x12>
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <__flp>
    12a0:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <__flp+0x1>
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	19 f1       	breq	.+70     	; 0x12f6 <malloc+0x6c>
    12b0:	40 81       	ld	r20, Z
    12b2:	51 81       	ldd	r21, Z+1	; 0x01
    12b4:	02 81       	ldd	r16, Z+2	; 0x02
    12b6:	13 81       	ldd	r17, Z+3	; 0x03
    12b8:	48 17       	cp	r20, r24
    12ba:	59 07       	cpc	r21, r25
    12bc:	c8 f0       	brcs	.+50     	; 0x12f0 <malloc+0x66>
    12be:	84 17       	cp	r24, r20
    12c0:	95 07       	cpc	r25, r21
    12c2:	69 f4       	brne	.+26     	; 0x12de <malloc+0x54>
    12c4:	10 97       	sbiw	r26, 0x00	; 0
    12c6:	31 f0       	breq	.+12     	; 0x12d4 <malloc+0x4a>
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	0c 93       	st	X, r16
    12cc:	12 97       	sbiw	r26, 0x02	; 2
    12ce:	13 96       	adiw	r26, 0x03	; 3
    12d0:	1c 93       	st	X, r17
    12d2:	27 c0       	rjmp	.+78     	; 0x1322 <malloc+0x98>
    12d4:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <__flp>
    12d8:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <__flp+0x1>
    12dc:	22 c0       	rjmp	.+68     	; 0x1322 <malloc+0x98>
    12de:	21 15       	cp	r18, r1
    12e0:	31 05       	cpc	r19, r1
    12e2:	19 f0       	breq	.+6      	; 0x12ea <malloc+0x60>
    12e4:	42 17       	cp	r20, r18
    12e6:	53 07       	cpc	r21, r19
    12e8:	18 f4       	brcc	.+6      	; 0x12f0 <malloc+0x66>
    12ea:	9a 01       	movw	r18, r20
    12ec:	bd 01       	movw	r22, r26
    12ee:	ef 01       	movw	r28, r30
    12f0:	df 01       	movw	r26, r30
    12f2:	f8 01       	movw	r30, r16
    12f4:	db cf       	rjmp	.-74     	; 0x12ac <malloc+0x22>
    12f6:	21 15       	cp	r18, r1
    12f8:	31 05       	cpc	r19, r1
    12fa:	f9 f0       	breq	.+62     	; 0x133a <malloc+0xb0>
    12fc:	28 1b       	sub	r18, r24
    12fe:	39 0b       	sbc	r19, r25
    1300:	24 30       	cpi	r18, 0x04	; 4
    1302:	31 05       	cpc	r19, r1
    1304:	80 f4       	brcc	.+32     	; 0x1326 <malloc+0x9c>
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	61 15       	cp	r22, r1
    130c:	71 05       	cpc	r23, r1
    130e:	21 f0       	breq	.+8      	; 0x1318 <malloc+0x8e>
    1310:	fb 01       	movw	r30, r22
    1312:	93 83       	std	Z+3, r25	; 0x03
    1314:	82 83       	std	Z+2, r24	; 0x02
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <malloc+0x96>
    1318:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__flp+0x1>
    131c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__flp>
    1320:	fe 01       	movw	r30, r28
    1322:	32 96       	adiw	r30, 0x02	; 2
    1324:	44 c0       	rjmp	.+136    	; 0x13ae <malloc+0x124>
    1326:	fe 01       	movw	r30, r28
    1328:	e2 0f       	add	r30, r18
    132a:	f3 1f       	adc	r31, r19
    132c:	81 93       	st	Z+, r24
    132e:	91 93       	st	Z+, r25
    1330:	22 50       	subi	r18, 0x02	; 2
    1332:	31 09       	sbc	r19, r1
    1334:	39 83       	std	Y+1, r19	; 0x01
    1336:	28 83       	st	Y, r18
    1338:	3a c0       	rjmp	.+116    	; 0x13ae <malloc+0x124>
    133a:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__brkval>
    133e:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__brkval+0x1>
    1342:	23 2b       	or	r18, r19
    1344:	41 f4       	brne	.+16     	; 0x1356 <malloc+0xcc>
    1346:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    134a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    134e:	30 93 dd 01 	sts	0x01DD, r19	; 0x8001dd <__brkval+0x1>
    1352:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <__brkval>
    1356:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    135a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	41 f4       	brne	.+16     	; 0x1374 <malloc+0xea>
    1364:	2d b7       	in	r18, 0x3d	; 61
    1366:	3e b7       	in	r19, 0x3e	; 62
    1368:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    136c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1370:	24 1b       	sub	r18, r20
    1372:	35 0b       	sbc	r19, r21
    1374:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <__brkval>
    1378:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <__brkval+0x1>
    137c:	e2 17       	cp	r30, r18
    137e:	f3 07       	cpc	r31, r19
    1380:	a0 f4       	brcc	.+40     	; 0x13aa <malloc+0x120>
    1382:	2e 1b       	sub	r18, r30
    1384:	3f 0b       	sbc	r19, r31
    1386:	28 17       	cp	r18, r24
    1388:	39 07       	cpc	r19, r25
    138a:	78 f0       	brcs	.+30     	; 0x13aa <malloc+0x120>
    138c:	ac 01       	movw	r20, r24
    138e:	4e 5f       	subi	r20, 0xFE	; 254
    1390:	5f 4f       	sbci	r21, 0xFF	; 255
    1392:	24 17       	cp	r18, r20
    1394:	35 07       	cpc	r19, r21
    1396:	48 f0       	brcs	.+18     	; 0x13aa <malloc+0x120>
    1398:	4e 0f       	add	r20, r30
    139a:	5f 1f       	adc	r21, r31
    139c:	50 93 dd 01 	sts	0x01DD, r21	; 0x8001dd <__brkval+0x1>
    13a0:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <__brkval>
    13a4:	81 93       	st	Z+, r24
    13a6:	91 93       	st	Z+, r25
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <malloc+0x124>
    13aa:	e0 e0       	ldi	r30, 0x00	; 0
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	cf 01       	movw	r24, r30
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <free>:
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <free+0xa>
    13c2:	81 c0       	rjmp	.+258    	; 0x14c6 <free+0x10c>
    13c4:	fc 01       	movw	r30, r24
    13c6:	32 97       	sbiw	r30, 0x02	; 2
    13c8:	13 82       	std	Z+3, r1	; 0x03
    13ca:	12 82       	std	Z+2, r1	; 0x02
    13cc:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <__flp>
    13d0:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <__flp+0x1>
    13d4:	10 97       	sbiw	r26, 0x00	; 0
    13d6:	81 f4       	brne	.+32     	; 0x13f8 <free+0x3e>
    13d8:	20 81       	ld	r18, Z
    13da:	31 81       	ldd	r19, Z+1	; 0x01
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__brkval>
    13e4:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__brkval+0x1>
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	51 f5       	brne	.+84     	; 0x1442 <free+0x88>
    13ee:	f0 93 dd 01 	sts	0x01DD, r31	; 0x8001dd <__brkval+0x1>
    13f2:	e0 93 dc 01 	sts	0x01DC, r30	; 0x8001dc <__brkval>
    13f6:	67 c0       	rjmp	.+206    	; 0x14c6 <free+0x10c>
    13f8:	ed 01       	movw	r28, r26
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	ce 17       	cp	r28, r30
    1400:	df 07       	cpc	r29, r31
    1402:	40 f4       	brcc	.+16     	; 0x1414 <free+0x5a>
    1404:	4a 81       	ldd	r20, Y+2	; 0x02
    1406:	5b 81       	ldd	r21, Y+3	; 0x03
    1408:	9e 01       	movw	r18, r28
    140a:	41 15       	cp	r20, r1
    140c:	51 05       	cpc	r21, r1
    140e:	f1 f0       	breq	.+60     	; 0x144c <free+0x92>
    1410:	ea 01       	movw	r28, r20
    1412:	f5 cf       	rjmp	.-22     	; 0x13fe <free+0x44>
    1414:	d3 83       	std	Z+3, r29	; 0x03
    1416:	c2 83       	std	Z+2, r28	; 0x02
    1418:	40 81       	ld	r20, Z
    141a:	51 81       	ldd	r21, Z+1	; 0x01
    141c:	84 0f       	add	r24, r20
    141e:	95 1f       	adc	r25, r21
    1420:	c8 17       	cp	r28, r24
    1422:	d9 07       	cpc	r29, r25
    1424:	59 f4       	brne	.+22     	; 0x143c <free+0x82>
    1426:	88 81       	ld	r24, Y
    1428:	99 81       	ldd	r25, Y+1	; 0x01
    142a:	84 0f       	add	r24, r20
    142c:	95 1f       	adc	r25, r21
    142e:	02 96       	adiw	r24, 0x02	; 2
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	93 83       	std	Z+3, r25	; 0x03
    143a:	82 83       	std	Z+2, r24	; 0x02
    143c:	21 15       	cp	r18, r1
    143e:	31 05       	cpc	r19, r1
    1440:	29 f4       	brne	.+10     	; 0x144c <free+0x92>
    1442:	f0 93 df 01 	sts	0x01DF, r31	; 0x8001df <__flp+0x1>
    1446:	e0 93 de 01 	sts	0x01DE, r30	; 0x8001de <__flp>
    144a:	3d c0       	rjmp	.+122    	; 0x14c6 <free+0x10c>
    144c:	e9 01       	movw	r28, r18
    144e:	fb 83       	std	Y+3, r31	; 0x03
    1450:	ea 83       	std	Y+2, r30	; 0x02
    1452:	49 91       	ld	r20, Y+
    1454:	59 91       	ld	r21, Y+
    1456:	c4 0f       	add	r28, r20
    1458:	d5 1f       	adc	r29, r21
    145a:	ec 17       	cp	r30, r28
    145c:	fd 07       	cpc	r31, r29
    145e:	61 f4       	brne	.+24     	; 0x1478 <free+0xbe>
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	84 0f       	add	r24, r20
    1466:	95 1f       	adc	r25, r21
    1468:	02 96       	adiw	r24, 0x02	; 2
    146a:	e9 01       	movw	r28, r18
    146c:	99 83       	std	Y+1, r25	; 0x01
    146e:	88 83       	st	Y, r24
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	9b 83       	std	Y+3, r25	; 0x03
    1476:	8a 83       	std	Y+2, r24	; 0x02
    1478:	e0 e0       	ldi	r30, 0x00	; 0
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	12 96       	adiw	r26, 0x02	; 2
    147e:	8d 91       	ld	r24, X+
    1480:	9c 91       	ld	r25, X
    1482:	13 97       	sbiw	r26, 0x03	; 3
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	19 f0       	breq	.+6      	; 0x148e <free+0xd4>
    1488:	fd 01       	movw	r30, r26
    148a:	dc 01       	movw	r26, r24
    148c:	f7 cf       	rjmp	.-18     	; 0x147c <free+0xc2>
    148e:	8d 91       	ld	r24, X+
    1490:	9c 91       	ld	r25, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	9d 01       	movw	r18, r26
    1496:	2e 5f       	subi	r18, 0xFE	; 254
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <__brkval>
    14a2:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <__brkval+0x1>
    14a6:	28 17       	cp	r18, r24
    14a8:	39 07       	cpc	r19, r25
    14aa:	69 f4       	brne	.+26     	; 0x14c6 <free+0x10c>
    14ac:	30 97       	sbiw	r30, 0x00	; 0
    14ae:	29 f4       	brne	.+10     	; 0x14ba <free+0x100>
    14b0:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <__flp+0x1>
    14b4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__flp>
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <free+0x104>
    14ba:	13 82       	std	Z+3, r1	; 0x03
    14bc:	12 82       	std	Z+2, r1	; 0x02
    14be:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <__brkval+0x1>
    14c2:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <__brkval>
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <memset>:
    14cc:	dc 01       	movw	r26, r24
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <memset+0x6>
    14d0:	6d 93       	st	X+, r22
    14d2:	41 50       	subi	r20, 0x01	; 1
    14d4:	50 40       	sbci	r21, 0x00	; 0
    14d6:	e0 f7       	brcc	.-8      	; 0x14d0 <memset+0x4>
    14d8:	08 95       	ret

000014da <fdevopen>:
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <fdevopen+0x18>
    14e6:	61 15       	cp	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <fdevopen+0x18>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	3a c0       	rjmp	.+116    	; 0x1566 <fdevopen+0x8c>
    14f2:	8b 01       	movw	r16, r22
    14f4:	ec 01       	movw	r28, r24
    14f6:	6e e0       	ldi	r22, 0x0E	; 14
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 29 09 	call	0x1252	; 0x1252 <calloc>
    1502:	fc 01       	movw	r30, r24
    1504:	89 2b       	or	r24, r25
    1506:	91 f3       	breq	.-28     	; 0x14ec <fdevopen+0x12>
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	83 83       	std	Z+3, r24	; 0x03
    150c:	01 15       	cp	r16, r1
    150e:	11 05       	cpc	r17, r1
    1510:	71 f0       	breq	.+28     	; 0x152e <fdevopen+0x54>
    1512:	13 87       	std	Z+11, r17	; 0x0b
    1514:	02 87       	std	Z+10, r16	; 0x0a
    1516:	81 e8       	ldi	r24, 0x81	; 129
    1518:	83 83       	std	Z+3, r24	; 0x03
    151a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__iob>
    151e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <__iob+0x1>
    1522:	89 2b       	or	r24, r25
    1524:	21 f4       	brne	.+8      	; 0x152e <fdevopen+0x54>
    1526:	f0 93 e1 01 	sts	0x01E1, r31	; 0x8001e1 <__iob+0x1>
    152a:	e0 93 e0 01 	sts	0x01E0, r30	; 0x8001e0 <__iob>
    152e:	20 97       	sbiw	r28, 0x00	; 0
    1530:	c9 f0       	breq	.+50     	; 0x1564 <fdevopen+0x8a>
    1532:	d1 87       	std	Z+9, r29	; 0x09
    1534:	c0 87       	std	Z+8, r28	; 0x08
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	82 60       	ori	r24, 0x02	; 2
    153a:	83 83       	std	Z+3, r24	; 0x03
    153c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__iob+0x2>
    1540:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__iob+0x3>
    1544:	89 2b       	or	r24, r25
    1546:	71 f4       	brne	.+28     	; 0x1564 <fdevopen+0x8a>
    1548:	f0 93 e3 01 	sts	0x01E3, r31	; 0x8001e3 <__iob+0x3>
    154c:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <__iob+0x2>
    1550:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__iob+0x4>
    1554:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <__iob+0x5>
    1558:	89 2b       	or	r24, r25
    155a:	21 f4       	brne	.+8      	; 0x1564 <fdevopen+0x8a>
    155c:	f0 93 e5 01 	sts	0x01E5, r31	; 0x8001e5 <__iob+0x5>
    1560:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <__iob+0x4>
    1564:	cf 01       	movw	r24, r30
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <printf>:
    1570:	a0 e0       	ldi	r26, 0x00	; 0
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ee eb       	ldi	r30, 0xBE	; 190
    1576:	fa e0       	ldi	r31, 0x0A	; 10
    1578:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__prologue_saves__+0x20>
    157c:	ae 01       	movw	r20, r28
    157e:	4b 5f       	subi	r20, 0xFB	; 251
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	fa 01       	movw	r30, r20
    1584:	61 91       	ld	r22, Z+
    1586:	71 91       	ld	r23, Z+
    1588:	af 01       	movw	r20, r30
    158a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__iob+0x2>
    158e:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__iob+0x3>
    1592:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <vfprintf>
    1596:	e2 e0       	ldi	r30, 0x02	; 2
    1598:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__epilogue_restores__+0x20>

0000159c <sprintf>:
    159c:	ae e0       	ldi	r26, 0x0E	; 14
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 ed       	ldi	r30, 0xD4	; 212
    15a2:	fa e0       	ldi	r31, 0x0A	; 10
    15a4:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__prologue_saves__+0x1c>
    15a8:	0d 89       	ldd	r16, Y+21	; 0x15
    15aa:	1e 89       	ldd	r17, Y+22	; 0x16
    15ac:	86 e0       	ldi	r24, 0x06	; 6
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	1a 83       	std	Y+2, r17	; 0x02
    15b2:	09 83       	std	Y+1, r16	; 0x01
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f e7       	ldi	r25, 0x7F	; 127
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	ae 01       	movw	r20, r28
    15be:	47 5e       	subi	r20, 0xE7	; 231
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	6f 89       	ldd	r22, Y+23	; 0x17
    15c4:	78 8d       	ldd	r23, Y+24	; 0x18
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <vfprintf>
    15ce:	ef 81       	ldd	r30, Y+7	; 0x07
    15d0:	f8 85       	ldd	r31, Y+8	; 0x08
    15d2:	e0 0f       	add	r30, r16
    15d4:	f1 1f       	adc	r31, r17
    15d6:	10 82       	st	Z, r1
    15d8:	2e 96       	adiw	r28, 0x0e	; 14
    15da:	e4 e0       	ldi	r30, 0x04	; 4
    15dc:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__epilogue_restores__+0x1c>

000015e0 <vfprintf>:
    15e0:	ab e0       	ldi	r26, 0x0B	; 11
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 ef       	ldi	r30, 0xF6	; 246
    15e6:	fa e0       	ldi	r31, 0x0A	; 10
    15e8:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__prologue_saves__>
    15ec:	6c 01       	movw	r12, r24
    15ee:	7b 01       	movw	r14, r22
    15f0:	8a 01       	movw	r16, r20
    15f2:	fc 01       	movw	r30, r24
    15f4:	17 82       	std	Z+7, r1	; 0x07
    15f6:	16 82       	std	Z+6, r1	; 0x06
    15f8:	83 81       	ldd	r24, Z+3	; 0x03
    15fa:	81 ff       	sbrs	r24, 1
    15fc:	cc c1       	rjmp	.+920    	; 0x1996 <vfprintf+0x3b6>
    15fe:	ce 01       	movw	r24, r28
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	3c 01       	movw	r6, r24
    1604:	f6 01       	movw	r30, r12
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	f7 01       	movw	r30, r14
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	7f 01       	movw	r14, r30
    1614:	88 23       	and	r24, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <vfprintf+0x3a>
    1618:	ba c1       	rjmp	.+884    	; 0x198e <vfprintf+0x3ae>
    161a:	85 32       	cpi	r24, 0x25	; 37
    161c:	39 f4       	brne	.+14     	; 0x162c <vfprintf+0x4c>
    161e:	93 fd       	sbrc	r25, 3
    1620:	85 91       	lpm	r24, Z+
    1622:	93 ff       	sbrs	r25, 3
    1624:	81 91       	ld	r24, Z+
    1626:	7f 01       	movw	r14, r30
    1628:	85 32       	cpi	r24, 0x25	; 37
    162a:	29 f4       	brne	.+10     	; 0x1636 <vfprintf+0x56>
    162c:	b6 01       	movw	r22, r12
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1634:	e7 cf       	rjmp	.-50     	; 0x1604 <vfprintf+0x24>
    1636:	91 2c       	mov	r9, r1
    1638:	21 2c       	mov	r2, r1
    163a:	31 2c       	mov	r3, r1
    163c:	ff e1       	ldi	r31, 0x1F	; 31
    163e:	f3 15       	cp	r31, r3
    1640:	d8 f0       	brcs	.+54     	; 0x1678 <vfprintf+0x98>
    1642:	8b 32       	cpi	r24, 0x2B	; 43
    1644:	79 f0       	breq	.+30     	; 0x1664 <vfprintf+0x84>
    1646:	38 f4       	brcc	.+14     	; 0x1656 <vfprintf+0x76>
    1648:	80 32       	cpi	r24, 0x20	; 32
    164a:	79 f0       	breq	.+30     	; 0x166a <vfprintf+0x8a>
    164c:	83 32       	cpi	r24, 0x23	; 35
    164e:	a1 f4       	brne	.+40     	; 0x1678 <vfprintf+0x98>
    1650:	23 2d       	mov	r18, r3
    1652:	20 61       	ori	r18, 0x10	; 16
    1654:	1d c0       	rjmp	.+58     	; 0x1690 <vfprintf+0xb0>
    1656:	8d 32       	cpi	r24, 0x2D	; 45
    1658:	61 f0       	breq	.+24     	; 0x1672 <vfprintf+0x92>
    165a:	80 33       	cpi	r24, 0x30	; 48
    165c:	69 f4       	brne	.+26     	; 0x1678 <vfprintf+0x98>
    165e:	23 2d       	mov	r18, r3
    1660:	21 60       	ori	r18, 0x01	; 1
    1662:	16 c0       	rjmp	.+44     	; 0x1690 <vfprintf+0xb0>
    1664:	83 2d       	mov	r24, r3
    1666:	82 60       	ori	r24, 0x02	; 2
    1668:	38 2e       	mov	r3, r24
    166a:	e3 2d       	mov	r30, r3
    166c:	e4 60       	ori	r30, 0x04	; 4
    166e:	3e 2e       	mov	r3, r30
    1670:	2a c0       	rjmp	.+84     	; 0x16c6 <vfprintf+0xe6>
    1672:	f3 2d       	mov	r31, r3
    1674:	f8 60       	ori	r31, 0x08	; 8
    1676:	1d c0       	rjmp	.+58     	; 0x16b2 <vfprintf+0xd2>
    1678:	37 fc       	sbrc	r3, 7
    167a:	2d c0       	rjmp	.+90     	; 0x16d6 <vfprintf+0xf6>
    167c:	20 ed       	ldi	r18, 0xD0	; 208
    167e:	28 0f       	add	r18, r24
    1680:	2a 30       	cpi	r18, 0x0A	; 10
    1682:	40 f0       	brcs	.+16     	; 0x1694 <vfprintf+0xb4>
    1684:	8e 32       	cpi	r24, 0x2E	; 46
    1686:	b9 f4       	brne	.+46     	; 0x16b6 <vfprintf+0xd6>
    1688:	36 fc       	sbrc	r3, 6
    168a:	81 c1       	rjmp	.+770    	; 0x198e <vfprintf+0x3ae>
    168c:	23 2d       	mov	r18, r3
    168e:	20 64       	ori	r18, 0x40	; 64
    1690:	32 2e       	mov	r3, r18
    1692:	19 c0       	rjmp	.+50     	; 0x16c6 <vfprintf+0xe6>
    1694:	36 fe       	sbrs	r3, 6
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <vfprintf+0xc4>
    1698:	8a e0       	ldi	r24, 0x0A	; 10
    169a:	98 9e       	mul	r9, r24
    169c:	20 0d       	add	r18, r0
    169e:	11 24       	eor	r1, r1
    16a0:	92 2e       	mov	r9, r18
    16a2:	11 c0       	rjmp	.+34     	; 0x16c6 <vfprintf+0xe6>
    16a4:	ea e0       	ldi	r30, 0x0A	; 10
    16a6:	2e 9e       	mul	r2, r30
    16a8:	20 0d       	add	r18, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	22 2e       	mov	r2, r18
    16ae:	f3 2d       	mov	r31, r3
    16b0:	f0 62       	ori	r31, 0x20	; 32
    16b2:	3f 2e       	mov	r3, r31
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <vfprintf+0xe6>
    16b6:	8c 36       	cpi	r24, 0x6C	; 108
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <vfprintf+0xe2>
    16ba:	83 2d       	mov	r24, r3
    16bc:	80 68       	ori	r24, 0x80	; 128
    16be:	38 2e       	mov	r3, r24
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <vfprintf+0xe6>
    16c2:	88 36       	cpi	r24, 0x68	; 104
    16c4:	41 f4       	brne	.+16     	; 0x16d6 <vfprintf+0xf6>
    16c6:	f7 01       	movw	r30, r14
    16c8:	93 fd       	sbrc	r25, 3
    16ca:	85 91       	lpm	r24, Z+
    16cc:	93 ff       	sbrs	r25, 3
    16ce:	81 91       	ld	r24, Z+
    16d0:	7f 01       	movw	r14, r30
    16d2:	81 11       	cpse	r24, r1
    16d4:	b3 cf       	rjmp	.-154    	; 0x163c <vfprintf+0x5c>
    16d6:	98 2f       	mov	r25, r24
    16d8:	9f 7d       	andi	r25, 0xDF	; 223
    16da:	95 54       	subi	r25, 0x45	; 69
    16dc:	93 30       	cpi	r25, 0x03	; 3
    16de:	28 f4       	brcc	.+10     	; 0x16ea <vfprintf+0x10a>
    16e0:	0c 5f       	subi	r16, 0xFC	; 252
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	9f e3       	ldi	r25, 0x3F	; 63
    16e6:	99 83       	std	Y+1, r25	; 0x01
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <vfprintf+0x124>
    16ea:	83 36       	cpi	r24, 0x63	; 99
    16ec:	31 f0       	breq	.+12     	; 0x16fa <vfprintf+0x11a>
    16ee:	83 37       	cpi	r24, 0x73	; 115
    16f0:	71 f0       	breq	.+28     	; 0x170e <vfprintf+0x12e>
    16f2:	83 35       	cpi	r24, 0x53	; 83
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <vfprintf+0x118>
    16f6:	59 c0       	rjmp	.+178    	; 0x17aa <vfprintf+0x1ca>
    16f8:	21 c0       	rjmp	.+66     	; 0x173c <vfprintf+0x15c>
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 81       	ld	r24, Z
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	0e 5f       	subi	r16, 0xFE	; 254
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	88 24       	eor	r8, r8
    1706:	83 94       	inc	r8
    1708:	91 2c       	mov	r9, r1
    170a:	53 01       	movw	r10, r6
    170c:	13 c0       	rjmp	.+38     	; 0x1734 <vfprintf+0x154>
    170e:	28 01       	movw	r4, r16
    1710:	f2 e0       	ldi	r31, 0x02	; 2
    1712:	4f 0e       	add	r4, r31
    1714:	51 1c       	adc	r5, r1
    1716:	f8 01       	movw	r30, r16
    1718:	a0 80       	ld	r10, Z
    171a:	b1 80       	ldd	r11, Z+1	; 0x01
    171c:	36 fe       	sbrs	r3, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x146>
    1720:	69 2d       	mov	r22, r9
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x14a>
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	7f ef       	ldi	r23, 0xFF	; 255
    172a:	c5 01       	movw	r24, r10
    172c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <strnlen>
    1730:	4c 01       	movw	r8, r24
    1732:	82 01       	movw	r16, r4
    1734:	f3 2d       	mov	r31, r3
    1736:	ff 77       	andi	r31, 0x7F	; 127
    1738:	3f 2e       	mov	r3, r31
    173a:	16 c0       	rjmp	.+44     	; 0x1768 <vfprintf+0x188>
    173c:	28 01       	movw	r4, r16
    173e:	22 e0       	ldi	r18, 0x02	; 2
    1740:	42 0e       	add	r4, r18
    1742:	51 1c       	adc	r5, r1
    1744:	f8 01       	movw	r30, r16
    1746:	a0 80       	ld	r10, Z
    1748:	b1 80       	ldd	r11, Z+1	; 0x01
    174a:	36 fe       	sbrs	r3, 6
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x174>
    174e:	69 2d       	mov	r22, r9
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x178>
    1754:	6f ef       	ldi	r22, 0xFF	; 255
    1756:	7f ef       	ldi	r23, 0xFF	; 255
    1758:	c5 01       	movw	r24, r10
    175a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <strnlen_P>
    175e:	4c 01       	movw	r8, r24
    1760:	f3 2d       	mov	r31, r3
    1762:	f0 68       	ori	r31, 0x80	; 128
    1764:	3f 2e       	mov	r3, r31
    1766:	82 01       	movw	r16, r4
    1768:	33 fc       	sbrc	r3, 3
    176a:	1b c0       	rjmp	.+54     	; 0x17a2 <vfprintf+0x1c2>
    176c:	82 2d       	mov	r24, r2
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	88 16       	cp	r8, r24
    1772:	99 06       	cpc	r9, r25
    1774:	b0 f4       	brcc	.+44     	; 0x17a2 <vfprintf+0x1c2>
    1776:	b6 01       	movw	r22, r12
    1778:	80 e2       	ldi	r24, 0x20	; 32
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1780:	2a 94       	dec	r2
    1782:	f4 cf       	rjmp	.-24     	; 0x176c <vfprintf+0x18c>
    1784:	f5 01       	movw	r30, r10
    1786:	37 fc       	sbrc	r3, 7
    1788:	85 91       	lpm	r24, Z+
    178a:	37 fe       	sbrs	r3, 7
    178c:	81 91       	ld	r24, Z+
    178e:	5f 01       	movw	r10, r30
    1790:	b6 01       	movw	r22, r12
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1798:	21 10       	cpse	r2, r1
    179a:	2a 94       	dec	r2
    179c:	21 e0       	ldi	r18, 0x01	; 1
    179e:	82 1a       	sub	r8, r18
    17a0:	91 08       	sbc	r9, r1
    17a2:	81 14       	cp	r8, r1
    17a4:	91 04       	cpc	r9, r1
    17a6:	71 f7       	brne	.-36     	; 0x1784 <vfprintf+0x1a4>
    17a8:	e8 c0       	rjmp	.+464    	; 0x197a <vfprintf+0x39a>
    17aa:	84 36       	cpi	r24, 0x64	; 100
    17ac:	11 f0       	breq	.+4      	; 0x17b2 <vfprintf+0x1d2>
    17ae:	89 36       	cpi	r24, 0x69	; 105
    17b0:	41 f5       	brne	.+80     	; 0x1802 <vfprintf+0x222>
    17b2:	f8 01       	movw	r30, r16
    17b4:	37 fe       	sbrs	r3, 7
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <vfprintf+0x1e6>
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	0c 5f       	subi	r16, 0xFC	; 252
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	08 c0       	rjmp	.+16     	; 0x17d6 <vfprintf+0x1f6>
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	07 2e       	mov	r0, r23
    17cc:	00 0c       	add	r0, r0
    17ce:	88 0b       	sbc	r24, r24
    17d0:	99 0b       	sbc	r25, r25
    17d2:	0e 5f       	subi	r16, 0xFE	; 254
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	f3 2d       	mov	r31, r3
    17d8:	ff 76       	andi	r31, 0x6F	; 111
    17da:	3f 2e       	mov	r3, r31
    17dc:	97 ff       	sbrs	r25, 7
    17de:	09 c0       	rjmp	.+18     	; 0x17f2 <vfprintf+0x212>
    17e0:	90 95       	com	r25
    17e2:	80 95       	com	r24
    17e4:	70 95       	com	r23
    17e6:	61 95       	neg	r22
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	8f 4f       	sbci	r24, 0xFF	; 255
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	f0 68       	ori	r31, 0x80	; 128
    17f0:	3f 2e       	mov	r3, r31
    17f2:	2a e0       	ldi	r18, 0x0A	; 10
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	a3 01       	movw	r20, r6
    17f8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__ultoa_invert>
    17fc:	88 2e       	mov	r8, r24
    17fe:	86 18       	sub	r8, r6
    1800:	45 c0       	rjmp	.+138    	; 0x188c <vfprintf+0x2ac>
    1802:	85 37       	cpi	r24, 0x75	; 117
    1804:	31 f4       	brne	.+12     	; 0x1812 <vfprintf+0x232>
    1806:	23 2d       	mov	r18, r3
    1808:	2f 7e       	andi	r18, 0xEF	; 239
    180a:	b2 2e       	mov	r11, r18
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	25 c0       	rjmp	.+74     	; 0x185c <vfprintf+0x27c>
    1812:	93 2d       	mov	r25, r3
    1814:	99 7f       	andi	r25, 0xF9	; 249
    1816:	b9 2e       	mov	r11, r25
    1818:	8f 36       	cpi	r24, 0x6F	; 111
    181a:	c1 f0       	breq	.+48     	; 0x184c <vfprintf+0x26c>
    181c:	18 f4       	brcc	.+6      	; 0x1824 <vfprintf+0x244>
    181e:	88 35       	cpi	r24, 0x58	; 88
    1820:	79 f0       	breq	.+30     	; 0x1840 <vfprintf+0x260>
    1822:	b5 c0       	rjmp	.+362    	; 0x198e <vfprintf+0x3ae>
    1824:	80 37       	cpi	r24, 0x70	; 112
    1826:	19 f0       	breq	.+6      	; 0x182e <vfprintf+0x24e>
    1828:	88 37       	cpi	r24, 0x78	; 120
    182a:	21 f0       	breq	.+8      	; 0x1834 <vfprintf+0x254>
    182c:	b0 c0       	rjmp	.+352    	; 0x198e <vfprintf+0x3ae>
    182e:	e9 2f       	mov	r30, r25
    1830:	e0 61       	ori	r30, 0x10	; 16
    1832:	be 2e       	mov	r11, r30
    1834:	b4 fe       	sbrs	r11, 4
    1836:	0d c0       	rjmp	.+26     	; 0x1852 <vfprintf+0x272>
    1838:	fb 2d       	mov	r31, r11
    183a:	f4 60       	ori	r31, 0x04	; 4
    183c:	bf 2e       	mov	r11, r31
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <vfprintf+0x272>
    1840:	34 fe       	sbrs	r3, 4
    1842:	0a c0       	rjmp	.+20     	; 0x1858 <vfprintf+0x278>
    1844:	29 2f       	mov	r18, r25
    1846:	26 60       	ori	r18, 0x06	; 6
    1848:	b2 2e       	mov	r11, r18
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <vfprintf+0x278>
    184c:	28 e0       	ldi	r18, 0x08	; 8
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	05 c0       	rjmp	.+10     	; 0x185c <vfprintf+0x27c>
    1852:	20 e1       	ldi	r18, 0x10	; 16
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	02 c0       	rjmp	.+4      	; 0x185c <vfprintf+0x27c>
    1858:	20 e1       	ldi	r18, 0x10	; 16
    185a:	32 e0       	ldi	r19, 0x02	; 2
    185c:	f8 01       	movw	r30, r16
    185e:	b7 fe       	sbrs	r11, 7
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <vfprintf+0x290>
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	0c 5f       	subi	r16, 0xFC	; 252
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x29c>
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 5f       	subi	r16, 0xFE	; 254
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	a3 01       	movw	r20, r6
    187e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__ultoa_invert>
    1882:	88 2e       	mov	r8, r24
    1884:	86 18       	sub	r8, r6
    1886:	fb 2d       	mov	r31, r11
    1888:	ff 77       	andi	r31, 0x7F	; 127
    188a:	3f 2e       	mov	r3, r31
    188c:	36 fe       	sbrs	r3, 6
    188e:	0d c0       	rjmp	.+26     	; 0x18aa <vfprintf+0x2ca>
    1890:	23 2d       	mov	r18, r3
    1892:	2e 7f       	andi	r18, 0xFE	; 254
    1894:	a2 2e       	mov	r10, r18
    1896:	89 14       	cp	r8, r9
    1898:	58 f4       	brcc	.+22     	; 0x18b0 <vfprintf+0x2d0>
    189a:	34 fe       	sbrs	r3, 4
    189c:	0b c0       	rjmp	.+22     	; 0x18b4 <vfprintf+0x2d4>
    189e:	32 fc       	sbrc	r3, 2
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <vfprintf+0x2d4>
    18a2:	83 2d       	mov	r24, r3
    18a4:	8e 7e       	andi	r24, 0xEE	; 238
    18a6:	a8 2e       	mov	r10, r24
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <vfprintf+0x2d4>
    18aa:	b8 2c       	mov	r11, r8
    18ac:	a3 2c       	mov	r10, r3
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <vfprintf+0x2d6>
    18b0:	b8 2c       	mov	r11, r8
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <vfprintf+0x2d6>
    18b4:	b9 2c       	mov	r11, r9
    18b6:	a4 fe       	sbrs	r10, 4
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <vfprintf+0x2f8>
    18ba:	fe 01       	movw	r30, r28
    18bc:	e8 0d       	add	r30, r8
    18be:	f1 1d       	adc	r31, r1
    18c0:	80 81       	ld	r24, Z
    18c2:	80 33       	cpi	r24, 0x30	; 48
    18c4:	21 f4       	brne	.+8      	; 0x18ce <vfprintf+0x2ee>
    18c6:	9a 2d       	mov	r25, r10
    18c8:	99 7e       	andi	r25, 0xE9	; 233
    18ca:	a9 2e       	mov	r10, r25
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <vfprintf+0x300>
    18ce:	a2 fe       	sbrs	r10, 2
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x2fe>
    18d2:	b3 94       	inc	r11
    18d4:	b3 94       	inc	r11
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <vfprintf+0x300>
    18d8:	8a 2d       	mov	r24, r10
    18da:	86 78       	andi	r24, 0x86	; 134
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <vfprintf+0x300>
    18de:	b3 94       	inc	r11
    18e0:	a3 fc       	sbrc	r10, 3
    18e2:	11 c0       	rjmp	.+34     	; 0x1906 <vfprintf+0x326>
    18e4:	a0 fe       	sbrs	r10, 0
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <vfprintf+0x314>
    18e8:	b2 14       	cp	r11, r2
    18ea:	88 f4       	brcc	.+34     	; 0x190e <vfprintf+0x32e>
    18ec:	28 0c       	add	r2, r8
    18ee:	92 2c       	mov	r9, r2
    18f0:	9b 18       	sub	r9, r11
    18f2:	0e c0       	rjmp	.+28     	; 0x1910 <vfprintf+0x330>
    18f4:	b2 14       	cp	r11, r2
    18f6:	60 f4       	brcc	.+24     	; 0x1910 <vfprintf+0x330>
    18f8:	b6 01       	movw	r22, r12
    18fa:	80 e2       	ldi	r24, 0x20	; 32
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1902:	b3 94       	inc	r11
    1904:	f7 cf       	rjmp	.-18     	; 0x18f4 <vfprintf+0x314>
    1906:	b2 14       	cp	r11, r2
    1908:	18 f4       	brcc	.+6      	; 0x1910 <vfprintf+0x330>
    190a:	2b 18       	sub	r2, r11
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <vfprintf+0x332>
    190e:	98 2c       	mov	r9, r8
    1910:	21 2c       	mov	r2, r1
    1912:	a4 fe       	sbrs	r10, 4
    1914:	10 c0       	rjmp	.+32     	; 0x1936 <vfprintf+0x356>
    1916:	b6 01       	movw	r22, r12
    1918:	80 e3       	ldi	r24, 0x30	; 48
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1920:	a2 fe       	sbrs	r10, 2
    1922:	17 c0       	rjmp	.+46     	; 0x1952 <vfprintf+0x372>
    1924:	a1 fc       	sbrc	r10, 1
    1926:	03 c0       	rjmp	.+6      	; 0x192e <vfprintf+0x34e>
    1928:	88 e7       	ldi	r24, 0x78	; 120
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <vfprintf+0x352>
    192e:	88 e5       	ldi	r24, 0x58	; 88
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	b6 01       	movw	r22, r12
    1934:	0c c0       	rjmp	.+24     	; 0x194e <vfprintf+0x36e>
    1936:	8a 2d       	mov	r24, r10
    1938:	86 78       	andi	r24, 0x86	; 134
    193a:	59 f0       	breq	.+22     	; 0x1952 <vfprintf+0x372>
    193c:	a1 fe       	sbrs	r10, 1
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0x364>
    1940:	8b e2       	ldi	r24, 0x2B	; 43
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <vfprintf+0x366>
    1944:	80 e2       	ldi	r24, 0x20	; 32
    1946:	a7 fc       	sbrc	r10, 7
    1948:	8d e2       	ldi	r24, 0x2D	; 45
    194a:	b6 01       	movw	r22, r12
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1952:	89 14       	cp	r8, r9
    1954:	38 f4       	brcc	.+14     	; 0x1964 <vfprintf+0x384>
    1956:	b6 01       	movw	r22, r12
    1958:	80 e3       	ldi	r24, 0x30	; 48
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1960:	9a 94       	dec	r9
    1962:	f7 cf       	rjmp	.-18     	; 0x1952 <vfprintf+0x372>
    1964:	8a 94       	dec	r8
    1966:	f3 01       	movw	r30, r6
    1968:	e8 0d       	add	r30, r8
    196a:	f1 1d       	adc	r31, r1
    196c:	80 81       	ld	r24, Z
    196e:	b6 01       	movw	r22, r12
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    1976:	81 10       	cpse	r8, r1
    1978:	f5 cf       	rjmp	.-22     	; 0x1964 <vfprintf+0x384>
    197a:	22 20       	and	r2, r2
    197c:	09 f4       	brne	.+2      	; 0x1980 <vfprintf+0x3a0>
    197e:	42 ce       	rjmp	.-892    	; 0x1604 <vfprintf+0x24>
    1980:	b6 01       	movw	r22, r12
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <fputc>
    198a:	2a 94       	dec	r2
    198c:	f6 cf       	rjmp	.-20     	; 0x197a <vfprintf+0x39a>
    198e:	f6 01       	movw	r30, r12
    1990:	86 81       	ldd	r24, Z+6	; 0x06
    1992:	97 81       	ldd	r25, Z+7	; 0x07
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x3ba>
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	9f ef       	ldi	r25, 0xFF	; 255
    199a:	2b 96       	adiw	r28, 0x0b	; 11
    199c:	e2 e1       	ldi	r30, 0x12	; 18
    199e:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__epilogue_restores__>

000019a2 <strnlen_P>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	05 90       	lpm	r0, Z+
    19a6:	61 50       	subi	r22, 0x01	; 1
    19a8:	70 40       	sbci	r23, 0x00	; 0
    19aa:	01 10       	cpse	r0, r1
    19ac:	d8 f7       	brcc	.-10     	; 0x19a4 <strnlen_P+0x2>
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	8e 0f       	add	r24, r30
    19b4:	9f 1f       	adc	r25, r31
    19b6:	08 95       	ret

000019b8 <strnlen>:
    19b8:	fc 01       	movw	r30, r24
    19ba:	61 50       	subi	r22, 0x01	; 1
    19bc:	70 40       	sbci	r23, 0x00	; 0
    19be:	01 90       	ld	r0, Z+
    19c0:	01 10       	cpse	r0, r1
    19c2:	d8 f7       	brcc	.-10     	; 0x19ba <strnlen+0x2>
    19c4:	80 95       	com	r24
    19c6:	90 95       	com	r25
    19c8:	8e 0f       	add	r24, r30
    19ca:	9f 1f       	adc	r25, r31
    19cc:	08 95       	ret

000019ce <fputc>:
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	fb 01       	movw	r30, r22
    19d8:	23 81       	ldd	r18, Z+3	; 0x03
    19da:	21 fd       	sbrc	r18, 1
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <fputc+0x16>
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	9f ef       	ldi	r25, 0xFF	; 255
    19e2:	2c c0       	rjmp	.+88     	; 0x1a3c <fputc+0x6e>
    19e4:	22 ff       	sbrs	r18, 2
    19e6:	16 c0       	rjmp	.+44     	; 0x1a14 <fputc+0x46>
    19e8:	46 81       	ldd	r20, Z+6	; 0x06
    19ea:	57 81       	ldd	r21, Z+7	; 0x07
    19ec:	24 81       	ldd	r18, Z+4	; 0x04
    19ee:	35 81       	ldd	r19, Z+5	; 0x05
    19f0:	42 17       	cp	r20, r18
    19f2:	53 07       	cpc	r21, r19
    19f4:	44 f4       	brge	.+16     	; 0x1a06 <fputc+0x38>
    19f6:	a0 81       	ld	r26, Z
    19f8:	b1 81       	ldd	r27, Z+1	; 0x01
    19fa:	9d 01       	movw	r18, r26
    19fc:	2f 5f       	subi	r18, 0xFF	; 255
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	31 83       	std	Z+1, r19	; 0x01
    1a02:	20 83       	st	Z, r18
    1a04:	8c 93       	st	X, r24
    1a06:	26 81       	ldd	r18, Z+6	; 0x06
    1a08:	37 81       	ldd	r19, Z+7	; 0x07
    1a0a:	2f 5f       	subi	r18, 0xFF	; 255
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	37 83       	std	Z+7, r19	; 0x07
    1a10:	26 83       	std	Z+6, r18	; 0x06
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <fputc+0x6e>
    1a14:	8b 01       	movw	r16, r22
    1a16:	ec 01       	movw	r28, r24
    1a18:	fb 01       	movw	r30, r22
    1a1a:	00 84       	ldd	r0, Z+8	; 0x08
    1a1c:	f1 85       	ldd	r31, Z+9	; 0x09
    1a1e:	e0 2d       	mov	r30, r0
    1a20:	09 95       	icall
    1a22:	89 2b       	or	r24, r25
    1a24:	e1 f6       	brne	.-72     	; 0x19de <fputc+0x10>
    1a26:	d8 01       	movw	r26, r16
    1a28:	16 96       	adiw	r26, 0x06	; 6
    1a2a:	8d 91       	ld	r24, X+
    1a2c:	9c 91       	ld	r25, X
    1a2e:	17 97       	sbiw	r26, 0x07	; 7
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	17 96       	adiw	r26, 0x07	; 7
    1a34:	9c 93       	st	X, r25
    1a36:	8e 93       	st	-X, r24
    1a38:	16 97       	sbiw	r26, 0x06	; 6
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <__ultoa_invert>:
    1a46:	fa 01       	movw	r30, r20
    1a48:	aa 27       	eor	r26, r26
    1a4a:	28 30       	cpi	r18, 0x08	; 8
    1a4c:	51 f1       	breq	.+84     	; 0x1aa2 <__ultoa_invert+0x5c>
    1a4e:	20 31       	cpi	r18, 0x10	; 16
    1a50:	81 f1       	breq	.+96     	; 0x1ab2 <__ultoa_invert+0x6c>
    1a52:	e8 94       	clt
    1a54:	6f 93       	push	r22
    1a56:	6e 7f       	andi	r22, 0xFE	; 254
    1a58:	6e 5f       	subi	r22, 0xFE	; 254
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	af 4f       	sbci	r26, 0xFF	; 255
    1a62:	b1 e0       	ldi	r27, 0x01	; 1
    1a64:	3e d0       	rcall	.+124    	; 0x1ae2 <__ultoa_invert+0x9c>
    1a66:	b4 e0       	ldi	r27, 0x04	; 4
    1a68:	3c d0       	rcall	.+120    	; 0x1ae2 <__ultoa_invert+0x9c>
    1a6a:	67 0f       	add	r22, r23
    1a6c:	78 1f       	adc	r23, r24
    1a6e:	89 1f       	adc	r24, r25
    1a70:	9a 1f       	adc	r25, r26
    1a72:	a1 1d       	adc	r26, r1
    1a74:	68 0f       	add	r22, r24
    1a76:	79 1f       	adc	r23, r25
    1a78:	8a 1f       	adc	r24, r26
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	6a 0f       	add	r22, r26
    1a80:	71 1d       	adc	r23, r1
    1a82:	81 1d       	adc	r24, r1
    1a84:	91 1d       	adc	r25, r1
    1a86:	a1 1d       	adc	r26, r1
    1a88:	20 d0       	rcall	.+64     	; 0x1aca <__ultoa_invert+0x84>
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <__ultoa_invert+0x48>
    1a8c:	68 94       	set
    1a8e:	3f 91       	pop	r19
    1a90:	2a e0       	ldi	r18, 0x0A	; 10
    1a92:	26 9f       	mul	r18, r22
    1a94:	11 24       	eor	r1, r1
    1a96:	30 19       	sub	r19, r0
    1a98:	30 5d       	subi	r19, 0xD0	; 208
    1a9a:	31 93       	st	Z+, r19
    1a9c:	de f6       	brtc	.-74     	; 0x1a54 <__ultoa_invert+0xe>
    1a9e:	cf 01       	movw	r24, r30
    1aa0:	08 95       	ret
    1aa2:	46 2f       	mov	r20, r22
    1aa4:	47 70       	andi	r20, 0x07	; 7
    1aa6:	40 5d       	subi	r20, 0xD0	; 208
    1aa8:	41 93       	st	Z+, r20
    1aaa:	b3 e0       	ldi	r27, 0x03	; 3
    1aac:	0f d0       	rcall	.+30     	; 0x1acc <__ultoa_invert+0x86>
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__ultoa_invert+0x5c>
    1ab0:	f6 cf       	rjmp	.-20     	; 0x1a9e <__ultoa_invert+0x58>
    1ab2:	46 2f       	mov	r20, r22
    1ab4:	4f 70       	andi	r20, 0x0F	; 15
    1ab6:	40 5d       	subi	r20, 0xD0	; 208
    1ab8:	4a 33       	cpi	r20, 0x3A	; 58
    1aba:	18 f0       	brcs	.+6      	; 0x1ac2 <__ultoa_invert+0x7c>
    1abc:	49 5d       	subi	r20, 0xD9	; 217
    1abe:	31 fd       	sbrc	r19, 1
    1ac0:	40 52       	subi	r20, 0x20	; 32
    1ac2:	41 93       	st	Z+, r20
    1ac4:	02 d0       	rcall	.+4      	; 0x1aca <__ultoa_invert+0x84>
    1ac6:	a9 f7       	brne	.-22     	; 0x1ab2 <__ultoa_invert+0x6c>
    1ac8:	ea cf       	rjmp	.-44     	; 0x1a9e <__ultoa_invert+0x58>
    1aca:	b4 e0       	ldi	r27, 0x04	; 4
    1acc:	a6 95       	lsr	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	ba 95       	dec	r27
    1ad8:	c9 f7       	brne	.-14     	; 0x1acc <__ultoa_invert+0x86>
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	61 05       	cpc	r22, r1
    1ade:	71 05       	cpc	r23, r1
    1ae0:	08 95       	ret
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	0a 2e       	mov	r0, r26
    1ae8:	06 94       	lsr	r0
    1aea:	57 95       	ror	r21
    1aec:	47 95       	ror	r20
    1aee:	37 95       	ror	r19
    1af0:	27 95       	ror	r18
    1af2:	ba 95       	dec	r27
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__ultoa_invert+0xa2>
    1af6:	62 0f       	add	r22, r18
    1af8:	73 1f       	adc	r23, r19
    1afa:	84 1f       	adc	r24, r20
    1afc:	95 1f       	adc	r25, r21
    1afe:	a0 1d       	adc	r26, r0
    1b00:	08 95       	ret

00001b02 <__prologue_saves__>:
    1b02:	2f 92       	push	r2
    1b04:	3f 92       	push	r3
    1b06:	4f 92       	push	r4
    1b08:	5f 92       	push	r5
    1b0a:	6f 92       	push	r6
    1b0c:	7f 92       	push	r7
    1b0e:	8f 92       	push	r8
    1b10:	9f 92       	push	r9
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	ca 1b       	sub	r28, r26
    1b2c:	db 0b       	sbc	r29, r27
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	09 94       	ijmp

00001b3a <__epilogue_restores__>:
    1b3a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b3c:	39 88       	ldd	r3, Y+17	; 0x11
    1b3e:	48 88       	ldd	r4, Y+16	; 0x10
    1b40:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b42:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b44:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b46:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b48:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b4c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b4e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b50:	df 80       	ldd	r13, Y+7	; 0x07
    1b52:	ee 80       	ldd	r14, Y+6	; 0x06
    1b54:	fd 80       	ldd	r15, Y+5	; 0x05
    1b56:	0c 81       	ldd	r16, Y+4	; 0x04
    1b58:	1b 81       	ldd	r17, Y+3	; 0x03
    1b5a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b5c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b5e:	ce 0f       	add	r28, r30
    1b60:	d1 1d       	adc	r29, r1
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	ed 01       	movw	r28, r26
    1b6e:	08 95       	ret

00001b70 <_exit>:
    1b70:	f8 94       	cli

00001b72 <__stop_program>:
    1b72:	ff cf       	rjmp	.-2      	; 0x1b72 <__stop_program>
